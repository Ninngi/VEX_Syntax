{
    "completions": [
        {
            "contents": "Du(${1:float}, ${2:...})",
            "trigger": "Du\tfloat Du( float; ... )"
        },
        {
            "contents": "Du(${1:vector4}, ${2:...})",
            "trigger": "Du\tvector4 Du( vector4; ... )"
        },
        {
            "contents": "Du(${1:vector}, ${2:...})",
            "trigger": "Du\tvector Du( vector; ... )"
        },
        {
            "contents": "Dv(${1:float}, ${2:...})",
            "trigger": "Dv\tfloat Dv( float; ... )"
        },
        {
            "contents": "Dv(${1:vector4}, ${2:...})",
            "trigger": "Dv\tvector4 Dv( vector4; ... )"
        },
        {
            "contents": "Dv(${1:vector}, ${2:...})",
            "trigger": "Dv\tvector Dv( vector; ... )"
        },
        {
            "contents": "Dw(${1:float}, ${2:...})",
            "trigger": "Dw\tfloat Dw( float; ... )"
        },
        {
            "contents": "Dw(${1:vector4}, ${2:...})",
            "trigger": "Dw\tvector4 Dw( vector4; ... )"
        },
        {
            "contents": "Dw(${1:vector}, ${2:...})",
            "trigger": "Dw\tvector Dw( vector; ... )"
        },
        {
            "contents": "abs(${1:float})",
            "trigger": "abs\tfloat abs( float )"
        },
        {
            "contents": "abs(${1:int})",
            "trigger": "abs\tint abs( int )"
        },
        {
            "contents": "abs(${1:vector4})",
            "trigger": "abs\tvector4 abs( vector4 )"
        },
        {
            "contents": "abs(${1:vector2})",
            "trigger": "abs\tvector2 abs( vector2 )"
        },
        {
            "contents": "abs(${1:vector})",
            "trigger": "abs\tvector abs( vector )"
        },
        {
            "contents": "acos(${1:float})",
            "trigger": "acos\tfloat acos( float )"
        },
        {
            "contents": "acos(${1:vector4})",
            "trigger": "acos\tvector4 acos( vector4 )"
        },
        {
            "contents": "acos(${1:vector2})",
            "trigger": "acos\tvector2 acos( vector2 )"
        },
        {
            "contents": "acos(${1:vector})",
            "trigger": "acos\tvector acos( vector )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix2})",
            "trigger": "addattrib\tint addattrib( int; string; string; matrix2 )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix3})",
            "trigger": "addattrib\tint addattrib( int; string; string; matrix3 )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix})",
            "trigger": "addattrib\tint addattrib( int; string; string; matrix )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:float})",
            "trigger": "addattrib\tint addattrib( int; string; string; float )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "addattrib\tint addattrib( int; string; string; int )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector4})",
            "trigger": "addattrib\tint addattrib( int; string; string; vector4 )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addattrib\tint addattrib( int; string; string; string )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector2})",
            "trigger": "addattrib\tint addattrib( int; string; string; vector2 )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "addattrib\tint addattrib( int; string; string; vector )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:float[]})",
            "trigger": "addattrib\tint addattrib( int; string; string; float[] )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:int[]})",
            "trigger": "addattrib\tint addattrib( int; string; string; int[] )"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:string[]})",
            "trigger": "addattrib\tint addattrib( int; string; string; string[] )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; matrix2 )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; matrix2; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; matrix3 )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; matrix3; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; matrix )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; matrix; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; float )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; float; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; int )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; int; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; vector4 )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; vector4; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; string; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; vector2 )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; vector2; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; vector )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; vector; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; float[] )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; float[]; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; int[] )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; int[]; string )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; string[] )"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "adddetailattrib\tint adddetailattrib( int; string; string[]; string )"
        },
        {
            "contents": "addpoint(${1:int}, ${2:int})",
            "trigger": "addpoint\tint addpoint( int; int )"
        },
        {
            "contents": "addpoint(${1:int}, ${2:vector})",
            "trigger": "addpoint\tint addpoint( int; vector )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; matrix2 )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; matrix2; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; matrix3 )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; matrix3; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; matrix )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; matrix; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; float )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; float; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; int )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; int; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; vector4 )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; vector4; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; string; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; vector2 )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; vector2; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; vector )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; vector; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; float[] )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; float[]; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; int[] )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; int[]; string )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; string[] )"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "addpointattrib\tint addpointattrib( int; string; string[]; string )"
        },
        {
            "contents": "addprim(${1:int}, ${2:string})",
            "trigger": "addprim\tint addprim( int; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; matrix2 )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; matrix2; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; matrix3 )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; matrix3; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; matrix )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; matrix; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; float )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; float; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; int )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; int; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; vector4 )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; vector4; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; string; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; vector2 )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; vector2; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; vector )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; vector; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; float[] )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; float[]; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; int[] )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; int[]; string )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; string[] )"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "addprimattrib\tint addprimattrib( int; string; string[]; string )"
        },
        {
            "contents": "addvariablename(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addvariablename\tint addvariablename( int; string; string )"
        },
        {
            "contents": "addvertex(${1:int}, ${2:int}, ${3:int})",
            "trigger": "addvertex\tint addvertex( int; int; int )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; matrix2 )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; matrix2; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; matrix3 )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; matrix3; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; matrix )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; matrix; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; float )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; float; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; int )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; int; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; vector4 )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; vector4; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; string; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; vector2 )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; vector2; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; vector )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; vector; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; float[] )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; float[]; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; int[] )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; int[]; string )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; string[] )"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "addvertexattrib\tint addvertexattrib( int; string; string[]; string )"
        },
        {
            "contents": "agentclipcatalog(${1:int}, ${2:int})",
            "trigger": "agentclipcatalog\tstring[] agentclipcatalog( int; int )"
        },
        {
            "contents": "agentclipcatalog(${1:string}, ${2:int})",
            "trigger": "agentclipcatalog\tstring[] agentclipcatalog( string; int )"
        },
        {
            "contents": "agentcliplength(${1:int}, ${2:int}, ${3:string})",
            "trigger": "agentcliplength\tfloat agentcliplength( int; int; string )"
        },
        {
            "contents": "agentcliplength(${1:string}, ${2:int}, ${3:string})",
            "trigger": "agentcliplength\tfloat agentcliplength( string; int; string )"
        },
        {
            "contents": "agentclipnames(${1:int}, ${2:int})",
            "trigger": "agentclipnames\tstring[] agentclipnames( int; int )"
        },
        {
            "contents": "agentclipnames(${1:string}, ${2:int})",
            "trigger": "agentclipnames\tstring[] agentclipnames( string; int )"
        },
        {
            "contents": "agentclipsamplelocal(${1:int}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsamplelocal\tmatrix agentclipsamplelocal( int; int; string; float; int )"
        },
        {
            "contents": "agentclipsamplelocal(${1:string}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsamplelocal\tmatrix agentclipsamplelocal( string; int; string; float; int )"
        },
        {
            "contents": "agentclipsamplelocal(${1:int}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsamplelocal\tmatrix[] agentclipsamplelocal( int; int; string; float )"
        },
        {
            "contents": "agentclipsamplelocal(${1:string}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsamplelocal\tmatrix[] agentclipsamplelocal( string; int; string; float )"
        },
        {
            "contents": "agentclipsampleworld(${1:int}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsampleworld\tmatrix agentclipsampleworld( int; int; string; float; int )"
        },
        {
            "contents": "agentclipsampleworld(${1:string}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsampleworld\tmatrix agentclipsampleworld( string; int; string; float; int )"
        },
        {
            "contents": "agentclipsampleworld(${1:int}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsampleworld\tmatrix[] agentclipsampleworld( int; int; string; float )"
        },
        {
            "contents": "agentclipsampleworld(${1:string}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsampleworld\tmatrix[] agentclipsampleworld( string; int; string; float )"
        },
        {
            "contents": "agentcliptimes(${1:int}, ${2:int})",
            "trigger": "agentcliptimes\tfloat[] agentcliptimes( int; int )"
        },
        {
            "contents": "agentcliptimes(${1:string}, ${2:int})",
            "trigger": "agentcliptimes\tfloat[] agentcliptimes( string; int )"
        },
        {
            "contents": "agentclipweights(${1:int}, ${2:int})",
            "trigger": "agentclipweights\tfloat[] agentclipweights( int; int )"
        },
        {
            "contents": "agentclipweights(${1:string}, ${2:int})",
            "trigger": "agentclipweights\tfloat[] agentclipweights( string; int )"
        },
        {
            "contents": "agentcollisionlayer(${1:int}, ${2:int})",
            "trigger": "agentcollisionlayer\tstring agentcollisionlayer( int; int )"
        },
        {
            "contents": "agentcollisionlayer(${1:string}, ${2:int})",
            "trigger": "agentcollisionlayer\tstring agentcollisionlayer( string; int )"
        },
        {
            "contents": "agentcurrentlayer(${1:int}, ${2:int})",
            "trigger": "agentcurrentlayer\tstring agentcurrentlayer( int; int )"
        },
        {
            "contents": "agentcurrentlayer(${1:string}, ${2:int})",
            "trigger": "agentcurrentlayer\tstring agentcurrentlayer( string; int )"
        },
        {
            "contents": "agentlayerbindings(${1:int}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayerbindings\tint[] agentlayerbindings( int; int; string; string )"
        },
        {
            "contents": "agentlayerbindings(${1:string}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayerbindings\tint[] agentlayerbindings( string; int; string; string )"
        },
        {
            "contents": "agentlayers(${1:int}, ${2:int})",
            "trigger": "agentlayers\tstring[] agentlayers( int; int )"
        },
        {
            "contents": "agentlayers(${1:string}, ${2:int})",
            "trigger": "agentlayers\tstring[] agentlayers( string; int )"
        },
        {
            "contents": "agentlayershapes(${1:int}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayershapes\tstring[] agentlayershapes( int; int; string; string )"
        },
        {
            "contents": "agentlayershapes(${1:string}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayershapes\tstring[] agentlayershapes( string; int; string; string )"
        },
        {
            "contents": "agentlocaltransform(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentlocaltransform\tmatrix agentlocaltransform( int; int; int )"
        },
        {
            "contents": "agentlocaltransform(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentlocaltransform\tmatrix agentlocaltransform( string; int; int )"
        },
        {
            "contents": "agentlocaltransforms(${1:int}, ${2:int})",
            "trigger": "agentlocaltransforms\tmatrix[] agentlocaltransforms( int; int )"
        },
        {
            "contents": "agentlocaltransforms(${1:string}, ${2:int})",
            "trigger": "agentlocaltransforms\tmatrix[] agentlocaltransforms( string; int )"
        },
        {
            "contents": "agentrigchildren(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentrigchildren\tint[] agentrigchildren( int; int; int )"
        },
        {
            "contents": "agentrigchildren(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentrigchildren\tint[] agentrigchildren( string; int; int )"
        },
        {
            "contents": "agentrigfind(${1:int}, ${2:int}, ${3:string})",
            "trigger": "agentrigfind\tint agentrigfind( int; int; string )"
        },
        {
            "contents": "agentrigfind(${1:string}, ${2:int}, ${3:string})",
            "trigger": "agentrigfind\tint agentrigfind( string; int; string )"
        },
        {
            "contents": "agentrigparent(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentrigparent\tint agentrigparent( int; int; int )"
        },
        {
            "contents": "agentrigparent(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentrigparent\tint agentrigparent( string; int; int )"
        },
        {
            "contents": "agenttransformcount(${1:int}, ${2:int})",
            "trigger": "agenttransformcount\tint agenttransformcount( int; int )"
        },
        {
            "contents": "agenttransformcount(${1:string}, ${2:int})",
            "trigger": "agenttransformcount\tint agenttransformcount( string; int )"
        },
        {
            "contents": "agenttransformnames(${1:int}, ${2:int})",
            "trigger": "agenttransformnames\tstring[] agenttransformnames( int; int )"
        },
        {
            "contents": "agenttransformnames(${1:string}, ${2:int})",
            "trigger": "agenttransformnames\tstring[] agenttransformnames( string; int )"
        },
        {
            "contents": "agenttransformtolocal(${1:int}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtolocal\tint agenttransformtolocal( int; int; matrix[] & )"
        },
        {
            "contents": "agenttransformtolocal(${1:string}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtolocal\tint agenttransformtolocal( string; int; matrix[] & )"
        },
        {
            "contents": "agenttransformtoworld(${1:int}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtoworld\tint agenttransformtoworld( int; int; matrix[] & )"
        },
        {
            "contents": "agenttransformtoworld(${1:string}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtoworld\tint agenttransformtoworld( string; int; matrix[] & )"
        },
        {
            "contents": "agentworldtransform(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentworldtransform\tmatrix agentworldtransform( int; int; int )"
        },
        {
            "contents": "agentworldtransform(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentworldtransform\tmatrix agentworldtransform( string; int; int )"
        },
        {
            "contents": "agentworldtransforms(${1:int}, ${2:int})",
            "trigger": "agentworldtransforms\tmatrix[] agentworldtransforms( int; int )"
        },
        {
            "contents": "agentworldtransforms(${1:string}, ${2:int})",
            "trigger": "agentworldtransforms\tmatrix[] agentworldtransforms( string; int )"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:int}, ${3:...})",
            "trigger": "albedo\tvector albedo( bsdf; int; ... )"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:vector}, ${3:int}, ${4:...})",
            "trigger": "albedo\tvector albedo( bsdf; vector; int; ... )"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:vector}, ${3:...})",
            "trigger": "albedo\tvector albedo( bsdf; vector; ... )"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:...})",
            "trigger": "albedo\tvector albedo( bsdf; ... )"
        },
        {
            "contents": "anoise(${1:vector})",
            "trigger": "anoise\tfloat anoise( vector )"
        },
        {
            "contents": "anoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "anoise\tfloat anoise( vector; int; float; float )"
        },
        {
            "contents": "anoise(${1:vector})",
            "trigger": "anoise\tvector anoise( vector )"
        },
        {
            "contents": "anoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "anoise\tvector anoise( vector; int; float; float )"
        },
        {
            "contents": "append(${1:string &}, ${2:string})",
            "trigger": "append\tvoid append( string &; string )"
        },
        {
            "contents": "append(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "append\tvoid append( matrix2[] &; matrix2 )"
        },
        {
            "contents": "append(${1:matrix2[] &}, ${2:matrix2[]})",
            "trigger": "append\tvoid append( matrix2[] &; matrix2[] )"
        },
        {
            "contents": "append(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "append\tvoid append( matrix3[] &; matrix3 )"
        },
        {
            "contents": "append(${1:matrix3[] &}, ${2:matrix3[]})",
            "trigger": "append\tvoid append( matrix3[] &; matrix3[] )"
        },
        {
            "contents": "append(${1:matrix[] &}, ${2:matrix})",
            "trigger": "append\tvoid append( matrix[] &; matrix )"
        },
        {
            "contents": "append(${1:matrix[] &}, ${2:matrix[]})",
            "trigger": "append\tvoid append( matrix[] &; matrix[] )"
        },
        {
            "contents": "append(${1:float[] &}, ${2:float})",
            "trigger": "append\tvoid append( float[] &; float )"
        },
        {
            "contents": "append(${1:float[] &}, ${2:float[]})",
            "trigger": "append\tvoid append( float[] &; float[] )"
        },
        {
            "contents": "append(${1:int[] &}, ${2:int})",
            "trigger": "append\tvoid append( int[] &; int )"
        },
        {
            "contents": "append(${1:int[] &}, ${2:int[]})",
            "trigger": "append\tvoid append( int[] &; int[] )"
        },
        {
            "contents": "append(${1:vector4[] &}, ${2:vector4})",
            "trigger": "append\tvoid append( vector4[] &; vector4 )"
        },
        {
            "contents": "append(${1:vector4[] &}, ${2:vector4[]})",
            "trigger": "append\tvoid append( vector4[] &; vector4[] )"
        },
        {
            "contents": "append(${1:string[] &}, ${2:string})",
            "trigger": "append\tvoid append( string[] &; string )"
        },
        {
            "contents": "append(${1:string[] &}, ${2:string[]})",
            "trigger": "append\tvoid append( string[] &; string[] )"
        },
        {
            "contents": "append(${1:vector2[] &}, ${2:vector2})",
            "trigger": "append\tvoid append( vector2[] &; vector2 )"
        },
        {
            "contents": "append(${1:vector2[] &}, ${2:vector2[]})",
            "trigger": "append\tvoid append( vector2[] &; vector2[] )"
        },
        {
            "contents": "append(${1:vector[] &}, ${2:vector})",
            "trigger": "append\tvoid append( vector[] &; vector )"
        },
        {
            "contents": "append(${1:vector[] &}, ${2:vector[]})",
            "trigger": "append\tvoid append( vector[] &; vector[] )"
        },
        {
            "contents": "area(${1:vector}, ${2:...})",
            "trigger": "area\tfloat area( vector; ... )"
        },
        {
            "contents": "argsort(${1:float[]})",
            "trigger": "argsort\tint[] argsort( float[] )"
        },
        {
            "contents": "argsort(${1:int[]})",
            "trigger": "argsort\tint[] argsort( int[] )"
        },
        {
            "contents": "argsort(${1:string[]})",
            "trigger": "argsort\tint[] argsort( string[] )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tmatrix2[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tmatrix3[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tmatrix[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tfloat[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tint[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tvector4[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tstring[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tvector2[] array( ... )"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tvector[] array( ... )"
        },
        {
            "contents": "ashikhmin(${1:vector}, ${2:float}, ${3:float}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "ashikhmin\tbsdf ashikhmin( vector; float; float; vector; vector; ... )"
        },
        {
            "contents": "asin(${1:float})",
            "trigger": "asin\tfloat asin( float )"
        },
        {
            "contents": "asin(${1:vector4})",
            "trigger": "asin\tvector4 asin( vector4 )"
        },
        {
            "contents": "asin(${1:vector2})",
            "trigger": "asin\tvector2 asin( vector2 )"
        },
        {
            "contents": "asin(${1:vector})",
            "trigger": "asin\tvector asin( vector )"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:matrix2})",
            "trigger": "assign\tvoid assign( float &; float &; float &; float &; matrix2 )"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:matrix3})",
            "trigger": "assign\tvoid assign( float &; float &; float &; float &; float &; float &; float &; float &; float &; matrix3 )"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:float &}, ${11:float &}, ${12:float &}, ${13:float &}, ${14:float &}, ${15:float &}, ${16:float &}, ${17:matrix})",
            "trigger": "assign\tvoid assign( float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; matrix )"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:vector4})",
            "trigger": "assign\tvoid assign( float &; float &; float &; float &; vector4 )"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "assign\tvoid assign( float &; float &; float &; vector )"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:vector2})",
            "trigger": "assign\tvoid assign( float &; float &; vector2 )"
        },
        {
            "contents": "atan(${1:float})",
            "trigger": "atan\tfloat atan( float )"
        },
        {
            "contents": "atan(${1:float}, ${2:float})",
            "trigger": "atan\tfloat atan( float; float )"
        },
        {
            "contents": "atan(${1:vector4})",
            "trigger": "atan\tvector4 atan( vector4 )"
        },
        {
            "contents": "atan(${1:vector2})",
            "trigger": "atan\tvector2 atan( vector2 )"
        },
        {
            "contents": "atan(${1:vector})",
            "trigger": "atan\tvector atan( vector )"
        },
        {
            "contents": "atan2(${1:float}, ${2:float})",
            "trigger": "atan2\tfloat atan2( float; float )"
        },
        {
            "contents": "atof(${1:string})",
            "trigger": "atof\tfloat atof( string )"
        },
        {
            "contents": "atoi(${1:string})",
            "trigger": "atoi\tint atoi( string )"
        },
        {
            "contents": "atten(${1:float}, ${2:float})",
            "trigger": "atten\tfloat atten( float; float )"
        },
        {
            "contents": "attribsize(${1:int}, ${2:string}, ${3:string})",
            "trigger": "attribsize\tint attribsize( int; string; string )"
        },
        {
            "contents": "attribsize(${1:string}, ${2:string}, ${3:string})",
            "trigger": "attribsize\tint attribsize( string; string; string )"
        },
        {
            "contents": "attribtype(${1:int}, ${2:string}, ${3:string})",
            "trigger": "attribtype\tint attribtype( int; string; string )"
        },
        {
            "contents": "attribtype(${1:string}, ${2:string}, ${3:string})",
            "trigger": "attribtype\tint attribtype( string; string; string )"
        },
        {
            "contents": "attribtypeinfo(${1:int}, ${2:string}, ${3:string})",
            "trigger": "attribtypeinfo\tstring attribtypeinfo( int; string; string )"
        },
        {
            "contents": "attribtypeinfo(${1:string}, ${2:string}, ${3:string})",
            "trigger": "attribtypeinfo\tstring attribtypeinfo( string; string; string )"
        },
        {
            "contents": "avg(${1:float}, ${2:float}, ${3:...})",
            "trigger": "avg\tfloat avg( float; float; ... )"
        },
        {
            "contents": "avg(${1:vector2})",
            "trigger": "avg\tfloat avg( vector2 )"
        },
        {
            "contents": "avg(${1:vector})",
            "trigger": "avg\tfloat avg( vector )"
        },
        {
            "contents": "avg(${1:float[]})",
            "trigger": "avg\tfloat avg( float[] )"
        },
        {
            "contents": "avg(${1:vector4}, ${2:vector4}, ${3:...})",
            "trigger": "avg\tvector4 avg( vector4; vector4; ... )"
        },
        {
            "contents": "avg(${1:vector2}, ${2:vector2}, ${3:...})",
            "trigger": "avg\tvector2 avg( vector2; vector2; ... )"
        },
        {
            "contents": "avg(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "avg\tvector avg( vector; vector; ... )"
        },
        {
            "contents": "blackbody(${1:float}, ${2:float})",
            "trigger": "blackbody\tvector blackbody( float; float )"
        },
        {
            "contents": "blinn(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "blinn\tbsdf blinn( vector; float; ... )"
        },
        {
            "contents": "blinnBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "blinnBRDF\tfloat blinnBRDF( vector; vector; vector; float )"
        },
        {
            "contents": "bouncelabel(${1:int})",
            "trigger": "bouncelabel\tstring bouncelabel( int )"
        },
        {
            "contents": "bouncemask(${1:string})",
            "trigger": "bouncemask\tint bouncemask( string )"
        },
        {
            "contents": "bumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmap\tvoid bumpmap( string; float &; float &; float; float )"
        },
        {
            "contents": "bumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmap\tvoid bumpmap( string; float &; float &; vector )"
        },
        {
            "contents": "bumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapA\tvoid bumpmapA( string; float &; float &; float; float )"
        },
        {
            "contents": "bumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapA\tvoid bumpmapA( string; float &; float &; vector )"
        },
        {
            "contents": "bumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapB\tvoid bumpmapB( string; float &; float &; float; float )"
        },
        {
            "contents": "bumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapB\tvoid bumpmapB( string; float &; float &; vector )"
        },
        {
            "contents": "bumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapG\tvoid bumpmapG( string; float &; float &; float; float )"
        },
        {
            "contents": "bumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapG\tvoid bumpmapG( string; float &; float &; vector )"
        },
        {
            "contents": "bumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapL\tvoid bumpmapL( string; float &; float &; float; float )"
        },
        {
            "contents": "bumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapL\tvoid bumpmapL( string; float &; float &; vector )"
        },
        {
            "contents": "bumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapR\tvoid bumpmapR( string; float &; float &; float; float )"
        },
        {
            "contents": "bumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapR\tvoid bumpmapR( string; float &; float &; vector )"
        },
        {
            "contents": "cbrt(${1:float})",
            "trigger": "cbrt\tfloat cbrt( float )"
        },
        {
            "contents": "cbrt(${1:vector4})",
            "trigger": "cbrt\tvector4 cbrt( vector4 )"
        },
        {
            "contents": "cbrt(${1:vector2})",
            "trigger": "cbrt\tvector2 cbrt( vector2 )"
        },
        {
            "contents": "cbrt(${1:vector})",
            "trigger": "cbrt\tvector cbrt( vector )"
        },
        {
            "contents": "ceil(${1:float})",
            "trigger": "ceil\tfloat ceil( float )"
        },
        {
            "contents": "ceil(${1:vector4})",
            "trigger": "ceil\tvector4 ceil( vector4 )"
        },
        {
            "contents": "ceil(${1:vector2})",
            "trigger": "ceil\tvector2 ceil( vector2 )"
        },
        {
            "contents": "ceil(${1:vector})",
            "trigger": "ceil\tvector ceil( vector )"
        },
        {
            "contents": "ch(${1:string})",
            "trigger": "ch\tfloat ch( string )"
        },
        {
            "contents": "ch(${1:string}, ${2:float})",
            "trigger": "ch\tfloat ch( string; float )"
        },
        {
            "contents": "ch(${1:string})",
            "trigger": "ch\tstring ch( string )"
        },
        {
            "contents": "ch(${1:string}, ${2:float})",
            "trigger": "ch\tstring ch( string; float )"
        },
        {
            "contents": "ch3(${1:string})",
            "trigger": "ch3\tmatrix3 ch3( string )"
        },
        {
            "contents": "ch3(${1:string}, ${2:float})",
            "trigger": "ch3\tmatrix3 ch3( string; float )"
        },
        {
            "contents": "ch4(${1:string})",
            "trigger": "ch4\tmatrix ch4( string )"
        },
        {
            "contents": "ch4(${1:string}, ${2:float})",
            "trigger": "ch4\tmatrix ch4( string; float )"
        },
        {
            "contents": "chend(${1:int})",
            "trigger": "chend\tint chend( int )"
        },
        {
            "contents": "chendf(${1:int})",
            "trigger": "chendf\tfloat chendf( int )"
        },
        {
            "contents": "chendt(${1:int})",
            "trigger": "chendt\tfloat chendt( int )"
        },
        {
            "contents": "chf(${1:string})",
            "trigger": "chf\tfloat chf( string )"
        },
        {
            "contents": "chf(${1:string}, ${2:float})",
            "trigger": "chf\tfloat chf( string; float )"
        },
        {
            "contents": "chi(${1:string})",
            "trigger": "chi\tint chi( string )"
        },
        {
            "contents": "chi(${1:string}, ${2:float})",
            "trigger": "chi\tint chi( string; float )"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tfloat chinput( int; int; float )"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tfloat chinput( int; int; int )"
        },
        {
            "contents": "chnumchan(${1:int})",
            "trigger": "chnumchan\tint chnumchan( int )"
        },
        {
            "contents": "chp(${1:string})",
            "trigger": "chp\tvector4 chp( string )"
        },
        {
            "contents": "chp(${1:string}, ${2:float})",
            "trigger": "chp\tvector4 chp( string; float )"
        },
        {
            "contents": "chr(${1:int})",
            "trigger": "chr\tstring chr( int )"
        },
        {
            "contents": "chramp(${1:string}, ${2:float})",
            "trigger": "chramp\tfloat chramp( string; float )"
        },
        {
            "contents": "chramp(${1:string}, ${2:float}, ${3:float})",
            "trigger": "chramp\tfloat chramp( string; float; float )"
        },
        {
            "contents": "chramp(${1:string}, ${2:float})",
            "trigger": "chramp\tvector chramp( string; float )"
        },
        {
            "contents": "chramp(${1:string}, ${2:float}, ${3:float})",
            "trigger": "chramp\tvector chramp( string; float; float )"
        },
        {
            "contents": "chrate(${1:int})",
            "trigger": "chrate\tfloat chrate( int )"
        },
        {
            "contents": "chs(${1:string})",
            "trigger": "chs\tstring chs( string )"
        },
        {
            "contents": "chs(${1:string}, ${2:float})",
            "trigger": "chs\tstring chs( string; float )"
        },
        {
            "contents": "chsraw(${1:string})",
            "trigger": "chsraw\tstring chsraw( string )"
        },
        {
            "contents": "chstart(${1:int})",
            "trigger": "chstart\tint chstart( int )"
        },
        {
            "contents": "chstartf(${1:int})",
            "trigger": "chstartf\tfloat chstartf( int )"
        },
        {
            "contents": "chstartt(${1:int})",
            "trigger": "chstartt\tfloat chstartt( int )"
        },
        {
            "contents": "chv(${1:string})",
            "trigger": "chv\tvector chv( string )"
        },
        {
            "contents": "chv(${1:string}, ${2:float})",
            "trigger": "chv\tvector chv( string; float )"
        },
        {
            "contents": "ckspline(${1:float}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "ckspline\tfloat ckspline( float; float; float; ... )"
        },
        {
            "contents": "ckspline(${1:float}, ${2:vector4}, ${3:float}, ${4:...})",
            "trigger": "ckspline\tvector4 ckspline( float; vector4; float; ... )"
        },
        {
            "contents": "ckspline(${1:float}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "ckspline\tvector ckspline( float; vector; float; ... )"
        },
        {
            "contents": "clamp(${1:float}, ${2:float}, ${3:float})",
            "trigger": "clamp\tfloat clamp( float; float; float )"
        },
        {
            "contents": "clamp(${1:int}, ${2:int}, ${3:int})",
            "trigger": "clamp\tint clamp( int; int; int )"
        },
        {
            "contents": "clamp(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "clamp\tvector4 clamp( vector4; vector4; vector4 )"
        },
        {
            "contents": "clamp(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "clamp\tvector2 clamp( vector2; vector2; vector2 )"
        },
        {
            "contents": "clamp(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "clamp\tvector clamp( vector; vector; vector )"
        },
        {
            "contents": "clip(${1:int &}, ${2:vector &}, ${3:vector &}, ${4:vector4})",
            "trigger": "clip\tvoid clip( int &; vector &; vector &; vector4 )"
        },
        {
            "contents": "clip(${1:int &}, ${2:vector &}, ${3:vector &}, ${4:vector}, ${5:vector})",
            "trigger": "clip\tvoid clip( int &; vector &; vector &; vector; vector )"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "colormap\tvector4 colormap( string; float; float; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "colormap\tvector4 colormap( string; float; float; float; float; float; float; float; float; int; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "colormap\tvector4 colormap( string; vector; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "colormap\tvector4 colormap( string; vector; vector; vector; int; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "colormap\tvector4 colormap( string; vector; vector; vector; vector; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "colormap\tvector4 colormap( string; vector; vector; vector; vector; int; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "colormap\tvector colormap( string; float; float; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "colormap\tvector colormap( string; float; float; float; float; float; float; float; float; int; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "colormap\tvector colormap( string; vector; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "colormap\tvector colormap( string; vector; vector; vector; int; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "colormap\tvector colormap( string; vector; vector; vector; vector; ... )"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "colormap\tvector colormap( string; vector; vector; vector; vector; int; ... )"
        },
        {
            "contents": "computenormal(${1:vector}, ${2:...})",
            "trigger": "computenormal\tvector computenormal( vector; ... )"
        },
        {
            "contents": "computenormal(${1:vector}, ${2:vector}, ${3:vector}, ${4:...})",
            "trigger": "computenormal\tvector computenormal( vector; vector; vector; ... )"
        },
        {
            "contents": "concat(${1:string}, ${2:string}, ${3:...})",
            "trigger": "concat\tstring concat( string; string; ... )"
        },
        {
            "contents": "cone(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "cone\tbsdf cone( vector; vector; float; ... )"
        },
        {
            "contents": "cos(${1:float})",
            "trigger": "cos\tfloat cos( float )"
        },
        {
            "contents": "cos(${1:vector4})",
            "trigger": "cos\tvector4 cos( vector4 )"
        },
        {
            "contents": "cos(${1:vector2})",
            "trigger": "cos\tvector2 cos( vector2 )"
        },
        {
            "contents": "cos(${1:vector})",
            "trigger": "cos\tvector cos( vector )"
        },
        {
            "contents": "cosh(${1:float})",
            "trigger": "cosh\tfloat cosh( float )"
        },
        {
            "contents": "cosh(${1:vector4})",
            "trigger": "cosh\tvector4 cosh( vector4 )"
        },
        {
            "contents": "cosh(${1:vector2})",
            "trigger": "cosh\tvector2 cosh( vector2 )"
        },
        {
            "contents": "cosh(${1:vector})",
            "trigger": "cosh\tvector cosh( vector )"
        },
        {
            "contents": "cracktransform(${1:int}, ${2:int}, ${3:int}, ${4:vector}, ${5:matrix})",
            "trigger": "cracktransform\tvector cracktransform( int; int; int; vector; matrix )"
        },
        {
            "contents": "cross(${1:vector}, ${2:vector})",
            "trigger": "cross\tvector cross( vector; vector )"
        },
        {
            "contents": "cspline(${1:float}, ${2:float}, ${3:...})",
            "trigger": "cspline\tfloat cspline( float; float; ... )"
        },
        {
            "contents": "cspline(${1:float}, ${2:vector4}, ${3:...})",
            "trigger": "cspline\tvector4 cspline( float; vector4; ... )"
        },
        {
            "contents": "cspline(${1:float}, ${2:vector}, ${3:...})",
            "trigger": "cspline\tvector cspline( float; vector; ... )"
        },
        {
            "contents": "ctransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ctransform\tvector ctransform( string; string; vector )"
        },
        {
            "contents": "ctransform(${1:string}, ${2:vector})",
            "trigger": "ctransform\tvector ctransform( string; vector )"
        },
        {
            "contents": "curlnoise(${1:vector4})",
            "trigger": "curlnoise\tvector curlnoise( vector4 )"
        },
        {
            "contents": "curlnoise(${1:vector})",
            "trigger": "curlnoise\tvector curlnoise( vector )"
        },
        {
            "contents": "curlnoise2d(${1:float}, ${2:float})",
            "trigger": "curlnoise2d\tvector curlnoise2d( float; float )"
        },
        {
            "contents": "curlnoise2d(${1:vector})",
            "trigger": "curlnoise2d\tvector curlnoise2d( vector )"
        },
        {
            "contents": "curlxnoise(${1:vector4})",
            "trigger": "curlxnoise\tvector curlxnoise( vector4 )"
        },
        {
            "contents": "curlxnoise(${1:vector})",
            "trigger": "curlxnoise\tvector curlxnoise( vector )"
        },
        {
            "contents": "curlxnoise2d(${1:float}, ${2:float})",
            "trigger": "curlxnoise2d\tvector curlxnoise2d( float; float )"
        },
        {
            "contents": "curlxnoise2d(${1:vector})",
            "trigger": "curlxnoise2d\tvector curlxnoise2d( vector )"
        },
        {
            "contents": "cvex_bsdf(${1:string}, ${2:string}, ${3:...})",
            "trigger": "cvex_bsdf\tbsdf cvex_bsdf( string; string; ... )"
        },
        {
            "contents": "degrees(${1:float})",
            "trigger": "degrees\tfloat degrees( float )"
        },
        {
            "contents": "degrees(${1:vector4})",
            "trigger": "degrees\tvector4 degrees( vector4 )"
        },
        {
            "contents": "degrees(${1:vector2})",
            "trigger": "degrees\tvector2 degrees( vector2 )"
        },
        {
            "contents": "degrees(${1:vector})",
            "trigger": "degrees\tvector degrees( vector )"
        },
        {
            "contents": "depthmap(${1:string}, ${2:float}, ${3:float})",
            "trigger": "depthmap\tfloat depthmap( string; float; float )"
        },
        {
            "contents": "depthmap(${1:string}, ${2:vector})",
            "trigger": "depthmap\tfloat depthmap( string; vector )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix2 detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2 detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix2 detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2 detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix3 detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3 detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix3 detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3 detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tfloat detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tfloat detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tint detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tint detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tint detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tint detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector4 detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4 detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector4 detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4 detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tstring detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tstring detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector2 detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2 detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector2 detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2 detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector detail( string; string )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix2[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix3[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tfloat[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tint[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tint[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tint[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector4[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tstring[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector2[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2[] detail( string; string; int )"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector[] detail( int; string )"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector[] detail( int; string; int )"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector[] detail( string; string; int )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2 detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2 detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3 detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3 detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4 detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4 detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2 detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2 detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector[] detailattrib( int; string; int; int & )"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector[] detailattrib( string; string; int; int & )"
        },
        {
            "contents": "detailattribsize(${1:int}, ${2:string})",
            "trigger": "detailattribsize\tint detailattribsize( int; string )"
        },
        {
            "contents": "detailattribsize(${1:string}, ${2:string})",
            "trigger": "detailattribsize\tint detailattribsize( string; string )"
        },
        {
            "contents": "detailattribtype(${1:int}, ${2:string})",
            "trigger": "detailattribtype\tint detailattribtype( int; string )"
        },
        {
            "contents": "detailattribtype(${1:string}, ${2:string})",
            "trigger": "detailattribtype\tint detailattribtype( string; string )"
        },
        {
            "contents": "detailattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "detailattribtypeinfo\tstring detailattribtypeinfo( int; string )"
        },
        {
            "contents": "detailattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "detailattribtypeinfo\tstring detailattribtypeinfo( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2 detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2 detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3 detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3 detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tfloat detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tfloat detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tint detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tint detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector4 detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector4 detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tstring detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tstring detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector2 detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector2 detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tfloat[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tfloat[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tint[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tint[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector4[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector4[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tstring[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tstring[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector2[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector2[] detailintrinsic( string; string )"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector[] detailintrinsic( int; string )"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector[] detailintrinsic( string; string )"
        },
        {
            "contents": "determinant(${1:matrix2})",
            "trigger": "determinant\tfloat determinant( matrix2 )"
        },
        {
            "contents": "determinant(${1:matrix3})",
            "trigger": "determinant\tfloat determinant( matrix3 )"
        },
        {
            "contents": "determinant(${1:matrix})",
            "trigger": "determinant\tfloat determinant( matrix )"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "diffuse\tbsdf diffuse( vector; float; ... )"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "diffuse\tbsdf diffuse( vector; vector; float; ... )"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "diffuse\tbsdf diffuse( vector; vector; ... )"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:...})",
            "trigger": "diffuse\tbsdf diffuse( vector; ... )"
        },
        {
            "contents": "diffuseBRDF(${1:vector}, ${2:vector})",
            "trigger": "diffuseBRDF\tfloat diffuseBRDF( vector; vector )"
        },
        {
            "contents": "diffuseBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "diffuseBRDF\tfloat diffuseBRDF( vector; vector; vector; float )"
        },
        {
            "contents": "dihedral(${1:vector}, ${2:vector})",
            "trigger": "dihedral\tmatrix3 dihedral( vector; vector )"
        },
        {
            "contents": "dihedral(${1:vector}, ${2:vector})",
            "trigger": "dihedral\tvector4 dihedral( vector; vector )"
        },
        {
            "contents": "distance(${1:vector4}, ${2:vector4})",
            "trigger": "distance\tfloat distance( vector4; vector4 )"
        },
        {
            "contents": "distance(${1:vector2}, ${2:vector2})",
            "trigger": "distance\tfloat distance( vector2; vector2 )"
        },
        {
            "contents": "distance(${1:vector}, ${2:vector})",
            "trigger": "distance\tfloat distance( vector; vector )"
        },
        {
            "contents": "distance2(${1:vector4}, ${2:vector4})",
            "trigger": "distance2\tfloat distance2( vector4; vector4 )"
        },
        {
            "contents": "distance2(${1:vector2}, ${2:vector2})",
            "trigger": "distance2\tfloat distance2( vector2; vector2 )"
        },
        {
            "contents": "distance2(${1:vector}, ${2:vector})",
            "trigger": "distance2\tfloat distance2( vector; vector )"
        },
        {
            "contents": "dot(${1:vector4}, ${2:vector4})",
            "trigger": "dot\tfloat dot( vector4; vector4 )"
        },
        {
            "contents": "dot(${1:vector4}, ${2:vector})",
            "trigger": "dot\tfloat dot( vector4; vector )"
        },
        {
            "contents": "dot(${1:vector2}, ${2:vector2})",
            "trigger": "dot\tfloat dot( vector2; vector2 )"
        },
        {
            "contents": "dot(${1:vector}, ${2:vector4})",
            "trigger": "dot\tfloat dot( vector; vector4 )"
        },
        {
            "contents": "dot(${1:vector}, ${2:vector})",
            "trigger": "dot\tfloat dot( vector; vector )"
        },
        {
            "contents": "dsmpixel(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:float[] &})",
            "trigger": "dsmpixel\tint dsmpixel( string; string; int; int; float[] & )"
        },
        {
            "contents": "dsmpixel(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4[] &})",
            "trigger": "dsmpixel\tint dsmpixel( string; string; int; int; vector4[] & )"
        },
        {
            "contents": "dsmpixel(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector[] &})",
            "trigger": "dsmpixel\tint dsmpixel( string; string; int; int; vector[] & )"
        },
        {
            "contents": "eigenvalues(${1:int &}, ${2:matrix3}, ${3:vector &}, ${4:vector &})",
            "trigger": "eigenvalues\tvoid eigenvalues( int &; matrix3; vector &; vector & )"
        },
        {
            "contents": "endswith(${1:string}, ${2:string})",
            "trigger": "endswith\tint endswith( string; string )"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "environment\tvector4 environment( string; vector; ... )"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "environment\tvector4 environment( string; vector; float; ... )"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "environment\tvector4 environment( string; vector; vector; vector; vector; ... )"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "environment\tvector environment( string; vector; ... )"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "environment\tvector environment( string; vector; float; ... )"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "environment\tvector environment( string; vector; vector; vector; vector; ... )"
        },
        {
            "contents": "erf(${1:float})",
            "trigger": "erf\tfloat erf( float )"
        },
        {
            "contents": "erf(${1:vector2})",
            "trigger": "erf\tvector2 erf( vector2 )"
        },
        {
            "contents": "erf_inv(${1:float})",
            "trigger": "erf_inv\tfloat erf_inv( float )"
        },
        {
            "contents": "erfc(${1:float})",
            "trigger": "erfc\tfloat erfc( float )"
        },
        {
            "contents": "eulertoquaternion(${1:vector}, ${2:int})",
            "trigger": "eulertoquaternion\tvector4 eulertoquaternion( vector; int )"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:float &}, ${5:int}, ${6:...})",
            "trigger": "eval_bsdf\tvector eval_bsdf( bsdf; vector; vector; float &; int; ... )"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:int}, ${5:...})",
            "trigger": "eval_bsdf\tvector eval_bsdf( bsdf; vector; vector; int; ... )"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:...})",
            "trigger": "eval_bsdf\tvector eval_bsdf( bsdf; vector; vector; ... )"
        },
        {
            "contents": "exp(${1:float})",
            "trigger": "exp\tfloat exp( float )"
        },
        {
            "contents": "exp(${1:vector4})",
            "trigger": "exp\tvector4 exp( vector4 )"
        },
        {
            "contents": "exp(${1:vector2})",
            "trigger": "exp\tvector2 exp( vector2 )"
        },
        {
            "contents": "exp(${1:vector})",
            "trigger": "exp\tvector exp( vector )"
        },
        {
            "contents": "expandpointgroup(${1:int}, ${2:string})",
            "trigger": "expandpointgroup\tint[] expandpointgroup( int; string )"
        },
        {
            "contents": "expandpointgroup(${1:string}, ${2:string})",
            "trigger": "expandpointgroup\tint[] expandpointgroup( string; string )"
        },
        {
            "contents": "expandprimgroup(${1:int}, ${2:string})",
            "trigger": "expandprimgroup\tint[] expandprimgroup( int; string )"
        },
        {
            "contents": "expandprimgroup(${1:string}, ${2:string})",
            "trigger": "expandprimgroup\tint[] expandprimgroup( string; string )"
        },
        {
            "contents": "filamentsample(${1:int}, ${2:vector})",
            "trigger": "filamentsample\tvector filamentsample( int; vector )"
        },
        {
            "contents": "filamentsample(${1:string}, ${2:vector})",
            "trigger": "filamentsample\tvector filamentsample( string; vector )"
        },
        {
            "contents": "file_stat(${1:string}, ${2:int[] &})",
            "trigger": "file_stat\tint file_stat( string; int[] & )"
        },
        {
            "contents": "filterstep(${1:float}, ${2:float}, ${3:...})",
            "trigger": "filterstep\tfloat filterstep( float; float; ... )"
        },
        {
            "contents": "filterstep(${1:float}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "filterstep\tfloat filterstep( float; float; float; ... )"
        },
        {
            "contents": "find(${1:string}, ${2:string})",
            "trigger": "find\tint find( string; string )"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "find\tint find( string; string; int )"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( string; string; int; int )"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2})",
            "trigger": "find\tint find( matrix2[]; matrix2 )"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int})",
            "trigger": "find\tint find( matrix2[]; matrix2; int )"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( matrix2[]; matrix2; int; int )"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3})",
            "trigger": "find\tint find( matrix3[]; matrix3 )"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int})",
            "trigger": "find\tint find( matrix3[]; matrix3; int )"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( matrix3[]; matrix3; int; int )"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix})",
            "trigger": "find\tint find( matrix[]; matrix )"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int})",
            "trigger": "find\tint find( matrix[]; matrix; int )"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( matrix[]; matrix; int; int )"
        },
        {
            "contents": "find(${1:float[]}, ${2:float})",
            "trigger": "find\tint find( float[]; float )"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int})",
            "trigger": "find\tint find( float[]; float; int )"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( float[]; float; int; int )"
        },
        {
            "contents": "find(${1:int[]}, ${2:int})",
            "trigger": "find\tint find( int[]; int )"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int})",
            "trigger": "find\tint find( int[]; int; int )"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( int[]; int; int; int )"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4})",
            "trigger": "find\tint find( vector4[]; vector4 )"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int})",
            "trigger": "find\tint find( vector4[]; vector4; int )"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( vector4[]; vector4; int; int )"
        },
        {
            "contents": "find(${1:string[]}, ${2:string})",
            "trigger": "find\tint find( string[]; string )"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int})",
            "trigger": "find\tint find( string[]; string; int )"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( string[]; string; int; int )"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2})",
            "trigger": "find\tint find( vector2[]; vector2 )"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int})",
            "trigger": "find\tint find( vector2[]; vector2; int )"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( vector2[]; vector2; int; int )"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector})",
            "trigger": "find\tint find( vector[]; vector )"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int})",
            "trigger": "find\tint find( vector[]; vector; int )"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int}, ${4:int})",
            "trigger": "find\tint find( vector[]; vector; int; int )"
        },
        {
            "contents": "find(${1:string}, ${2:string})",
            "trigger": "find\tint[] find( string; string )"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "find\tint[] find( string; string; int )"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( string; string; int; int )"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2})",
            "trigger": "find\tint[] find( matrix2[]; matrix2 )"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int})",
            "trigger": "find\tint[] find( matrix2[]; matrix2; int )"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( matrix2[]; matrix2; int; int )"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3})",
            "trigger": "find\tint[] find( matrix3[]; matrix3 )"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int})",
            "trigger": "find\tint[] find( matrix3[]; matrix3; int )"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( matrix3[]; matrix3; int; int )"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix})",
            "trigger": "find\tint[] find( matrix[]; matrix )"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int})",
            "trigger": "find\tint[] find( matrix[]; matrix; int )"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( matrix[]; matrix; int; int )"
        },
        {
            "contents": "find(${1:float[]}, ${2:float})",
            "trigger": "find\tint[] find( float[]; float )"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int})",
            "trigger": "find\tint[] find( float[]; float; int )"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( float[]; float; int; int )"
        },
        {
            "contents": "find(${1:int[]}, ${2:int})",
            "trigger": "find\tint[] find( int[]; int )"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int})",
            "trigger": "find\tint[] find( int[]; int; int )"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( int[]; int; int; int )"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4})",
            "trigger": "find\tint[] find( vector4[]; vector4 )"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int})",
            "trigger": "find\tint[] find( vector4[]; vector4; int )"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( vector4[]; vector4; int; int )"
        },
        {
            "contents": "find(${1:string[]}, ${2:string})",
            "trigger": "find\tint[] find( string[]; string )"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int})",
            "trigger": "find\tint[] find( string[]; string; int )"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( string[]; string; int; int )"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2})",
            "trigger": "find\tint[] find( vector2[]; vector2 )"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int})",
            "trigger": "find\tint[] find( vector2[]; vector2; int )"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( vector2[]; vector2; int; int )"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector})",
            "trigger": "find\tint[] find( vector[]; vector )"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int})",
            "trigger": "find\tint[] find( vector[]; vector; int )"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int}, ${4:int})",
            "trigger": "find\tint[] find( vector[]; vector; int; int )"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribval\tint findattribval( int; string; string; int )"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int})",
            "trigger": "findattribval\tint findattribval( int; string; string; int; int )"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribval\tint findattribval( int; string; string; string )"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "findattribval\tint findattribval( int; string; string; string; int )"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribval\tint findattribval( string; string; string; int )"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int})",
            "trigger": "findattribval\tint findattribval( string; string; string; int; int )"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribval\tint findattribval( string; string; string; string )"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "findattribval\tint findattribval( string; string; string; string; int )"
        },
        {
            "contents": "findattribvalcount(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribvalcount\tint findattribvalcount( int; string; string; int )"
        },
        {
            "contents": "findattribvalcount(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribvalcount\tint findattribvalcount( int; string; string; string )"
        },
        {
            "contents": "findattribvalcount(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribvalcount\tint findattribvalcount( string; string; string; int )"
        },
        {
            "contents": "findattribvalcount(${1:string}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribvalcount\tint findattribvalcount( string; string; string; string )"
        },
        {
            "contents": "fit(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "fit\tfloat fit( float; float; float; float; float )"
        },
        {
            "contents": "fit(${1:vector4}, ${2:vector4}, ${3:vector4}, ${4:vector4}, ${5:vector4})",
            "trigger": "fit\tvector4 fit( vector4; vector4; vector4; vector4; vector4 )"
        },
        {
            "contents": "fit(${1:vector2}, ${2:vector2}, ${3:vector2}, ${4:vector2}, ${5:vector2})",
            "trigger": "fit\tvector2 fit( vector2; vector2; vector2; vector2; vector2 )"
        },
        {
            "contents": "fit(${1:vector2}, ${2:vector2}, ${3:vector2}, ${4:vector2}, ${5:vector})",
            "trigger": "fit\tvector2 fit( vector2; vector2; vector2; vector2; vector )"
        },
        {
            "contents": "fit(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "fit\tvector fit( vector; vector; vector; vector; vector )"
        },
        {
            "contents": "fit01(${1:float}, ${2:float}, ${3:float})",
            "trigger": "fit01\tfloat fit01( float; float; float )"
        },
        {
            "contents": "fit01(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "fit01\tvector4 fit01( vector4; vector4; vector4 )"
        },
        {
            "contents": "fit01(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "fit01\tvector2 fit01( vector2; vector2; vector2 )"
        },
        {
            "contents": "fit01(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "fit01\tvector fit01( vector; vector; vector )"
        },
        {
            "contents": "fit10(${1:float}, ${2:float}, ${3:float})",
            "trigger": "fit10\tfloat fit10( float; float; float )"
        },
        {
            "contents": "fit10(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "fit10\tvector4 fit10( vector4; vector4; vector4 )"
        },
        {
            "contents": "fit10(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "fit10\tvector2 fit10( vector2; vector2; vector2 )"
        },
        {
            "contents": "fit10(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "fit10\tvector fit10( vector; vector; vector )"
        },
        {
            "contents": "fit11(${1:float}, ${2:float}, ${3:float})",
            "trigger": "fit11\tfloat fit11( float; float; float )"
        },
        {
            "contents": "fit11(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "fit11\tvector4 fit11( vector4; vector4; vector4 )"
        },
        {
            "contents": "fit11(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "fit11\tvector2 fit11( vector2; vector2; vector2 )"
        },
        {
            "contents": "fit11(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "fit11\tvector fit11( vector; vector; vector )"
        },
        {
            "contents": "floor(${1:float})",
            "trigger": "floor\tfloat floor( float )"
        },
        {
            "contents": "floor(${1:float})",
            "trigger": "floor\tint floor( float )"
        },
        {
            "contents": "floor(${1:vector4})",
            "trigger": "floor\tvector4 floor( vector4 )"
        },
        {
            "contents": "floor(${1:vector2})",
            "trigger": "floor\tvector2 floor( vector2 )"
        },
        {
            "contents": "floor(${1:vector})",
            "trigger": "floor\tvector floor( vector )"
        },
        {
            "contents": "flownoise(${1:float}, ${2:float}, ${3:float})",
            "trigger": "flownoise\tfloat flownoise( float; float; float )"
        },
        {
            "contents": "flownoise(${1:vector4}, ${2:float})",
            "trigger": "flownoise\tfloat flownoise( vector4; float )"
        },
        {
            "contents": "flownoise(${1:vector}, ${2:float})",
            "trigger": "flownoise\tfloat flownoise( vector; float )"
        },
        {
            "contents": "flownoise(${1:float}, ${2:float}, ${3:float})",
            "trigger": "flownoise\tvector flownoise( float; float; float )"
        },
        {
            "contents": "flownoise(${1:vector4}, ${2:float})",
            "trigger": "flownoise\tvector flownoise( vector4; float )"
        },
        {
            "contents": "flownoise(${1:vector}, ${2:float})",
            "trigger": "flownoise\tvector flownoise( vector; float )"
        },
        {
            "contents": "flowpnoise(${1:float}, ${2:float}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tfloat flowpnoise( float; float; int; int; float )"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:float})",
            "trigger": "flowpnoise\tfloat flowpnoise( vector4; int; int; int; int; float )"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "flowpnoise\tfloat flowpnoise( vector4; vector4; float )"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tfloat flowpnoise( vector; int; int; int; float )"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "flowpnoise\tfloat flowpnoise( vector; vector; float )"
        },
        {
            "contents": "flowpnoise(${1:float}, ${2:float}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tvector flowpnoise( float; float; int; int; float )"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:float})",
            "trigger": "flowpnoise\tvector flowpnoise( vector4; int; int; int; int; float )"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "flowpnoise\tvector flowpnoise( vector4; vector4; float )"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tvector flowpnoise( vector; int; int; int; float )"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "flowpnoise\tvector flowpnoise( vector; vector; float )"
        },
        {
            "contents": "frac(${1:float})",
            "trigger": "frac\tfloat frac( float )"
        },
        {
            "contents": "frac(${1:vector4})",
            "trigger": "frac\tvector4 frac( vector4 )"
        },
        {
            "contents": "frac(${1:vector2})",
            "trigger": "frac\tvector2 frac( vector2 )"
        },
        {
            "contents": "frac(${1:vector})",
            "trigger": "frac\tvector frac( vector )"
        },
        {
            "contents": "fresnel(${1:vector}, ${2:vector}, ${3:float}, ${4:float &}, ${5:float &})",
            "trigger": "fresnel\tvoid fresnel( vector; vector; float; float &; float & )"
        },
        {
            "contents": "fresnel(${1:vector}, ${2:vector}, ${3:float}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &})",
            "trigger": "fresnel\tvoid fresnel( vector; vector; float; float &; float &; vector &; vector & )"
        },
        {
            "contents": "fromNDC(${1:string}, ${2:vector})",
            "trigger": "fromNDC\tvector fromNDC( string; vector )"
        },
        {
            "contents": "fromNDC(${1:vector})",
            "trigger": "fromNDC\tvector fromNDC( vector )"
        },
        {
            "contents": "frontface(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "frontface\tvector frontface( vector; vector; vector )"
        },
        {
            "contents": "geoself()",
            "trigger": "geoself\tint geoself( void )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:matrix3 &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; matrix3 &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:matrix &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; matrix &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:float &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; float &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:int &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; int &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:vector4 &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; vector4 &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:string &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; string &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:vector &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; vector &; string; string; int; int )"
        },
        {
            "contents": "getattribute(${1:string}, ${2:float[] &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint getattribute( string; float[] &; string; string; int; int )"
        },
        {
            "contents": "getbbox(${1:int}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getbbox\tvoid getbbox( int; string; vector &; vector & )"
        },
        {
            "contents": "getbbox(${1:int}, ${2:vector &}, ${3:vector &})",
            "trigger": "getbbox\tvoid getbbox( int; vector &; vector & )"
        },
        {
            "contents": "getbbox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getbbox\tvoid getbbox( string; string; vector &; vector & )"
        },
        {
            "contents": "getbbox(${1:string}, ${2:vector &}, ${3:vector &})",
            "trigger": "getbbox\tvoid getbbox( string; vector &; vector & )"
        },
        {
            "contents": "getbbox(${1:vector &}, ${2:vector &})",
            "trigger": "getbbox\tvoid getbbox( vector &; vector & )"
        },
        {
            "contents": "getbounces(${1:bsdf})",
            "trigger": "getbounces\tint getbounces( bsdf )"
        },
        {
            "contents": "getbounds(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getbounds\tint getbounds( string; string; vector &; vector & )"
        },
        {
            "contents": "getbounds(${1:string}, ${2:vector &}, ${3:vector &})",
            "trigger": "getbounds\tint getbounds( string; vector &; vector & )"
        },
        {
            "contents": "getcomp(${1:matrix2[]}, ${2:int})",
            "trigger": "getcomp\tmatrix2 getcomp( matrix2[]; int )"
        },
        {
            "contents": "getcomp(${1:matrix3[]}, ${2:int})",
            "trigger": "getcomp\tmatrix3 getcomp( matrix3[]; int )"
        },
        {
            "contents": "getcomp(${1:matrix[]}, ${2:int})",
            "trigger": "getcomp\tmatrix getcomp( matrix[]; int )"
        },
        {
            "contents": "getcomp(${1:bsdf[]}, ${2:int})",
            "trigger": "getcomp\tbsdf getcomp( bsdf[]; int )"
        },
        {
            "contents": "getcomp(${1:matrix2}, ${2:int}, ${3:int})",
            "trigger": "getcomp\tfloat getcomp( matrix2; int; int )"
        },
        {
            "contents": "getcomp(${1:matrix3}, ${2:int}, ${3:int})",
            "trigger": "getcomp\tfloat getcomp( matrix3; int; int )"
        },
        {
            "contents": "getcomp(${1:matrix}, ${2:int}, ${3:int})",
            "trigger": "getcomp\tfloat getcomp( matrix; int; int )"
        },
        {
            "contents": "getcomp(${1:vector4}, ${2:int})",
            "trigger": "getcomp\tfloat getcomp( vector4; int )"
        },
        {
            "contents": "getcomp(${1:vector2}, ${2:int})",
            "trigger": "getcomp\tfloat getcomp( vector2; int )"
        },
        {
            "contents": "getcomp(${1:vector}, ${2:int})",
            "trigger": "getcomp\tfloat getcomp( vector; int )"
        },
        {
            "contents": "getcomp(${1:float[]}, ${2:int})",
            "trigger": "getcomp\tfloat getcomp( float[]; int )"
        },
        {
            "contents": "getcomp(${1:int[]}, ${2:int})",
            "trigger": "getcomp\tint getcomp( int[]; int )"
        },
        {
            "contents": "getcomp(${1:vector4[]}, ${2:int})",
            "trigger": "getcomp\tvector4 getcomp( vector4[]; int )"
        },
        {
            "contents": "getcomp(${1:string}, ${2:int})",
            "trigger": "getcomp\tstring getcomp( string; int )"
        },
        {
            "contents": "getcomp(${1:string[]}, ${2:int})",
            "trigger": "getcomp\tstring getcomp( string[]; int )"
        },
        {
            "contents": "getcomp(${1:vector2[]}, ${2:int})",
            "trigger": "getcomp\tvector2 getcomp( vector2[]; int )"
        },
        {
            "contents": "getcomp(${1:vector[]}, ${2:int})",
            "trigger": "getcomp\tvector getcomp( vector[]; int )"
        },
        {
            "contents": "getpointbbox(${1:int}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getpointbbox\tvoid getpointbbox( int; string; vector &; vector & )"
        },
        {
            "contents": "getpointbbox(${1:int}, ${2:vector &}, ${3:vector &})",
            "trigger": "getpointbbox\tvoid getpointbbox( int; vector &; vector & )"
        },
        {
            "contents": "getpointbbox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getpointbbox\tvoid getpointbbox( string; string; vector &; vector & )"
        },
        {
            "contents": "getpointbbox(${1:string}, ${2:vector &}, ${3:vector &})",
            "trigger": "getpointbbox\tvoid getpointbbox( string; vector &; vector & )"
        },
        {
            "contents": "getspace(${1:string}, ${2:string})",
            "trigger": "getspace\tmatrix getspace( string; string )"
        },
        {
            "contents": "gradient(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "gradient\tvector gradient( vector; float; ... )"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "hair\tbsdf hair( vector; vector; float; float; float; float; float; ... )"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "hair\tbsdf hair( vector; vector; float; float; float; ... )"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "hair\tbsdf hair( vector; vector; float; float; ... )"
        },
        {
            "contents": "hasdetailattrib(${1:int}, ${2:string})",
            "trigger": "hasdetailattrib\tint hasdetailattrib( int; string )"
        },
        {
            "contents": "hasdetailattrib(${1:string}, ${2:string})",
            "trigger": "hasdetailattrib\tint hasdetailattrib( string; string )"
        },
        {
            "contents": "haspointattrib(${1:int}, ${2:string})",
            "trigger": "haspointattrib\tint haspointattrib( int; string )"
        },
        {
            "contents": "haspointattrib(${1:string}, ${2:string})",
            "trigger": "haspointattrib\tint haspointattrib( string; string )"
        },
        {
            "contents": "hasprimattrib(${1:int}, ${2:string})",
            "trigger": "hasprimattrib\tint hasprimattrib( int; string )"
        },
        {
            "contents": "hasprimattrib(${1:string}, ${2:string})",
            "trigger": "hasprimattrib\tint hasprimattrib( string; string )"
        },
        {
            "contents": "hasvertexattrib(${1:int}, ${2:string})",
            "trigger": "hasvertexattrib\tint hasvertexattrib( int; string )"
        },
        {
            "contents": "hasvertexattrib(${1:string}, ${2:string})",
            "trigger": "hasvertexattrib\tint hasvertexattrib( string; string )"
        },
        {
            "contents": "hedge_dstpoint(${1:int}, ${2:int})",
            "trigger": "hedge_dstpoint\tint hedge_dstpoint( int; int )"
        },
        {
            "contents": "hedge_dstpoint(${1:string}, ${2:int})",
            "trigger": "hedge_dstpoint\tint hedge_dstpoint( string; int )"
        },
        {
            "contents": "hedge_dstvertex(${1:int}, ${2:int})",
            "trigger": "hedge_dstvertex\tint hedge_dstvertex( int; int )"
        },
        {
            "contents": "hedge_dstvertex(${1:string}, ${2:int})",
            "trigger": "hedge_dstvertex\tint hedge_dstvertex( string; int )"
        },
        {
            "contents": "hedge_equivcount(${1:int}, ${2:int})",
            "trigger": "hedge_equivcount\tint hedge_equivcount( int; int )"
        },
        {
            "contents": "hedge_equivcount(${1:string}, ${2:int})",
            "trigger": "hedge_equivcount\tint hedge_equivcount( string; int )"
        },
        {
            "contents": "hedge_isequiv(${1:int}, ${2:int}, ${3:int})",
            "trigger": "hedge_isequiv\tint hedge_isequiv( int; int; int )"
        },
        {
            "contents": "hedge_isequiv(${1:string}, ${2:int}, ${3:int})",
            "trigger": "hedge_isequiv\tint hedge_isequiv( string; int; int )"
        },
        {
            "contents": "hedge_isprimary(${1:int}, ${2:int})",
            "trigger": "hedge_isprimary\tint hedge_isprimary( int; int )"
        },
        {
            "contents": "hedge_isprimary(${1:string}, ${2:int})",
            "trigger": "hedge_isprimary\tint hedge_isprimary( string; int )"
        },
        {
            "contents": "hedge_isvalid(${1:int}, ${2:int})",
            "trigger": "hedge_isvalid\tint hedge_isvalid( int; int )"
        },
        {
            "contents": "hedge_isvalid(${1:string}, ${2:int})",
            "trigger": "hedge_isvalid\tint hedge_isvalid( string; int )"
        },
        {
            "contents": "hedge_next(${1:int}, ${2:int})",
            "trigger": "hedge_next\tint hedge_next( int; int )"
        },
        {
            "contents": "hedge_next(${1:string}, ${2:int})",
            "trigger": "hedge_next\tint hedge_next( string; int )"
        },
        {
            "contents": "hedge_nextequiv(${1:int}, ${2:int})",
            "trigger": "hedge_nextequiv\tint hedge_nextequiv( int; int )"
        },
        {
            "contents": "hedge_nextequiv(${1:string}, ${2:int})",
            "trigger": "hedge_nextequiv\tint hedge_nextequiv( string; int )"
        },
        {
            "contents": "hedge_postdstpoint(${1:int}, ${2:int})",
            "trigger": "hedge_postdstpoint\tint hedge_postdstpoint( int; int )"
        },
        {
            "contents": "hedge_postdstpoint(${1:string}, ${2:int})",
            "trigger": "hedge_postdstpoint\tint hedge_postdstpoint( string; int )"
        },
        {
            "contents": "hedge_postdstvertex(${1:int}, ${2:int})",
            "trigger": "hedge_postdstvertex\tint hedge_postdstvertex( int; int )"
        },
        {
            "contents": "hedge_postdstvertex(${1:string}, ${2:int})",
            "trigger": "hedge_postdstvertex\tint hedge_postdstvertex( string; int )"
        },
        {
            "contents": "hedge_presrcpoint(${1:int}, ${2:int})",
            "trigger": "hedge_presrcpoint\tint hedge_presrcpoint( int; int )"
        },
        {
            "contents": "hedge_presrcpoint(${1:string}, ${2:int})",
            "trigger": "hedge_presrcpoint\tint hedge_presrcpoint( string; int )"
        },
        {
            "contents": "hedge_presrcvertex(${1:int}, ${2:int})",
            "trigger": "hedge_presrcvertex\tint hedge_presrcvertex( int; int )"
        },
        {
            "contents": "hedge_presrcvertex(${1:string}, ${2:int})",
            "trigger": "hedge_presrcvertex\tint hedge_presrcvertex( string; int )"
        },
        {
            "contents": "hedge_prev(${1:int}, ${2:int})",
            "trigger": "hedge_prev\tint hedge_prev( int; int )"
        },
        {
            "contents": "hedge_prev(${1:string}, ${2:int})",
            "trigger": "hedge_prev\tint hedge_prev( string; int )"
        },
        {
            "contents": "hedge_prim(${1:int}, ${2:int})",
            "trigger": "hedge_prim\tint hedge_prim( int; int )"
        },
        {
            "contents": "hedge_prim(${1:string}, ${2:int})",
            "trigger": "hedge_prim\tint hedge_prim( string; int )"
        },
        {
            "contents": "hedge_primary(${1:int}, ${2:int})",
            "trigger": "hedge_primary\tint hedge_primary( int; int )"
        },
        {
            "contents": "hedge_primary(${1:string}, ${2:int})",
            "trigger": "hedge_primary\tint hedge_primary( string; int )"
        },
        {
            "contents": "hedge_srcpoint(${1:int}, ${2:int})",
            "trigger": "hedge_srcpoint\tint hedge_srcpoint( int; int )"
        },
        {
            "contents": "hedge_srcpoint(${1:string}, ${2:int})",
            "trigger": "hedge_srcpoint\tint hedge_srcpoint( string; int )"
        },
        {
            "contents": "hedge_srcvertex(${1:int}, ${2:int})",
            "trigger": "hedge_srcvertex\tint hedge_srcvertex( int; int )"
        },
        {
            "contents": "hedge_srcvertex(${1:string}, ${2:int})",
            "trigger": "hedge_srcvertex\tint hedge_srcvertex( string; int )"
        },
        {
            "contents": "henyeygreenstein(${1:float}, ${2:...})",
            "trigger": "henyeygreenstein\tbsdf henyeygreenstein( float; ... )"
        },
        {
            "contents": "hscript_noise(${1:vector})",
            "trigger": "hscript_noise\tfloat hscript_noise( vector )"
        },
        {
            "contents": "hscript_rand(${1:float})",
            "trigger": "hscript_rand\tfloat hscript_rand( float )"
        },
        {
            "contents": "hscript_rand(${1:float})",
            "trigger": "hscript_rand\tvector4 hscript_rand( float )"
        },
        {
            "contents": "hscript_rand(${1:float})",
            "trigger": "hscript_rand\tvector hscript_rand( float )"
        },
        {
            "contents": "hscript_snoise(${1:vector})",
            "trigger": "hscript_snoise\tfloat hscript_snoise( vector )"
        },
        {
            "contents": "hscript_sturb(${1:vector}, ${2:int})",
            "trigger": "hscript_sturb\tfloat hscript_sturb( vector; int )"
        },
        {
            "contents": "hscript_turb(${1:vector}, ${2:int})",
            "trigger": "hscript_turb\tfloat hscript_turb( vector; int )"
        },
        {
            "contents": "hsvtorgb(${1:float}, ${2:float}, ${3:float})",
            "trigger": "hsvtorgb\tvector hsvtorgb( float; float; float )"
        },
        {
            "contents": "hsvtorgb(${1:vector})",
            "trigger": "hsvtorgb\tvector hsvtorgb( vector )"
        },
        {
            "contents": "ident()",
            "trigger": "ident\tmatrix2 ident( void )"
        },
        {
            "contents": "ident()",
            "trigger": "ident\tmatrix3 ident( void )"
        },
        {
            "contents": "ident()",
            "trigger": "ident\tmatrix ident( void )"
        },
        {
            "contents": "inpointgroup(${1:int}, ${2:string}, ${3:int})",
            "trigger": "inpointgroup\tint inpointgroup( int; string; int )"
        },
        {
            "contents": "inpointgroup(${1:string}, ${2:string}, ${3:int})",
            "trigger": "inpointgroup\tint inpointgroup( string; string; int )"
        },
        {
            "contents": "inprimgroup(${1:int}, ${2:string}, ${3:int})",
            "trigger": "inprimgroup\tint inprimgroup( int; string; int )"
        },
        {
            "contents": "inprimgroup(${1:string}, ${2:string}, ${3:int})",
            "trigger": "inprimgroup\tint inprimgroup( string; string; int )"
        },
        {
            "contents": "insert(${1:string &}, ${2:int}, ${3:string})",
            "trigger": "insert\tvoid insert( string &; int; string )"
        },
        {
            "contents": "insert(${1:matrix2[] &}, ${2:int}, ${3:matrix2})",
            "trigger": "insert\tvoid insert( matrix2[] &; int; matrix2 )"
        },
        {
            "contents": "insert(${1:matrix2[] &}, ${2:int}, ${3:matrix2[]})",
            "trigger": "insert\tvoid insert( matrix2[] &; int; matrix2[] )"
        },
        {
            "contents": "insert(${1:matrix3[] &}, ${2:int}, ${3:matrix3})",
            "trigger": "insert\tvoid insert( matrix3[] &; int; matrix3 )"
        },
        {
            "contents": "insert(${1:matrix3[] &}, ${2:int}, ${3:matrix3[]})",
            "trigger": "insert\tvoid insert( matrix3[] &; int; matrix3[] )"
        },
        {
            "contents": "insert(${1:matrix[] &}, ${2:int}, ${3:matrix})",
            "trigger": "insert\tvoid insert( matrix[] &; int; matrix )"
        },
        {
            "contents": "insert(${1:matrix[] &}, ${2:int}, ${3:matrix[]})",
            "trigger": "insert\tvoid insert( matrix[] &; int; matrix[] )"
        },
        {
            "contents": "insert(${1:float[] &}, ${2:int}, ${3:float})",
            "trigger": "insert\tvoid insert( float[] &; int; float )"
        },
        {
            "contents": "insert(${1:float[] &}, ${2:int}, ${3:float[]})",
            "trigger": "insert\tvoid insert( float[] &; int; float[] )"
        },
        {
            "contents": "insert(${1:int[] &}, ${2:int}, ${3:int})",
            "trigger": "insert\tvoid insert( int[] &; int; int )"
        },
        {
            "contents": "insert(${1:int[] &}, ${2:int}, ${3:int[]})",
            "trigger": "insert\tvoid insert( int[] &; int; int[] )"
        },
        {
            "contents": "insert(${1:vector4[] &}, ${2:int}, ${3:vector4})",
            "trigger": "insert\tvoid insert( vector4[] &; int; vector4 )"
        },
        {
            "contents": "insert(${1:vector4[] &}, ${2:int}, ${3:vector4[]})",
            "trigger": "insert\tvoid insert( vector4[] &; int; vector4[] )"
        },
        {
            "contents": "insert(${1:string[] &}, ${2:int}, ${3:string})",
            "trigger": "insert\tvoid insert( string[] &; int; string )"
        },
        {
            "contents": "insert(${1:string[] &}, ${2:int}, ${3:string[]})",
            "trigger": "insert\tvoid insert( string[] &; int; string[] )"
        },
        {
            "contents": "insert(${1:vector2[] &}, ${2:int}, ${3:vector2})",
            "trigger": "insert\tvoid insert( vector2[] &; int; vector2 )"
        },
        {
            "contents": "insert(${1:vector2[] &}, ${2:int}, ${3:vector2[]})",
            "trigger": "insert\tvoid insert( vector2[] &; int; vector2[] )"
        },
        {
            "contents": "insert(${1:vector[] &}, ${2:int}, ${3:vector})",
            "trigger": "insert\tvoid insert( vector[] &; int; vector )"
        },
        {
            "contents": "insert(${1:vector[] &}, ${2:int}, ${3:vector[]})",
            "trigger": "insert\tvoid insert( vector[] &; int; vector[] )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector})",
            "trigger": "instance\tmatrix instance( vector; vector )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "instance\tmatrix instance( vector; vector; vector )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector4})",
            "trigger": "instance\tmatrix instance( vector; vector; vector; vector4; vector4 )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector4}, ${6:vector})",
            "trigger": "instance\tmatrix instance( vector; vector; vector; vector4; vector4; vector )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector})",
            "trigger": "instance\tmatrix instance( vector; vector; vector; vector4; vector )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector}, ${6:vector})",
            "trigger": "instance\tmatrix instance( vector; vector; vector; vector4; vector; vector )"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector})",
            "trigger": "instance\tmatrix instance( vector; vector; vector; vector )"
        },
        {
            "contents": "interpolate(${1:bsdf}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tbsdf interpolate( bsdf; float; float )"
        },
        {
            "contents": "interpolate(${1:float}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tfloat interpolate( float; float; float )"
        },
        {
            "contents": "interpolate(${1:vector4}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tvector4 interpolate( vector4; float; float )"
        },
        {
            "contents": "interpolate(${1:vector}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tvector interpolate( vector; float; float )"
        },
        {
            "contents": "intersect(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector &}, ${6:vector &})",
            "trigger": "intersect\tint intersect( int; string; vector; vector; vector &; vector & )"
        },
        {
            "contents": "intersect(${1:int}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:float &})",
            "trigger": "intersect\tint intersect( int; vector; vector; vector &; float &; float & )"
        },
        {
            "contents": "intersect(${1:int}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:vector &})",
            "trigger": "intersect\tint intersect( int; vector; vector; vector &; vector & )"
        },
        {
            "contents": "intersect(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector &}, ${6:vector &})",
            "trigger": "intersect\tint intersect( string; string; vector; vector; vector &; vector & )"
        },
        {
            "contents": "intersect(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:float &}, ${7:...})",
            "trigger": "intersect\tint intersect( string; vector; vector; vector &; float &; float &; ... )"
        },
        {
            "contents": "intersect(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:vector &})",
            "trigger": "intersect\tint intersect( string; vector; vector; vector &; vector & )"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &})",
            "trigger": "intersect_all\tint intersect_all( int; string; vector; vector; vector[] &; int[] &; vector[] & )"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &}, ${8:float}, ${9:float})",
            "trigger": "intersect_all\tint intersect_all( int; string; vector; vector; vector[] &; int[] &; vector[] &; float; float )"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &})",
            "trigger": "intersect_all\tint intersect_all( int; vector; vector; vector[] &; int[] &; vector[] & )"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &}, ${7:float}, ${8:float})",
            "trigger": "intersect_all\tint intersect_all( int; vector; vector; vector[] &; int[] &; vector[] &; float; float )"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &})",
            "trigger": "intersect_all\tint intersect_all( string; string; vector; vector; vector[] &; int[] &; vector[] & )"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &}, ${8:float}, ${9:float})",
            "trigger": "intersect_all\tint intersect_all( string; string; vector; vector; vector[] &; int[] &; vector[] &; float; float )"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &})",
            "trigger": "intersect_all\tint intersect_all( string; vector; vector; vector[] &; int[] &; vector[] & )"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &}, ${7:float}, ${8:float})",
            "trigger": "intersect_all\tint intersect_all( string; vector; vector; vector[] &; int[] &; vector[] &; float; float )"
        },
        {
            "contents": "invert(${1:matrix2})",
            "trigger": "invert\tmatrix2 invert( matrix2 )"
        },
        {
            "contents": "invert(${1:matrix3})",
            "trigger": "invert\tmatrix3 invert( matrix3 )"
        },
        {
            "contents": "invert(${1:matrix})",
            "trigger": "invert\tmatrix invert( matrix )"
        },
        {
            "contents": "isalpha(${1:string})",
            "trigger": "isalpha\tint isalpha( string )"
        },
        {
            "contents": "isbound(${1:string})",
            "trigger": "isbound\tint isbound( string )"
        },
        {
            "contents": "isconnected(${1:int})",
            "trigger": "isconnected\tint isconnected( int )"
        },
        {
            "contents": "isdigit(${1:string})",
            "trigger": "isdigit\tint isdigit( string )"
        },
        {
            "contents": "isfinite(${1:float})",
            "trigger": "isfinite\tint isfinite( float )"
        },
        {
            "contents": "isframes()",
            "trigger": "isframes\tint isframes( void )"
        },
        {
            "contents": "isnan(${1:float})",
            "trigger": "isnan\tint isnan( float )"
        },
        {
            "contents": "isotropic(${1:...})",
            "trigger": "isotropic\tbsdf isotropic( ... )"
        },
        {
            "contents": "issamples()",
            "trigger": "issamples\tint issamples( void )"
        },
        {
            "contents": "isseconds()",
            "trigger": "isseconds\tint isseconds( void )"
        },
        {
            "contents": "isvalidindex(${1:string}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( string; int )"
        },
        {
            "contents": "isvalidindex(${1:matrix2[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( matrix2[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:matrix3[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( matrix3[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:matrix[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( matrix[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:float[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( float[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:int[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( int[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:vector4[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( vector4[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:string[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( string[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:vector2[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( vector2[] &; int )"
        },
        {
            "contents": "isvalidindex(${1:vector[] &}, ${2:int})",
            "trigger": "isvalidindex\tint isvalidindex( vector[] &; int )"
        },
        {
            "contents": "isvarying(${1:matrix2})",
            "trigger": "isvarying\tint isvarying( matrix2 )"
        },
        {
            "contents": "isvarying(${1:matrix3})",
            "trigger": "isvarying\tint isvarying( matrix3 )"
        },
        {
            "contents": "isvarying(${1:matrix})",
            "trigger": "isvarying\tint isvarying( matrix )"
        },
        {
            "contents": "isvarying(${1:bsdf})",
            "trigger": "isvarying\tint isvarying( bsdf )"
        },
        {
            "contents": "isvarying(${1:float})",
            "trigger": "isvarying\tint isvarying( float )"
        },
        {
            "contents": "isvarying(${1:int})",
            "trigger": "isvarying\tint isvarying( int )"
        },
        {
            "contents": "isvarying(${1:vector4})",
            "trigger": "isvarying\tint isvarying( vector4 )"
        },
        {
            "contents": "isvarying(${1:string})",
            "trigger": "isvarying\tint isvarying( string )"
        },
        {
            "contents": "isvarying(${1:vector2})",
            "trigger": "isvarying\tint isvarying( vector2 )"
        },
        {
            "contents": "isvarying(${1:vector})",
            "trigger": "isvarying\tint isvarying( vector )"
        },
        {
            "contents": "isvarying(${1:matrix2[]})",
            "trigger": "isvarying\tint isvarying( matrix2[] )"
        },
        {
            "contents": "isvarying(${1:matrix3[]})",
            "trigger": "isvarying\tint isvarying( matrix3[] )"
        },
        {
            "contents": "isvarying(${1:matrix[]})",
            "trigger": "isvarying\tint isvarying( matrix[] )"
        },
        {
            "contents": "isvarying(${1:bsdf[]})",
            "trigger": "isvarying\tint isvarying( bsdf[] )"
        },
        {
            "contents": "isvarying(${1:float[]})",
            "trigger": "isvarying\tint isvarying( float[] )"
        },
        {
            "contents": "isvarying(${1:int[]})",
            "trigger": "isvarying\tint isvarying( int[] )"
        },
        {
            "contents": "isvarying(${1:vector4[]})",
            "trigger": "isvarying\tint isvarying( vector4[] )"
        },
        {
            "contents": "isvarying(${1:string[]})",
            "trigger": "isvarying\tint isvarying( string[] )"
        },
        {
            "contents": "isvarying(${1:vector2[]})",
            "trigger": "isvarying\tint isvarying( vector2[] )"
        },
        {
            "contents": "isvarying(${1:vector[]})",
            "trigger": "isvarying\tint isvarying( vector[] )"
        },
        {
            "contents": "itoa(${1:int})",
            "trigger": "itoa\tstring itoa( int )"
        },
        {
            "contents": "join(${1:string[]}, ${2:string})",
            "trigger": "join\tstring join( string[]; string )"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "kspline\tfloat kspline( string; float; float; float; ... )"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:vector4}, ${4:float}, ${5:...})",
            "trigger": "kspline\tvector4 kspline( string; float; vector4; float; ... )"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:vector}, ${4:float}, ${5:...})",
            "trigger": "kspline\tvector kspline( string; float; vector; float; ... )"
        },
        {
            "contents": "len(${1:matrix2})",
            "trigger": "len\tint len( matrix2 )"
        },
        {
            "contents": "len(${1:matrix3})",
            "trigger": "len\tint len( matrix3 )"
        },
        {
            "contents": "len(${1:matrix})",
            "trigger": "len\tint len( matrix )"
        },
        {
            "contents": "len(${1:vector4})",
            "trigger": "len\tint len( vector4 )"
        },
        {
            "contents": "len(${1:string})",
            "trigger": "len\tint len( string )"
        },
        {
            "contents": "len(${1:vector2})",
            "trigger": "len\tint len( vector2 )"
        },
        {
            "contents": "len(${1:vector})",
            "trigger": "len\tint len( vector )"
        },
        {
            "contents": "len(${1:matrix2[]})",
            "trigger": "len\tint len( matrix2[] )"
        },
        {
            "contents": "len(${1:matrix3[]})",
            "trigger": "len\tint len( matrix3[] )"
        },
        {
            "contents": "len(${1:matrix[]})",
            "trigger": "len\tint len( matrix[] )"
        },
        {
            "contents": "len(${1:bsdf[]})",
            "trigger": "len\tint len( bsdf[] )"
        },
        {
            "contents": "len(${1:float[]})",
            "trigger": "len\tint len( float[] )"
        },
        {
            "contents": "len(${1:int[]})",
            "trigger": "len\tint len( int[] )"
        },
        {
            "contents": "len(${1:vector4[]})",
            "trigger": "len\tint len( vector4[] )"
        },
        {
            "contents": "len(${1:string[]})",
            "trigger": "len\tint len( string[] )"
        },
        {
            "contents": "len(${1:vector2[]})",
            "trigger": "len\tint len( vector2[] )"
        },
        {
            "contents": "len(${1:vector[]})",
            "trigger": "len\tint len( vector[] )"
        },
        {
            "contents": "length(${1:float})",
            "trigger": "length\tfloat length( float )"
        },
        {
            "contents": "length(${1:vector4})",
            "trigger": "length\tfloat length( vector4 )"
        },
        {
            "contents": "length(${1:vector2})",
            "trigger": "length\tfloat length( vector2 )"
        },
        {
            "contents": "length(${1:vector})",
            "trigger": "length\tfloat length( vector )"
        },
        {
            "contents": "length2(${1:vector4})",
            "trigger": "length2\tfloat length2( vector4 )"
        },
        {
            "contents": "length2(${1:vector2})",
            "trigger": "length2\tfloat length2( vector2 )"
        },
        {
            "contents": "length2(${1:vector})",
            "trigger": "length2\tfloat length2( vector )"
        },
        {
            "contents": "lerp(${1:bsdf}, ${2:bsdf}, ${3:float})",
            "trigger": "lerp\tbsdf lerp( bsdf; bsdf; float )"
        },
        {
            "contents": "lerp(${1:float}, ${2:float}, ${3:float})",
            "trigger": "lerp\tfloat lerp( float; float; float )"
        },
        {
            "contents": "lerp(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "lerp\tvector4 lerp( vector4; vector4; float )"
        },
        {
            "contents": "lerp(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "lerp\tvector4 lerp( vector4; vector4; vector4 )"
        },
        {
            "contents": "lerp(${1:vector2}, ${2:vector2}, ${3:float})",
            "trigger": "lerp\tvector2 lerp( vector2; vector2; float )"
        },
        {
            "contents": "lerp(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "lerp\tvector2 lerp( vector2; vector2; vector2 )"
        },
        {
            "contents": "lerp(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "lerp\tvector lerp( vector; vector; float )"
        },
        {
            "contents": "lerp(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "lerp\tvector lerp( vector; vector; vector )"
        },
        {
            "contents": "limit_sample_space(${1:float}, ${2:float})",
            "trigger": "limit_sample_space\tfloat limit_sample_space( float; float )"
        },
        {
            "contents": "limit_sample_space(${1:float}, ${2:float}, ${3:float})",
            "trigger": "limit_sample_space\tfloat limit_sample_space( float; float; float )"
        },
        {
            "contents": "lkspline(${1:float}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "lkspline\tfloat lkspline( float; float; float; ... )"
        },
        {
            "contents": "lkspline(${1:float}, ${2:vector4}, ${3:float}, ${4:...})",
            "trigger": "lkspline\tvector4 lkspline( float; vector4; float; ... )"
        },
        {
            "contents": "lkspline(${1:float}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "lkspline\tvector lkspline( float; vector; float; ... )"
        },
        {
            "contents": "log(${1:float})",
            "trigger": "log\tfloat log( float )"
        },
        {
            "contents": "log(${1:vector4})",
            "trigger": "log\tvector4 log( vector4 )"
        },
        {
            "contents": "log(${1:vector2})",
            "trigger": "log\tvector2 log( vector2 )"
        },
        {
            "contents": "log(${1:vector})",
            "trigger": "log\tvector log( vector )"
        },
        {
            "contents": "log10(${1:float})",
            "trigger": "log10\tfloat log10( float )"
        },
        {
            "contents": "log10(${1:vector4})",
            "trigger": "log10\tvector4 log10( vector4 )"
        },
        {
            "contents": "log10(${1:vector2})",
            "trigger": "log10\tvector2 log10( vector2 )"
        },
        {
            "contents": "log10(${1:vector})",
            "trigger": "log10\tvector log10( vector )"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector})",
            "trigger": "lookat\tmatrix3 lookat( vector; vector )"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "lookat\tmatrix3 lookat( vector; vector; float )"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "lookat\tmatrix3 lookat( vector; vector; vector )"
        },
        {
            "contents": "lspline(${1:float}, ${2:float}, ${3:...})",
            "trigger": "lspline\tfloat lspline( float; float; ... )"
        },
        {
            "contents": "lspline(${1:float}, ${2:vector4}, ${3:...})",
            "trigger": "lspline\tvector4 lspline( float; vector4; ... )"
        },
        {
            "contents": "lspline(${1:float}, ${2:vector}, ${3:...})",
            "trigger": "lspline\tvector lspline( float; vector; ... )"
        },
        {
            "contents": "lstrip(${1:string})",
            "trigger": "lstrip\tstring lstrip( string )"
        },
        {
            "contents": "lstrip(${1:string}, ${2:string})",
            "trigger": "lstrip\tstring lstrip( string; string )"
        },
        {
            "contents": "luminance(${1:float}, ${2:float}, ${3:float})",
            "trigger": "luminance\tfloat luminance( float; float; float )"
        },
        {
            "contents": "luminance(${1:vector4})",
            "trigger": "luminance\tfloat luminance( vector4 )"
        },
        {
            "contents": "luminance(${1:vector})",
            "trigger": "luminance\tfloat luminance( vector )"
        },
        {
            "contents": "makebasis(${1:vector &}, ${2:vector &}, ${3:vector})",
            "trigger": "makebasis\tvoid makebasis( vector &; vector &; vector )"
        },
        {
            "contents": "makebasis(${1:vector &}, ${2:vector &}, ${3:vector}, ${4:vector})",
            "trigger": "makebasis\tvoid makebasis( vector &; vector &; vector; vector )"
        },
        {
            "contents": "maketransform(${1:vector}, ${2:vector})",
            "trigger": "maketransform\tmatrix3 maketransform( vector; vector )"
        },
        {
            "contents": "maketransform(${1:int}, ${2:int}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "maketransform\tmatrix maketransform( int; int; vector; vector; vector )"
        },
        {
            "contents": "maketransform(${1:int}, ${2:int}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:vector})",
            "trigger": "maketransform\tmatrix maketransform( int; int; vector; vector; vector; vector )"
        },
        {
            "contents": "maketransform(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "maketransform\tmatrix maketransform( vector; vector; vector )"
        },
        {
            "contents": "match(${1:string}, ${2:string})",
            "trigger": "match\tint match( string; string )"
        },
        {
            "contents": "matchvex_blinn(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "matchvex_blinn\tbsdf matchvex_blinn( vector; float; ... )"
        },
        {
            "contents": "matchvex_specular(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "matchvex_specular\tbsdf matchvex_specular( vector; float; ... )"
        },
        {
            "contents": "max(${1:float}, ${2:float}, ${3:...})",
            "trigger": "max\tfloat max( float; float; ... )"
        },
        {
            "contents": "max(${1:vector2})",
            "trigger": "max\tfloat max( vector2 )"
        },
        {
            "contents": "max(${1:vector})",
            "trigger": "max\tfloat max( vector )"
        },
        {
            "contents": "max(${1:float[]})",
            "trigger": "max\tfloat max( float[] )"
        },
        {
            "contents": "max(${1:int}, ${2:int}, ${3:...})",
            "trigger": "max\tint max( int; int; ... )"
        },
        {
            "contents": "max(${1:vector4}, ${2:vector4}, ${3:...})",
            "trigger": "max\tvector4 max( vector4; vector4; ... )"
        },
        {
            "contents": "max(${1:vector2}, ${2:vector2}, ${3:...})",
            "trigger": "max\tvector2 max( vector2; vector2; ... )"
        },
        {
            "contents": "max(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "max\tvector max( vector; vector; ... )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:matrix2 &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; matrix2 & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:matrix3 &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; matrix3 & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:matrix &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; matrix & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:float &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; float & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:int &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; int & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:vector4 &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; vector4 & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:vector2 &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; vector2 & )"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:vector &})",
            "trigger": "metaimport\tint metaimport( int; string; vector; vector & )"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tmatrix3[] metaimport( string; string; vector )"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tmatrix[] metaimport( string; string; vector )"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tfloat[] metaimport( string; string; vector )"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tint[] metaimport( string; string; vector )"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tvector4[] metaimport( string; string; vector )"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tvector[] metaimport( string; string; vector )"
        },
        {
            "contents": "metamarch(${1:int &}, ${2:string}, ${3:vector &}, ${4:vector &}, ${5:float})",
            "trigger": "metamarch\tint metamarch( int &; string; vector &; vector &; float )"
        },
        {
            "contents": "metanext(${1:int})",
            "trigger": "metanext\tint metanext( int )"
        },
        {
            "contents": "metastart(${1:string}, ${2:vector})",
            "trigger": "metastart\tint metastart( string; vector )"
        },
        {
            "contents": "metaweight(${1:string}, ${2:vector})",
            "trigger": "metaweight\tfloat metaweight( string; vector )"
        },
        {
            "contents": "min(${1:float}, ${2:float}, ${3:...})",
            "trigger": "min\tfloat min( float; float; ... )"
        },
        {
            "contents": "min(${1:vector2})",
            "trigger": "min\tfloat min( vector2 )"
        },
        {
            "contents": "min(${1:vector})",
            "trigger": "min\tfloat min( vector )"
        },
        {
            "contents": "min(${1:float[]})",
            "trigger": "min\tfloat min( float[] )"
        },
        {
            "contents": "min(${1:int}, ${2:int}, ${3:...})",
            "trigger": "min\tint min( int; int; ... )"
        },
        {
            "contents": "min(${1:vector4}, ${2:vector4}, ${3:...})",
            "trigger": "min\tvector4 min( vector4; vector4; ... )"
        },
        {
            "contents": "min(${1:vector2}, ${2:vector2}, ${3:...})",
            "trigger": "min\tvector2 min( vector2; vector2; ... )"
        },
        {
            "contents": "min(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "min\tvector min( vector; vector; ... )"
        },
        {
            "contents": "minpos(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "minpos\tvector minpos( int; string; vector )"
        },
        {
            "contents": "minpos(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "minpos\tvector minpos( int; string; vector; float )"
        },
        {
            "contents": "minpos(${1:int}, ${2:vector})",
            "trigger": "minpos\tvector minpos( int; vector )"
        },
        {
            "contents": "minpos(${1:int}, ${2:vector}, ${3:float})",
            "trigger": "minpos\tvector minpos( int; vector; float )"
        },
        {
            "contents": "minpos(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "minpos\tvector minpos( string; string; vector )"
        },
        {
            "contents": "minpos(${1:string}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "minpos\tvector minpos( string; string; vector; float )"
        },
        {
            "contents": "minpos(${1:string}, ${2:vector})",
            "trigger": "minpos\tvector minpos( string; vector )"
        },
        {
            "contents": "minpos(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "minpos\tvector minpos( string; vector; float )"
        },
        {
            "contents": "nbouncetypes()",
            "trigger": "nbouncetypes\tint nbouncetypes( void )"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "nearpoint\tint nearpoint( int; string; vector )"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoint\tint nearpoint( int; string; vector; float )"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:vector})",
            "trigger": "nearpoint\tint nearpoint( int; vector )"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:vector}, ${3:float})",
            "trigger": "nearpoint\tint nearpoint( int; vector; float )"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "nearpoint\tint nearpoint( string; string; vector )"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoint\tint nearpoint( string; string; vector; float )"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:vector})",
            "trigger": "nearpoint\tint nearpoint( string; vector )"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "nearpoint\tint nearpoint( string; vector; float )"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoints\tint[] nearpoints( int; string; vector; float )"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "nearpoints\tint[] nearpoints( int; string; vector; float; int )"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:vector}, ${3:float})",
            "trigger": "nearpoints\tint[] nearpoints( int; vector; float )"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:vector}, ${3:float}, ${4:int})",
            "trigger": "nearpoints\tint[] nearpoints( int; vector; float; int )"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoints\tint[] nearpoints( string; string; vector; float )"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "nearpoints\tint[] nearpoints( string; string; vector; float; int )"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "nearpoints\tint[] nearpoints( string; vector; float )"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:vector}, ${3:float}, ${4:int})",
            "trigger": "nearpoints\tint[] nearpoints( string; vector; float; int )"
        },
        {
            "contents": "neighbour(${1:int}, ${2:int}, ${3:int})",
            "trigger": "neighbour\tint neighbour( int; int; int )"
        },
        {
            "contents": "neighbour(${1:string}, ${2:int}, ${3:int})",
            "trigger": "neighbour\tint neighbour( string; int; int )"
        },
        {
            "contents": "neighbourcount(${1:int}, ${2:int})",
            "trigger": "neighbourcount\tint neighbourcount( int; int )"
        },
        {
            "contents": "neighbourcount(${1:string}, ${2:int})",
            "trigger": "neighbourcount\tint neighbourcount( string; int )"
        },
        {
            "contents": "neighbours(${1:int}, ${2:int})",
            "trigger": "neighbours\tint[] neighbours( int; int )"
        },
        {
            "contents": "neighbours(${1:string}, ${2:int})",
            "trigger": "neighbours\tint[] neighbours( string; int )"
        },
        {
            "contents": "noise(${1:float})",
            "trigger": "noise\tfloat noise( float )"
        },
        {
            "contents": "noise(${1:float}, ${2:float})",
            "trigger": "noise\tfloat noise( float; float )"
        },
        {
            "contents": "noise(${1:vector4})",
            "trigger": "noise\tfloat noise( vector4 )"
        },
        {
            "contents": "noise(${1:vector})",
            "trigger": "noise\tfloat noise( vector )"
        },
        {
            "contents": "noise(${1:float})",
            "trigger": "noise\tvector noise( float )"
        },
        {
            "contents": "noise(${1:float}, ${2:float})",
            "trigger": "noise\tvector noise( float; float )"
        },
        {
            "contents": "noise(${1:vector4})",
            "trigger": "noise\tvector noise( vector4 )"
        },
        {
            "contents": "noise(${1:vector})",
            "trigger": "noise\tvector noise( vector )"
        },
        {
            "contents": "noised(${1:float}, ${2:float &}, ${3:float &})",
            "trigger": "noised\tvoid noised( float; float &; float & )"
        },
        {
            "contents": "noised(${1:float}, ${2:float}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "noised\tvoid noised( float; float; float &; float &; float & )"
        },
        {
            "contents": "noised(${1:float}, ${2:float}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "noised\tvoid noised( float; float; vector &; vector &; vector & )"
        },
        {
            "contents": "noised(${1:float}, ${2:vector &}, ${3:vector &})",
            "trigger": "noised\tvoid noised( float; vector &; vector & )"
        },
        {
            "contents": "noised(${1:vector4}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "noised\tvoid noised( vector4; float &; float &; float &; float &; float & )"
        },
        {
            "contents": "noised(${1:vector4}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &}, ${6:vector &})",
            "trigger": "noised\tvoid noised( vector4; vector &; vector &; vector &; vector &; vector & )"
        },
        {
            "contents": "noised(${1:vector}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "noised\tvoid noised( vector; float &; float &; float &; float & )"
        },
        {
            "contents": "noised(${1:vector}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "noised\tvoid noised( vector; vector &; vector &; vector &; vector & )"
        },
        {
            "contents": "normal_bsdf(${1:bsdf})",
            "trigger": "normal_bsdf\tvector normal_bsdf( bsdf )"
        },
        {
            "contents": "normalize(${1:vector4})",
            "trigger": "normalize\tvector4 normalize( vector4 )"
        },
        {
            "contents": "normalize(${1:vector2})",
            "trigger": "normalize\tvector2 normalize( vector2 )"
        },
        {
            "contents": "normalize(${1:vector})",
            "trigger": "normalize\tvector normalize( vector )"
        },
        {
            "contents": "npoints(${1:int})",
            "trigger": "npoints\tint npoints( int )"
        },
        {
            "contents": "npoints(${1:string})",
            "trigger": "npoints\tint npoints( string )"
        },
        {
            "contents": "npointsgroup(${1:int}, ${2:string})",
            "trigger": "npointsgroup\tint npointsgroup( int; string )"
        },
        {
            "contents": "npointsgroup(${1:string}, ${2:string})",
            "trigger": "npointsgroup\tint npointsgroup( string; string )"
        },
        {
            "contents": "nprimitives(${1:int})",
            "trigger": "nprimitives\tint nprimitives( int )"
        },
        {
            "contents": "nprimitives(${1:string})",
            "trigger": "nprimitives\tint nprimitives( string )"
        },
        {
            "contents": "nprimitivesgroup(${1:int}, ${2:string})",
            "trigger": "nprimitivesgroup\tint nprimitivesgroup( int; string )"
        },
        {
            "contents": "nprimitivesgroup(${1:string}, ${2:string})",
            "trigger": "nprimitivesgroup\tint nprimitivesgroup( string; string )"
        },
        {
            "contents": "nrandom(${1:...})",
            "trigger": "nrandom\tfloat nrandom( ... )"
        },
        {
            "contents": "nrandom(${1:float &}, ${2:float &}, ${3:...})",
            "trigger": "nrandom\tvoid nrandom( float &; float &; ... )"
        },
        {
            "contents": "nrandom(${1:...})",
            "trigger": "nrandom\tvector4 nrandom( ... )"
        },
        {
            "contents": "nrandom(${1:...})",
            "trigger": "nrandom\tvector nrandom( ... )"
        },
        {
            "contents": "ntransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ntransform\tvector ntransform( string; string; vector )"
        },
        {
            "contents": "ntransform(${1:string}, ${2:vector})",
            "trigger": "ntransform\tvector ntransform( string; vector )"
        },
        {
            "contents": "ntransform(${1:vector}, ${2:matrix})",
            "trigger": "ntransform\tvector ntransform( vector; matrix )"
        },
        {
            "contents": "nuniqueval(${1:int}, ${2:string}, ${3:string})",
            "trigger": "nuniqueval\tint nuniqueval( int; string; string )"
        },
        {
            "contents": "nuniqueval(${1:string}, ${2:string}, ${3:string})",
            "trigger": "nuniqueval\tint nuniqueval( string; string; string )"
        },
        {
            "contents": "onoise(${1:vector})",
            "trigger": "onoise\tfloat onoise( vector )"
        },
        {
            "contents": "onoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "onoise\tfloat onoise( vector; int; float; float )"
        },
        {
            "contents": "onoise(${1:vector})",
            "trigger": "onoise\tvector onoise( vector )"
        },
        {
            "contents": "onoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "onoise\tvector onoise( vector; int; float; float )"
        },
        {
            "contents": "optransform(${1:string})",
            "trigger": "optransform\tmatrix optransform( string )"
        },
        {
            "contents": "optransform(${1:string}, ${2:float})",
            "trigger": "optransform\tmatrix optransform( string; float )"
        },
        {
            "contents": "ord(${1:string})",
            "trigger": "ord\tint ord( string )"
        },
        {
            "contents": "osd_facecount(${1:string})",
            "trigger": "osd_facecount\tint osd_facecount( string )"
        },
        {
            "contents": "osd_firstpatch(${1:string}, ${2:int})",
            "trigger": "osd_firstpatch\tint osd_firstpatch( string; int )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix2 &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; matrix2 & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix3 &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; matrix3 & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; matrix & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; float & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; vector4 & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector2 &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; vector2 & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; vector & )"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float[] &})",
            "trigger": "osd_limitsurface\tint osd_limitsurface( string; string; int; float; float; float[] & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix2 &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; matrix2 & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix3 &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; matrix3 & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; matrix & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; float & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; vector4 & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector2 &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; vector2 & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; vector & )"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float[] &})",
            "trigger": "osd_limitsurfacevertex\tint osd_limitsurfacevertex( string; string; int; float; float; float[] & )"
        },
        {
            "contents": "osd_patchcount(${1:string})",
            "trigger": "osd_patchcount\tint osd_patchcount( string )"
        },
        {
            "contents": "osd_patchcount(${1:string}, ${2:int})",
            "trigger": "osd_patchcount\tint osd_patchcount( string; int )"
        },
        {
            "contents": "osd_patches(${1:string}, ${2:int})",
            "trigger": "osd_patches\tint[] osd_patches( string; int )"
        },
        {
            "contents": "outerproduct(${1:vector2}, ${2:vector2})",
            "trigger": "outerproduct\tmatrix2 outerproduct( vector2; vector2 )"
        },
        {
            "contents": "outerproduct(${1:vector}, ${2:vector})",
            "trigger": "outerproduct\tmatrix3 outerproduct( vector; vector )"
        },
        {
            "contents": "outerproduct(${1:vector4}, ${2:vector4})",
            "trigger": "outerproduct\tmatrix outerproduct( vector4; vector4 )"
        },
        {
            "contents": "ow_nspace(${1:vector})",
            "trigger": "ow_nspace\tvector ow_nspace( vector )"
        },
        {
            "contents": "ow_space()",
            "trigger": "ow_space\tmatrix ow_space( void )"
        },
        {
            "contents": "ow_space(${1:vector4})",
            "trigger": "ow_space\tvector4 ow_space( vector4 )"
        },
        {
            "contents": "ow_space(${1:vector})",
            "trigger": "ow_space\tvector ow_space( vector )"
        },
        {
            "contents": "ow_vspace(${1:vector})",
            "trigger": "ow_vspace\tvector ow_vspace( vector )"
        },
        {
            "contents": "pack_inttosafefloat(${1:int})",
            "trigger": "pack_inttosafefloat\tfloat pack_inttosafefloat( int )"
        },
        {
            "contents": "pcclose(${1:int &})",
            "trigger": "pcclose\tvoid pcclose( int & )"
        },
        {
            "contents": "pcconvex(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "pcconvex\tfloat pcconvex( int; string; vector )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:matrix3}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; matrix3; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:matrix}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; matrix; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:float}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; float; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:int}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; int; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector4}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; vector4; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:string}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; string; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "pcexport\tint pcexport( int; string; vector; ... )"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:...})",
            "trigger": "pcexport\tint pcexport( int; string; vector; float; ... )"
        },
        {
            "contents": "pcfarthest(${1:int})",
            "trigger": "pcfarthest\tfloat pcfarthest( int )"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tmatrix3 pcfilter( int; string; ... )"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tmatrix pcfilter( int; string; ... )"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tfloat pcfilter( int; string; ... )"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tint pcfilter( int; string; ... )"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tvector4 pcfilter( int; string; ... )"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tvector pcfilter( int; string; ... )"
        },
        {
            "contents": "pcfind(${1:int}, ${2:string}, ${3:string}, ${4:vector}, ${5:float}, ${6:int})",
            "trigger": "pcfind\tint[] pcfind( int; string; string; vector; float; int )"
        },
        {
            "contents": "pcfind(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcfind\tint[] pcfind( int; string; vector; float; int )"
        },
        {
            "contents": "pcfind(${1:string}, ${2:string}, ${3:string}, ${4:vector}, ${5:float}, ${6:int})",
            "trigger": "pcfind\tint[] pcfind( string; string; string; vector; float; int )"
        },
        {
            "contents": "pcfind(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcfind\tint[] pcfind( string; string; vector; float; int )"
        },
        {
            "contents": "pcfind_radius(${1:int}, ${2:string}, ${3:string}, ${4:float}, ${5:vector}, ${6:float}, ${7:int})",
            "trigger": "pcfind_radius\tint[] pcfind_radius( int; string; string; float; vector; float; int )"
        },
        {
            "contents": "pcfind_radius(${1:int}, ${2:string}, ${3:string}, ${4:string}, ${5:float}, ${6:vector}, ${7:float}, ${8:int})",
            "trigger": "pcfind_radius\tint[] pcfind_radius( int; string; string; string; float; vector; float; int )"
        },
        {
            "contents": "pcfind_radius(${1:string}, ${2:string}, ${3:string}, ${4:float}, ${5:vector}, ${6:float}, ${7:int})",
            "trigger": "pcfind_radius\tint[] pcfind_radius( string; string; string; float; vector; float; int )"
        },
        {
            "contents": "pcfind_radius(${1:string}, ${2:string}, ${3:string}, ${4:string}, ${5:float}, ${6:vector}, ${7:float}, ${8:int})",
            "trigger": "pcfind_radius\tint[] pcfind_radius( string; string; string; string; float; vector; float; int )"
        },
        {
            "contents": "pcgenerate(${1:string}, ${2:int})",
            "trigger": "pcgenerate\tint pcgenerate( string; int )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:matrix3 &})",
            "trigger": "pcimport\tint pcimport( int; string; matrix3 & )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:matrix &})",
            "trigger": "pcimport\tint pcimport( int; string; matrix & )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:float &})",
            "trigger": "pcimport\tint pcimport( int; string; float & )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "pcimport\tint pcimport( int; string; int & )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:vector4 &})",
            "trigger": "pcimport\tint pcimport( int; string; vector4 & )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:string &})",
            "trigger": "pcimport\tint pcimport( int; string; string & )"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:vector &})",
            "trigger": "pcimport\tint pcimport( int; string; vector & )"
        },
        {
            "contents": "pcimportbyidx3(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidx3\tmatrix3 pcimportbyidx3( int; string; int )"
        },
        {
            "contents": "pcimportbyidx4(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidx4\tmatrix pcimportbyidx4( int; string; int )"
        },
        {
            "contents": "pcimportbyidxf(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxf\tfloat pcimportbyidxf( int; string; int )"
        },
        {
            "contents": "pcimportbyidxi(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxi\tint pcimportbyidxi( int; string; int )"
        },
        {
            "contents": "pcimportbyidxp(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxp\tvector4 pcimportbyidxp( int; string; int )"
        },
        {
            "contents": "pcimportbyidxs(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxs\tstring pcimportbyidxs( int; string; int )"
        },
        {
            "contents": "pcimportbyidxv(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxv\tvector pcimportbyidxv( int; string; int )"
        },
        {
            "contents": "pciterate(${1:int})",
            "trigger": "pciterate\tint pciterate( int )"
        },
        {
            "contents": "pcnumfound(${1:int})",
            "trigger": "pcnumfound\tint pcnumfound( int )"
        },
        {
            "contents": "pcopen(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcopen\tint pcopen( int; string; vector; float; int )"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:int}, ${4:...})",
            "trigger": "pcopen\tint pcopen( string; string; int; ... )"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int}, ${6:...})",
            "trigger": "pcopen\tint pcopen( string; string; vector; float; int; ... )"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:vector}, ${4:string}, ${5:vector}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "pcopen\tint pcopen( string; string; vector; string; vector; float; int; ... )"
        },
        {
            "contents": "pcopenlod(${1:string}, ${2:string}, ${3:vector}, ${4:int}, ${5:...})",
            "trigger": "pcopenlod\tint pcopenlod( string; string; vector; int; ... )"
        },
        {
            "contents": "pcsampleleaf(${1:int}, ${2:float})",
            "trigger": "pcsampleleaf\tvoid pcsampleleaf( int; float )"
        },
        {
            "contents": "pcsize(${1:int})",
            "trigger": "pcsize\tint pcsize( int )"
        },
        {
            "contents": "pcunshaded(${1:int}, ${2:string})",
            "trigger": "pcunshaded\tint pcunshaded( int; string )"
        },
        {
            "contents": "pcwrite(${1:string}, ${2:...})",
            "trigger": "pcwrite\tint pcwrite( string; ... )"
        },
        {
            "contents": "phongBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "phongBRDF\tfloat phongBRDF( vector; vector; vector; float )"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:vector}, ${6:vector}, ${7:...})",
            "trigger": "phonglobe\tbsdf phonglobe( vector; vector; float; float; vector; vector; ... )"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "phonglobe\tbsdf phonglobe( vector; vector; float; ... )"
        },
        {
            "contents": "photonmap(${1:string}, ${2:vector}, ${3:vector}, ${4:...})",
            "trigger": "photonmap\tvector photonmap( string; vector; vector; ... )"
        },
        {
            "contents": "photonmap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:...})",
            "trigger": "photonmap\tvoid photonmap( string; vector; vector; vector &; float &; ... )"
        },
        {
            "contents": "pluralize(${1:string})",
            "trigger": "pluralize\tstring pluralize( string )"
        },
        {
            "contents": "pnoise(${1:float}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tfloat pnoise( float; float; int; int )"
        },
        {
            "contents": "pnoise(${1:float}, ${2:int})",
            "trigger": "pnoise\tfloat pnoise( float; int )"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "pnoise\tfloat pnoise( vector4; int; int; int; int )"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:vector4})",
            "trigger": "pnoise\tfloat pnoise( vector4; vector4 )"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tfloat pnoise( vector; int; int; int )"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:vector})",
            "trigger": "pnoise\tfloat pnoise( vector; vector )"
        },
        {
            "contents": "pnoise(${1:float}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tvector pnoise( float; float; int; int )"
        },
        {
            "contents": "pnoise(${1:float}, ${2:int})",
            "trigger": "pnoise\tvector pnoise( float; int )"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "pnoise\tvector pnoise( vector4; int; int; int; int )"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:vector4})",
            "trigger": "pnoise\tvector pnoise( vector4; vector4 )"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tvector pnoise( vector; int; int; int )"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:vector})",
            "trigger": "pnoise\tvector pnoise( vector; vector )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2 point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2 point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3 point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3 point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tint point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tint point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4 point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4 point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tstring point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tstring point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2 point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2 point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tint[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tint[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tstring[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tstring[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2[] point( string; string; int )"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector[] point( int; string; int )"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector[] point( string; string; int )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2 pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2 pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3 pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3 pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4 pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4 pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2 pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2 pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector[] pointattrib( int; string; int; int & )"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector[] pointattrib( string; string; int; int & )"
        },
        {
            "contents": "pointattribsize(${1:int}, ${2:string})",
            "trigger": "pointattribsize\tint pointattribsize( int; string )"
        },
        {
            "contents": "pointattribsize(${1:string}, ${2:string})",
            "trigger": "pointattribsize\tint pointattribsize( string; string )"
        },
        {
            "contents": "pointattribtype(${1:int}, ${2:string})",
            "trigger": "pointattribtype\tint pointattribtype( int; string )"
        },
        {
            "contents": "pointattribtype(${1:string}, ${2:string})",
            "trigger": "pointattribtype\tint pointattribtype( string; string )"
        },
        {
            "contents": "pointattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "pointattribtypeinfo\tstring pointattribtypeinfo( int; string )"
        },
        {
            "contents": "pointattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "pointattribtypeinfo\tstring pointattribtypeinfo( string; string )"
        },
        {
            "contents": "pointedge(${1:int}, ${2:int}, ${3:int})",
            "trigger": "pointedge\tint pointedge( int; int; int )"
        },
        {
            "contents": "pointedge(${1:string}, ${2:int}, ${3:int})",
            "trigger": "pointedge\tint pointedge( string; int; int )"
        },
        {
            "contents": "pointhedge(${1:int}, ${2:int})",
            "trigger": "pointhedge\tint pointhedge( int; int )"
        },
        {
            "contents": "pointhedge(${1:int}, ${2:int}, ${3:int})",
            "trigger": "pointhedge\tint pointhedge( int; int; int )"
        },
        {
            "contents": "pointhedge(${1:string}, ${2:int})",
            "trigger": "pointhedge\tint pointhedge( string; int )"
        },
        {
            "contents": "pointhedge(${1:string}, ${2:int}, ${3:int})",
            "trigger": "pointhedge\tint pointhedge( string; int; int )"
        },
        {
            "contents": "pointhedgenext(${1:int}, ${2:int})",
            "trigger": "pointhedgenext\tint pointhedgenext( int; int )"
        },
        {
            "contents": "pointhedgenext(${1:string}, ${2:int})",
            "trigger": "pointhedgenext\tint pointhedgenext( string; int )"
        },
        {
            "contents": "pointprims(${1:int}, ${2:int})",
            "trigger": "pointprims\tint[] pointprims( int; int )"
        },
        {
            "contents": "pointprims(${1:string}, ${2:int})",
            "trigger": "pointprims\tint[] pointprims( string; int )"
        },
        {
            "contents": "pointvertex(${1:int}, ${2:int})",
            "trigger": "pointvertex\tint pointvertex( int; int )"
        },
        {
            "contents": "pointvertex(${1:string}, ${2:int})",
            "trigger": "pointvertex\tint pointvertex( string; int )"
        },
        {
            "contents": "pointvertices(${1:int}, ${2:int})",
            "trigger": "pointvertices\tint[] pointvertices( int; int )"
        },
        {
            "contents": "pointvertices(${1:string}, ${2:int})",
            "trigger": "pointvertices\tint[] pointvertices( string; int )"
        },
        {
            "contents": "polardecomp(${1:matrix3})",
            "trigger": "polardecomp\tmatrix3 polardecomp( matrix3 )"
        },
        {
            "contents": "pop(${1:matrix2[] &})",
            "trigger": "pop\tmatrix2 pop( matrix2[] & )"
        },
        {
            "contents": "pop(${1:matrix2[] &}, ${2:int})",
            "trigger": "pop\tmatrix2 pop( matrix2[] &; int )"
        },
        {
            "contents": "pop(${1:matrix3[] &})",
            "trigger": "pop\tmatrix3 pop( matrix3[] & )"
        },
        {
            "contents": "pop(${1:matrix3[] &}, ${2:int})",
            "trigger": "pop\tmatrix3 pop( matrix3[] &; int )"
        },
        {
            "contents": "pop(${1:matrix[] &})",
            "trigger": "pop\tmatrix pop( matrix[] & )"
        },
        {
            "contents": "pop(${1:matrix[] &}, ${2:int})",
            "trigger": "pop\tmatrix pop( matrix[] &; int )"
        },
        {
            "contents": "pop(${1:bsdf[] &}, ${2:int})",
            "trigger": "pop\tbsdf pop( bsdf[] &; int )"
        },
        {
            "contents": "pop(${1:bsdf[] &})",
            "trigger": "pop\tbsdf pop( bsdf[] & )"
        },
        {
            "contents": "pop(${1:float[] &})",
            "trigger": "pop\tfloat pop( float[] & )"
        },
        {
            "contents": "pop(${1:float[] &}, ${2:int})",
            "trigger": "pop\tfloat pop( float[] &; int )"
        },
        {
            "contents": "pop(${1:int[] &})",
            "trigger": "pop\tint pop( int[] & )"
        },
        {
            "contents": "pop(${1:int[] &}, ${2:int})",
            "trigger": "pop\tint pop( int[] &; int )"
        },
        {
            "contents": "pop(${1:vector4[] &})",
            "trigger": "pop\tvector4 pop( vector4[] & )"
        },
        {
            "contents": "pop(${1:vector4[] &}, ${2:int})",
            "trigger": "pop\tvector4 pop( vector4[] &; int )"
        },
        {
            "contents": "pop(${1:string[] &})",
            "trigger": "pop\tstring pop( string[] & )"
        },
        {
            "contents": "pop(${1:string[] &}, ${2:int})",
            "trigger": "pop\tstring pop( string[] &; int )"
        },
        {
            "contents": "pop(${1:vector2[] &})",
            "trigger": "pop\tvector2 pop( vector2[] & )"
        },
        {
            "contents": "pop(${1:vector2[] &}, ${2:int})",
            "trigger": "pop\tvector2 pop( vector2[] &; int )"
        },
        {
            "contents": "pop(${1:vector[] &})",
            "trigger": "pop\tvector pop( vector[] & )"
        },
        {
            "contents": "pop(${1:vector[] &}, ${2:int})",
            "trigger": "pop\tvector pop( vector[] &; int )"
        },
        {
            "contents": "pow(${1:float}, ${2:float})",
            "trigger": "pow\tfloat pow( float; float )"
        },
        {
            "contents": "pow(${1:vector4}, ${2:float})",
            "trigger": "pow\tvector4 pow( vector4; float )"
        },
        {
            "contents": "pow(${1:vector2}, ${2:float})",
            "trigger": "pow\tvector2 pow( vector2; float )"
        },
        {
            "contents": "pow(${1:vector}, ${2:float})",
            "trigger": "pow\tvector pow( vector; float )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2 prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2 prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3 prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3 prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tint prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tint prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4 prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4 prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2 prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2 prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tint[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tint[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2[] prim( string; string; int )"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector[] prim( int; string; int )"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector[] prim( string; string; int )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix2 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix2 &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix3 &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix3 &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix3 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix3 &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; float &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; float &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:int &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; int &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:int &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; int &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector4 &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector4 &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector4 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector4 &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector2 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector2 &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix2[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix2[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix3[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix3[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; matrix[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float[] &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint prim_attribute( string; float[] &; string; int; float; float )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; float[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:int[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; int[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector4[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector4[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector2[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector2[] &; string; int; vector )"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint prim_attribute( string; vector[] &; string; int; vector )"
        },
        {
            "contents": "prim_normal(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "prim_normal\tvector prim_normal( int; int; float; float )"
        },
        {
            "contents": "prim_normal(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "prim_normal\tvector prim_normal( string; int; float; float )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2 primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2 primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3 primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3 primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4 primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4 primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2 primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2 primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector[] primattrib( int; string; int; int & )"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector[] primattrib( string; string; int; int & )"
        },
        {
            "contents": "primattribsize(${1:int}, ${2:string})",
            "trigger": "primattribsize\tint primattribsize( int; string )"
        },
        {
            "contents": "primattribsize(${1:string}, ${2:string})",
            "trigger": "primattribsize\tint primattribsize( string; string )"
        },
        {
            "contents": "primattribtype(${1:int}, ${2:string})",
            "trigger": "primattribtype\tint primattribtype( int; string )"
        },
        {
            "contents": "primattribtype(${1:string}, ${2:string})",
            "trigger": "primattribtype\tint primattribtype( string; string )"
        },
        {
            "contents": "primattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "primattribtypeinfo\tstring primattribtypeinfo( int; string )"
        },
        {
            "contents": "primattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "primattribtypeinfo\tstring primattribtypeinfo( string; string )"
        },
        {
            "contents": "primhedge(${1:int}, ${2:int})",
            "trigger": "primhedge\tint primhedge( int; int )"
        },
        {
            "contents": "primhedge(${1:string}, ${2:int})",
            "trigger": "primhedge\tint primhedge( string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2 primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2 primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3 primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3 primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4 primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4 primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2 primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2 primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector[] primintrinsic( int; string; int )"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector[] primintrinsic( string; string; int )"
        },
        {
            "contents": "primpoint(${1:int}, ${2:int}, ${3:int})",
            "trigger": "primpoint\tint primpoint( int; int; int )"
        },
        {
            "contents": "primpoint(${1:string}, ${2:int}, ${3:int})",
            "trigger": "primpoint\tint primpoint( string; int; int )"
        },
        {
            "contents": "primpoints(${1:int}, ${2:int})",
            "trigger": "primpoints\tint[] primpoints( int; int )"
        },
        {
            "contents": "primpoints(${1:string}, ${2:int})",
            "trigger": "primpoints\tint[] primpoints( string; int )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2 primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2 primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3 primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3 primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4 primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4 primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2 primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2 primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector[] primuv( int; string; int; vector )"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector[] primuv( string; string; int; vector )"
        },
        {
            "contents": "primvertex(${1:int}, ${2:int}, ${3:int})",
            "trigger": "primvertex\tint primvertex( int; int; int )"
        },
        {
            "contents": "primvertex(${1:string}, ${2:int}, ${3:int})",
            "trigger": "primvertex\tint primvertex( string; int; int )"
        },
        {
            "contents": "primvertexcount(${1:int}, ${2:int})",
            "trigger": "primvertexcount\tint primvertexcount( int; int )"
        },
        {
            "contents": "primvertexcount(${1:string}, ${2:int})",
            "trigger": "primvertexcount\tint primvertexcount( string; int )"
        },
        {
            "contents": "primvertices(${1:int}, ${2:int})",
            "trigger": "primvertices\tint[] primvertices( int; int )"
        },
        {
            "contents": "primvertices(${1:string}, ${2:int})",
            "trigger": "primvertices\tint[] primvertices( string; int )"
        },
        {
            "contents": "printf(${1:string}, ${2:...})",
            "trigger": "printf\tvoid printf( string; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tmatrix3 ptexture( string; int; float; float; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tmatrix ptexture( string; int; float; float; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tfloat ptexture( string; int; float; float; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tvector4 ptexture( string; int; float; float; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tvector ptexture( string; int; float; float; ... )"
        },
        {
            "contents": "ptlined(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "ptlined\tfloat ptlined( vector; vector; vector )"
        },
        {
            "contents": "ptransform(${1:vector4}, ${2:matrix})",
            "trigger": "ptransform\tvector4 ptransform( vector4; matrix )"
        },
        {
            "contents": "ptransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ptransform\tvector ptransform( string; string; vector )"
        },
        {
            "contents": "ptransform(${1:string}, ${2:vector})",
            "trigger": "ptransform\tvector ptransform( string; vector )"
        },
        {
            "contents": "ptransform(${1:vector}, ${2:matrix})",
            "trigger": "ptransform\tvector ptransform( vector; matrix )"
        },
        {
            "contents": "push(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "push\tvoid push( matrix2[] &; matrix2 )"
        },
        {
            "contents": "push(${1:matrix2[] &}, ${2:matrix2[]})",
            "trigger": "push\tvoid push( matrix2[] &; matrix2[] )"
        },
        {
            "contents": "push(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "push\tvoid push( matrix3[] &; matrix3 )"
        },
        {
            "contents": "push(${1:matrix3[] &}, ${2:matrix3[]})",
            "trigger": "push\tvoid push( matrix3[] &; matrix3[] )"
        },
        {
            "contents": "push(${1:matrix[] &}, ${2:matrix})",
            "trigger": "push\tvoid push( matrix[] &; matrix )"
        },
        {
            "contents": "push(${1:matrix[] &}, ${2:matrix[]})",
            "trigger": "push\tvoid push( matrix[] &; matrix[] )"
        },
        {
            "contents": "push(${1:bsdf[] &}, ${2:bsdf})",
            "trigger": "push\tvoid push( bsdf[] &; bsdf )"
        },
        {
            "contents": "push(${1:bsdf[] &}, ${2:bsdf[]})",
            "trigger": "push\tvoid push( bsdf[] &; bsdf[] )"
        },
        {
            "contents": "push(${1:float[] &}, ${2:float})",
            "trigger": "push\tvoid push( float[] &; float )"
        },
        {
            "contents": "push(${1:float[] &}, ${2:float[]})",
            "trigger": "push\tvoid push( float[] &; float[] )"
        },
        {
            "contents": "push(${1:int[] &}, ${2:int})",
            "trigger": "push\tvoid push( int[] &; int )"
        },
        {
            "contents": "push(${1:int[] &}, ${2:int[]})",
            "trigger": "push\tvoid push( int[] &; int[] )"
        },
        {
            "contents": "push(${1:vector4[] &}, ${2:vector4})",
            "trigger": "push\tvoid push( vector4[] &; vector4 )"
        },
        {
            "contents": "push(${1:vector4[] &}, ${2:vector4[]})",
            "trigger": "push\tvoid push( vector4[] &; vector4[] )"
        },
        {
            "contents": "push(${1:string[] &}, ${2:string})",
            "trigger": "push\tvoid push( string[] &; string )"
        },
        {
            "contents": "push(${1:string[] &}, ${2:string[]})",
            "trigger": "push\tvoid push( string[] &; string[] )"
        },
        {
            "contents": "push(${1:vector2[] &}, ${2:vector2})",
            "trigger": "push\tvoid push( vector2[] &; vector2 )"
        },
        {
            "contents": "push(${1:vector2[] &}, ${2:vector2[]})",
            "trigger": "push\tvoid push( vector2[] &; vector2[] )"
        },
        {
            "contents": "push(${1:vector[] &}, ${2:vector})",
            "trigger": "push\tvoid push( vector[] &; vector )"
        },
        {
            "contents": "push(${1:vector[] &}, ${2:vector[]})",
            "trigger": "push\tvoid push( vector[] &; vector[] )"
        },
        {
            "contents": "qconvert(${1:vector4})",
            "trigger": "qconvert\tmatrix3 qconvert( vector4 )"
        },
        {
            "contents": "qconvert(${1:vector4})",
            "trigger": "qconvert\tvector qconvert( vector4 )"
        },
        {
            "contents": "qdistance(${1:vector4}, ${2:vector4})",
            "trigger": "qdistance\tfloat qdistance( vector4; vector4 )"
        },
        {
            "contents": "qinvert(${1:vector4})",
            "trigger": "qinvert\tvector4 qinvert( vector4 )"
        },
        {
            "contents": "qmultiply(${1:vector4}, ${2:vector4})",
            "trigger": "qmultiply\tvector4 qmultiply( vector4; vector4 )"
        },
        {
            "contents": "qrotate(${1:vector4}, ${2:vector})",
            "trigger": "qrotate\tvector qrotate( vector4; vector )"
        },
        {
            "contents": "quaternion(${1:matrix3})",
            "trigger": "quaternion\tvector4 quaternion( matrix3 )"
        },
        {
            "contents": "quaternion(${1:float}, ${2:vector})",
            "trigger": "quaternion\tvector4 quaternion( float; vector )"
        },
        {
            "contents": "quaternion(${1:vector})",
            "trigger": "quaternion\tvector4 quaternion( vector )"
        },
        {
            "contents": "radians(${1:float})",
            "trigger": "radians\tfloat radians( float )"
        },
        {
            "contents": "radians(${1:vector4})",
            "trigger": "radians\tvector4 radians( vector4 )"
        },
        {
            "contents": "radians(${1:vector2})",
            "trigger": "radians\tvector2 radians( vector2 )"
        },
        {
            "contents": "radians(${1:vector})",
            "trigger": "radians\tvector radians( vector )"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tfloat rand( float )"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tfloat rand( float; float )"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tfloat rand( vector4 )"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tfloat rand( vector2 )"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tfloat rand( vector )"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tvector4 rand( float )"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tvector4 rand( float; float )"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tvector4 rand( vector4 )"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tvector4 rand( vector2 )"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tvector4 rand( vector )"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tvector2 rand( float )"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tvector2 rand( float; float )"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tvector2 rand( vector4 )"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tvector2 rand( vector2 )"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tvector2 rand( vector )"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tvector rand( float )"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tvector rand( float; float )"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tvector rand( vector4 )"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tvector rand( vector2 )"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tvector rand( vector )"
        },
        {
            "contents": "random(${1:float})",
            "trigger": "random\tfloat random( float )"
        },
        {
            "contents": "random(${1:float}, ${2:float})",
            "trigger": "random\tfloat random( float; float )"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tfloat random( int )"
        },
        {
            "contents": "random(${1:int}, ${2:int})",
            "trigger": "random\tfloat random( int; int )"
        },
        {
            "contents": "random(${1:vector4})",
            "trigger": "random\tfloat random( vector4 )"
        },
        {
            "contents": "random(${1:vector})",
            "trigger": "random\tfloat random( vector )"
        },
        {
            "contents": "random(${1:float})",
            "trigger": "random\tvector4 random( float )"
        },
        {
            "contents": "random(${1:float}, ${2:float})",
            "trigger": "random\tvector4 random( float; float )"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tvector4 random( int )"
        },
        {
            "contents": "random(${1:int}, ${2:int})",
            "trigger": "random\tvector4 random( int; int )"
        },
        {
            "contents": "random(${1:vector4})",
            "trigger": "random\tvector4 random( vector4 )"
        },
        {
            "contents": "random(${1:vector})",
            "trigger": "random\tvector4 random( vector )"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tvector2 random( int )"
        },
        {
            "contents": "random(${1:float})",
            "trigger": "random\tvector random( float )"
        },
        {
            "contents": "random(${1:float}, ${2:float})",
            "trigger": "random\tvector random( float; float )"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tvector random( int )"
        },
        {
            "contents": "random(${1:int}, ${2:int})",
            "trigger": "random\tvector random( int; int )"
        },
        {
            "contents": "random(${1:vector4})",
            "trigger": "random\tvector random( vector4 )"
        },
        {
            "contents": "random(${1:vector})",
            "trigger": "random\tvector random( vector )"
        },
        {
            "contents": "random_fhash(${1:float})",
            "trigger": "random_fhash\tint random_fhash( float )"
        },
        {
            "contents": "random_fhash(${1:float}, ${2:float})",
            "trigger": "random_fhash\tint random_fhash( float; float )"
        },
        {
            "contents": "random_fhash(${1:vector4})",
            "trigger": "random_fhash\tint random_fhash( vector4 )"
        },
        {
            "contents": "random_fhash(${1:vector2})",
            "trigger": "random_fhash\tint random_fhash( vector2 )"
        },
        {
            "contents": "random_fhash(${1:vector})",
            "trigger": "random_fhash\tint random_fhash( vector )"
        },
        {
            "contents": "random_ihash(${1:int})",
            "trigger": "random_ihash\tint random_ihash( int )"
        },
        {
            "contents": "random_shash(${1:string})",
            "trigger": "random_shash\tint random_shash( string )"
        },
        {
            "contents": "random_sobol(${1:float}, ${2:int})",
            "trigger": "random_sobol\tfloat random_sobol( float; int )"
        },
        {
            "contents": "random_sobol(${1:int}, ${2:int})",
            "trigger": "random_sobol\tfloat random_sobol( int; int )"
        },
        {
            "contents": "random_sobol(${1:vector4}, ${2:int})",
            "trigger": "random_sobol\tfloat random_sobol( vector4; int )"
        },
        {
            "contents": "random_sobol(${1:vector}, ${2:int})",
            "trigger": "random_sobol\tfloat random_sobol( vector; int )"
        },
        {
            "contents": "random_sobol(${1:float}, ${2:int})",
            "trigger": "random_sobol\tvector4 random_sobol( float; int )"
        },
        {
            "contents": "random_sobol(${1:int}, ${2:int})",
            "trigger": "random_sobol\tvector4 random_sobol( int; int )"
        },
        {
            "contents": "random_sobol(${1:vector4}, ${2:int})",
            "trigger": "random_sobol\tvector4 random_sobol( vector4; int )"
        },
        {
            "contents": "random_sobol(${1:vector}, ${2:int})",
            "trigger": "random_sobol\tvector4 random_sobol( vector; int )"
        },
        {
            "contents": "random_sobol(${1:float}, ${2:int})",
            "trigger": "random_sobol\tvector random_sobol( float; int )"
        },
        {
            "contents": "random_sobol(${1:int}, ${2:int})",
            "trigger": "random_sobol\tvector random_sobol( int; int )"
        },
        {
            "contents": "random_sobol(${1:vector4}, ${2:int})",
            "trigger": "random_sobol\tvector random_sobol( vector4; int )"
        },
        {
            "contents": "random_sobol(${1:vector}, ${2:int})",
            "trigger": "random_sobol\tvector random_sobol( vector; int )"
        },
        {
            "contents": "rawbumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmap\tvoid rawbumpmap( string; float &; float &; float; float )"
        },
        {
            "contents": "rawbumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmap\tvoid rawbumpmap( string; float &; float &; vector )"
        },
        {
            "contents": "rawbumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapA\tvoid rawbumpmapA( string; float &; float &; float; float )"
        },
        {
            "contents": "rawbumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapA\tvoid rawbumpmapA( string; float &; float &; vector )"
        },
        {
            "contents": "rawbumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapB\tvoid rawbumpmapB( string; float &; float &; float; float )"
        },
        {
            "contents": "rawbumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapB\tvoid rawbumpmapB( string; float &; float &; vector )"
        },
        {
            "contents": "rawbumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapG\tvoid rawbumpmapG( string; float &; float &; float; float )"
        },
        {
            "contents": "rawbumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapG\tvoid rawbumpmapG( string; float &; float &; vector )"
        },
        {
            "contents": "rawbumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapL\tvoid rawbumpmapL( string; float &; float &; float; float )"
        },
        {
            "contents": "rawbumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapL\tvoid rawbumpmapL( string; float &; float &; vector )"
        },
        {
            "contents": "rawbumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapR\tvoid rawbumpmapR( string; float &; float &; float; float )"
        },
        {
            "contents": "rawbumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapR\tvoid rawbumpmapR( string; float &; float &; vector )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "rawcolormap\tvector4 rawcolormap( string; float; float; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "rawcolormap\tvector4 rawcolormap( string; float; float; float; float; float; float; float; float; int; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "rawcolormap\tvector4 rawcolormap( string; vector; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "rawcolormap\tvector4 rawcolormap( string; vector; vector; vector; int; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "rawcolormap\tvector4 rawcolormap( string; vector; vector; vector; vector; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "rawcolormap\tvector4 rawcolormap( string; vector; vector; vector; vector; int; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "rawcolormap\tvector rawcolormap( string; float; float; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "rawcolormap\tvector rawcolormap( string; float; float; float; float; float; float; float; float; int; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "rawcolormap\tvector rawcolormap( string; vector; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "rawcolormap\tvector rawcolormap( string; vector; vector; vector; int; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "rawcolormap\tvector rawcolormap( string; vector; vector; vector; vector; ... )"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "rawcolormap\tvector rawcolormap( string; vector; vector; vector; vector; int; ... )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string})",
            "trigger": "re_find\tint re_find( string; string )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_find\tint re_find( string; string; int )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_find\tint re_find( string; string; int; int )"
        },
        {
            "contents": "re_find(${1:int[] &}, ${2:int[] &}, ${3:string}, ${4:string})",
            "trigger": "re_find\tint re_find( int[] &; int[] &; string; string )"
        },
        {
            "contents": "re_find(${1:int[] &}, ${2:int[] &}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "re_find\tint re_find( int[] &; int[] &; string; string; int )"
        },
        {
            "contents": "re_find(${1:int[] &}, ${2:int[] &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "re_find\tint re_find( int[] &; int[] &; string; string; int; int )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string})",
            "trigger": "re_find\tstring re_find( string; string )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_find\tstring re_find( string; string; int )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_find\tstring re_find( string; string; int; int )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string})",
            "trigger": "re_find\tstring[] re_find( string; string )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_find\tstring[] re_find( string; string; int )"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_find\tstring[] re_find( string; string; int; int )"
        },
        {
            "contents": "re_findall(${1:string}, ${2:string})",
            "trigger": "re_findall\tstring[] re_findall( string; string )"
        },
        {
            "contents": "re_findall(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_findall\tstring[] re_findall( string; string; int )"
        },
        {
            "contents": "re_findall(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_findall\tstring[] re_findall( string; string; int; int )"
        },
        {
            "contents": "re_match(${1:string}, ${2:string})",
            "trigger": "re_match\tint re_match( string; string )"
        },
        {
            "contents": "re_replace(${1:string}, ${2:string}, ${3:string})",
            "trigger": "re_replace\tstring re_replace( string; string; string )"
        },
        {
            "contents": "re_replace(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "re_replace\tstring re_replace( string; string; string; int )"
        },
        {
            "contents": "re_split(${1:string}, ${2:string})",
            "trigger": "re_split\tstring[] re_split( string; string )"
        },
        {
            "contents": "re_split(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_split\tstring[] re_split( string; string; int )"
        },
        {
            "contents": "reflect(${1:vector}, ${2:vector})",
            "trigger": "reflect\tvector reflect( vector; vector )"
        },
        {
            "contents": "refract(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "refract\tvector refract( vector; vector; float )"
        },
        {
            "contents": "relbbox(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "relbbox\tvector relbbox( int; string; vector )"
        },
        {
            "contents": "relbbox(${1:int}, ${2:vector})",
            "trigger": "relbbox\tvector relbbox( int; vector )"
        },
        {
            "contents": "relbbox(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "relbbox\tvector relbbox( string; string; vector )"
        },
        {
            "contents": "relbbox(${1:string}, ${2:vector})",
            "trigger": "relbbox\tvector relbbox( string; vector )"
        },
        {
            "contents": "relbbox(${1:vector})",
            "trigger": "relbbox\tvector relbbox( vector )"
        },
        {
            "contents": "relpointbbox(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "relpointbbox\tvector relpointbbox( int; string; vector )"
        },
        {
            "contents": "relpointbbox(${1:int}, ${2:vector})",
            "trigger": "relpointbbox\tvector relpointbbox( int; vector )"
        },
        {
            "contents": "relpointbbox(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "relpointbbox\tvector relpointbbox( string; string; vector )"
        },
        {
            "contents": "relpointbbox(${1:string}, ${2:vector})",
            "trigger": "relpointbbox\tvector relpointbbox( string; vector )"
        },
        {
            "contents": "removeindex(${1:matrix2[] &}, ${2:int})",
            "trigger": "removeindex\tmatrix2 removeindex( matrix2[] &; int )"
        },
        {
            "contents": "removeindex(${1:matrix3[] &}, ${2:int})",
            "trigger": "removeindex\tmatrix3 removeindex( matrix3[] &; int )"
        },
        {
            "contents": "removeindex(${1:matrix[] &}, ${2:int})",
            "trigger": "removeindex\tmatrix removeindex( matrix[] &; int )"
        },
        {
            "contents": "removeindex(${1:float[] &}, ${2:int})",
            "trigger": "removeindex\tfloat removeindex( float[] &; int )"
        },
        {
            "contents": "removeindex(${1:int[] &}, ${2:int})",
            "trigger": "removeindex\tint removeindex( int[] &; int )"
        },
        {
            "contents": "removeindex(${1:vector4[] &}, ${2:int})",
            "trigger": "removeindex\tvector4 removeindex( vector4[] &; int )"
        },
        {
            "contents": "removeindex(${1:string[] &}, ${2:int})",
            "trigger": "removeindex\tstring removeindex( string[] &; int )"
        },
        {
            "contents": "removeindex(${1:vector2[] &}, ${2:int})",
            "trigger": "removeindex\tvector2 removeindex( vector2[] &; int )"
        },
        {
            "contents": "removeindex(${1:vector[] &}, ${2:int})",
            "trigger": "removeindex\tvector removeindex( vector[] &; int )"
        },
        {
            "contents": "removepoint(${1:int}, ${2:int})",
            "trigger": "removepoint\tint removepoint( int; int )"
        },
        {
            "contents": "removeprim(${1:int}, ${2:int}, ${3:int})",
            "trigger": "removeprim\tint removeprim( int; int; int )"
        },
        {
            "contents": "removevalue(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "removevalue\tint removevalue( matrix2[] &; matrix2 )"
        },
        {
            "contents": "removevalue(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "removevalue\tint removevalue( matrix3[] &; matrix3 )"
        },
        {
            "contents": "removevalue(${1:matrix[] &}, ${2:matrix})",
            "trigger": "removevalue\tint removevalue( matrix[] &; matrix )"
        },
        {
            "contents": "removevalue(${1:float[] &}, ${2:float})",
            "trigger": "removevalue\tint removevalue( float[] &; float )"
        },
        {
            "contents": "removevalue(${1:int[] &}, ${2:int})",
            "trigger": "removevalue\tint removevalue( int[] &; int )"
        },
        {
            "contents": "removevalue(${1:vector4[] &}, ${2:vector4})",
            "trigger": "removevalue\tint removevalue( vector4[] &; vector4 )"
        },
        {
            "contents": "removevalue(${1:string[] &}, ${2:string})",
            "trigger": "removevalue\tint removevalue( string[] &; string )"
        },
        {
            "contents": "removevalue(${1:vector2[] &}, ${2:vector2})",
            "trigger": "removevalue\tint removevalue( vector2[] &; vector2 )"
        },
        {
            "contents": "removevalue(${1:vector[] &}, ${2:vector})",
            "trigger": "removevalue\tint removevalue( vector[] &; vector )"
        },
        {
            "contents": "reorder(${1:string}, ${2:int[]})",
            "trigger": "reorder\tstring reorder( string; int[] )"
        },
        {
            "contents": "reorder(${1:matrix2[]}, ${2:int[]})",
            "trigger": "reorder\tmatrix2[] reorder( matrix2[]; int[] )"
        },
        {
            "contents": "reorder(${1:matrix3[]}, ${2:int[]})",
            "trigger": "reorder\tmatrix3[] reorder( matrix3[]; int[] )"
        },
        {
            "contents": "reorder(${1:matrix[]}, ${2:int[]})",
            "trigger": "reorder\tmatrix[] reorder( matrix[]; int[] )"
        },
        {
            "contents": "reorder(${1:float[]}, ${2:int[]})",
            "trigger": "reorder\tfloat[] reorder( float[]; int[] )"
        },
        {
            "contents": "reorder(${1:int[]}, ${2:int[]})",
            "trigger": "reorder\tint[] reorder( int[]; int[] )"
        },
        {
            "contents": "reorder(${1:vector4[]}, ${2:int[]})",
            "trigger": "reorder\tvector4[] reorder( vector4[]; int[] )"
        },
        {
            "contents": "reorder(${1:string[]}, ${2:int[]})",
            "trigger": "reorder\tstring[] reorder( string[]; int[] )"
        },
        {
            "contents": "reorder(${1:vector2[]}, ${2:int[]})",
            "trigger": "reorder\tvector2[] reorder( vector2[]; int[] )"
        },
        {
            "contents": "reorder(${1:vector[]}, ${2:int[]})",
            "trigger": "reorder\tvector[] reorder( vector[]; int[] )"
        },
        {
            "contents": "resize(${1:matrix2[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( matrix2[] &; int )"
        },
        {
            "contents": "resize(${1:matrix3[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( matrix3[] &; int )"
        },
        {
            "contents": "resize(${1:matrix[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( matrix[] &; int )"
        },
        {
            "contents": "resize(${1:bsdf[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( bsdf[] &; int )"
        },
        {
            "contents": "resize(${1:float[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( float[] &; int )"
        },
        {
            "contents": "resize(${1:int[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( int[] &; int )"
        },
        {
            "contents": "resize(${1:vector4[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( vector4[] &; int )"
        },
        {
            "contents": "resize(${1:string[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( string[] &; int )"
        },
        {
            "contents": "resize(${1:vector2[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( vector2[] &; int )"
        },
        {
            "contents": "resize(${1:vector[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( vector[] &; int )"
        },
        {
            "contents": "reverse(${1:string})",
            "trigger": "reverse\tstring reverse( string )"
        },
        {
            "contents": "reverse(${1:matrix2[]})",
            "trigger": "reverse\tmatrix2[] reverse( matrix2[] )"
        },
        {
            "contents": "reverse(${1:matrix3[]})",
            "trigger": "reverse\tmatrix3[] reverse( matrix3[] )"
        },
        {
            "contents": "reverse(${1:matrix[]})",
            "trigger": "reverse\tmatrix[] reverse( matrix[] )"
        },
        {
            "contents": "reverse(${1:float[]})",
            "trigger": "reverse\tfloat[] reverse( float[] )"
        },
        {
            "contents": "reverse(${1:int[]})",
            "trigger": "reverse\tint[] reverse( int[] )"
        },
        {
            "contents": "reverse(${1:vector4[]})",
            "trigger": "reverse\tvector4[] reverse( vector4[] )"
        },
        {
            "contents": "reverse(${1:string[]})",
            "trigger": "reverse\tstring[] reverse( string[] )"
        },
        {
            "contents": "reverse(${1:vector2[]})",
            "trigger": "reverse\tvector2[] reverse( vector2[] )"
        },
        {
            "contents": "reverse(${1:vector[]})",
            "trigger": "reverse\tvector[] reverse( vector[] )"
        },
        {
            "contents": "rgbtohsv(${1:float}, ${2:float}, ${3:float})",
            "trigger": "rgbtohsv\tvector rgbtohsv( float; float; float )"
        },
        {
            "contents": "rgbtohsv(${1:vector})",
            "trigger": "rgbtohsv\tvector rgbtohsv( vector )"
        },
        {
            "contents": "rgbtoxyz(${1:vector})",
            "trigger": "rgbtoxyz\tvector rgbtoxyz( vector )"
        },
        {
            "contents": "rint(${1:float})",
            "trigger": "rint\tfloat rint( float )"
        },
        {
            "contents": "rint(${1:vector4})",
            "trigger": "rint\tvector4 rint( vector4 )"
        },
        {
            "contents": "rint(${1:vector2})",
            "trigger": "rint\tvector2 rint( vector2 )"
        },
        {
            "contents": "rint(${1:vector})",
            "trigger": "rint\tvector rint( vector )"
        },
        {
            "contents": "rotate(${1:matrix2 &}, ${2:float})",
            "trigger": "rotate\tvoid rotate( matrix2 &; float )"
        },
        {
            "contents": "rotate(${1:matrix3 &}, ${2:float}, ${3:vector})",
            "trigger": "rotate\tvoid rotate( matrix3 &; float; vector )"
        },
        {
            "contents": "rotate(${1:matrix &}, ${2:float}, ${3:vector})",
            "trigger": "rotate\tvoid rotate( matrix &; float; vector )"
        },
        {
            "contents": "rotate_x_to(${1:vector4}, ${2:vector4})",
            "trigger": "rotate_x_to\tvector4 rotate_x_to( vector4; vector4 )"
        },
        {
            "contents": "rotate_x_to(${1:vector2}, ${2:vector2})",
            "trigger": "rotate_x_to\tvector2 rotate_x_to( vector2; vector2 )"
        },
        {
            "contents": "rotate_x_to(${1:vector}, ${2:vector})",
            "trigger": "rotate_x_to\tvector rotate_x_to( vector; vector )"
        },
        {
            "contents": "rstrip(${1:string})",
            "trigger": "rstrip\tstring rstrip( string )"
        },
        {
            "contents": "rstrip(${1:string}, ${2:string})",
            "trigger": "rstrip\tstring rstrip( string; string )"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float &}, ${6:int &}, ${7:float}, ${8:float}, ${9:int}, ${10:...})",
            "trigger": "sample_bsdf\tvoid sample_bsdf( bsdf; vector; vector &; vector &; float &; int &; float; float; int; ... )"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float &}, ${6:int &}, ${7:float}, ${8:float}, ${9:...})",
            "trigger": "sample_bsdf\tvoid sample_bsdf( bsdf; vector; vector &; vector &; float &; int &; float; float; ... )"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:int &}, ${6:float}, ${7:float}, ${8:int}, ${9:...})",
            "trigger": "sample_bsdf\tvoid sample_bsdf( bsdf; vector; vector &; vector &; int &; float; float; int; ... )"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:int &}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "sample_bsdf\tvoid sample_bsdf( bsdf; vector; vector &; vector &; int &; float; float; ... )"
        },
        {
            "contents": "sample_cauchy(${1:float})",
            "trigger": "sample_cauchy\tfloat sample_cauchy( float )"
        },
        {
            "contents": "sample_cauchy(${1:float}, ${2:float})",
            "trigger": "sample_cauchy\tfloat sample_cauchy( float; float )"
        },
        {
            "contents": "sample_cauchy(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "sample_cauchy\tfloat sample_cauchy( float; float; float; float )"
        },
        {
            "contents": "sample_cauchy(${1:vector4})",
            "trigger": "sample_cauchy\tvector4 sample_cauchy( vector4 )"
        },
        {
            "contents": "sample_cauchy(${1:float}, ${2:vector2})",
            "trigger": "sample_cauchy\tvector2 sample_cauchy( float; vector2 )"
        },
        {
            "contents": "sample_cauchy(${1:vector2})",
            "trigger": "sample_cauchy\tvector2 sample_cauchy( vector2 )"
        },
        {
            "contents": "sample_cauchy(${1:vector})",
            "trigger": "sample_cauchy\tvector sample_cauchy( vector )"
        },
        {
            "contents": "sample_circle_arc(${1:vector2}, ${2:float}, ${3:float})",
            "trigger": "sample_circle_arc\tvector2 sample_circle_arc( vector2; float; float )"
        },
        {
            "contents": "sample_circle_edge_uniform(${1:float})",
            "trigger": "sample_circle_edge_uniform\tvector2 sample_circle_edge_uniform( float )"
        },
        {
            "contents": "sample_circle_slice(${1:vector2}, ${2:float}, ${3:vector2})",
            "trigger": "sample_circle_slice\tvector2 sample_circle_slice( vector2; float; vector2 )"
        },
        {
            "contents": "sample_circle_uniform(${1:vector2})",
            "trigger": "sample_circle_uniform\tvector2 sample_circle_uniform( vector2 )"
        },
        {
            "contents": "sample_direction_cone(${1:vector}, ${2:float}, ${3:vector2})",
            "trigger": "sample_direction_cone\tvector sample_direction_cone( vector; float; vector2 )"
        },
        {
            "contents": "sample_direction_uniform(${1:vector2})",
            "trigger": "sample_direction_uniform\tvector sample_direction_uniform( vector2 )"
        },
        {
            "contents": "sample_discrete(${1:int}, ${2:float})",
            "trigger": "sample_discrete\tint sample_discrete( int; float )"
        },
        {
            "contents": "sample_discrete(${1:float[]}, ${2:float})",
            "trigger": "sample_discrete\tint sample_discrete( float[]; float )"
        },
        {
            "contents": "sample_exponential(${1:float})",
            "trigger": "sample_exponential\tfloat sample_exponential( float )"
        },
        {
            "contents": "sample_exponential(${1:float}, ${2:float})",
            "trigger": "sample_exponential\tfloat sample_exponential( float; float )"
        },
        {
            "contents": "sample_exponential(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_exponential\tfloat sample_exponential( float; float; float )"
        },
        {
            "contents": "sample_hemisphere(${1:float}, ${2:vector2})",
            "trigger": "sample_hemisphere\tvector sample_hemisphere( float; vector2 )"
        },
        {
            "contents": "sample_hemisphere(${1:vector2})",
            "trigger": "sample_hemisphere\tvector sample_hemisphere( vector2 )"
        },
        {
            "contents": "sample_hemisphere(${1:vector}, ${2:float}, ${3:vector2})",
            "trigger": "sample_hemisphere\tvector sample_hemisphere( vector; float; vector2 )"
        },
        {
            "contents": "sample_hemisphere(${1:vector}, ${2:vector2})",
            "trigger": "sample_hemisphere\tvector sample_hemisphere( vector; vector2 )"
        },
        {
            "contents": "sample_hypersphere_cone(${1:vector4}, ${2:float}, ${3:vector4})",
            "trigger": "sample_hypersphere_cone\tvector4 sample_hypersphere_cone( vector4; float; vector4 )"
        },
        {
            "contents": "sample_hypersphere_uniform(${1:vector4})",
            "trigger": "sample_hypersphere_uniform\tvector4 sample_hypersphere_uniform( vector4 )"
        },
        {
            "contents": "sample_lognormal(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_lognormal\tfloat sample_lognormal( float; float; float )"
        },
        {
            "contents": "sample_lognormal(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "sample_lognormal\tfloat sample_lognormal( float; float; float; float; float )"
        },
        {
            "contents": "sample_lognormal_by_median(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_lognormal_by_median\tfloat sample_lognormal_by_median( float; float; float )"
        },
        {
            "contents": "sample_lognormal_by_median(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "sample_lognormal_by_median\tfloat sample_lognormal_by_median( float; float; float; float; float )"
        },
        {
            "contents": "sample_normal(${1:float})",
            "trigger": "sample_normal\tfloat sample_normal( float )"
        },
        {
            "contents": "sample_normal(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_normal\tfloat sample_normal( float; float; float )"
        },
        {
            "contents": "sample_normal(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "sample_normal\tfloat sample_normal( float; float; float; float; float )"
        },
        {
            "contents": "sample_normal(${1:vector4})",
            "trigger": "sample_normal\tvector4 sample_normal( vector4 )"
        },
        {
            "contents": "sample_normal(${1:vector2})",
            "trigger": "sample_normal\tvector2 sample_normal( vector2 )"
        },
        {
            "contents": "sample_normal(${1:vector})",
            "trigger": "sample_normal\tvector sample_normal( vector )"
        },
        {
            "contents": "sample_orientation_cone(${1:vector4}, ${2:float}, ${3:vector})",
            "trigger": "sample_orientation_cone\tvector4 sample_orientation_cone( vector4; float; vector )"
        },
        {
            "contents": "sample_orientation_uniform(${1:vector})",
            "trigger": "sample_orientation_uniform\tvector4 sample_orientation_uniform( vector )"
        },
        {
            "contents": "sample_sphere_cone(${1:vector}, ${2:float}, ${3:vector})",
            "trigger": "sample_sphere_cone\tvector sample_sphere_cone( vector; float; vector )"
        },
        {
            "contents": "sample_sphere_uniform(${1:vector})",
            "trigger": "sample_sphere_uniform\tvector sample_sphere_uniform( vector )"
        },
        {
            "contents": "sampledisk(${1:float &}, ${2:float &}, ${3:float}, ${4:float})",
            "trigger": "sampledisk\tvoid sampledisk( float &; float &; float; float )"
        },
        {
            "contents": "scale(${1:matrix2 &}, ${2:vector2})",
            "trigger": "scale\tvoid scale( matrix2 &; vector2 )"
        },
        {
            "contents": "scale(${1:matrix3 &}, ${2:vector})",
            "trigger": "scale\tvoid scale( matrix3 &; vector )"
        },
        {
            "contents": "scale(${1:matrix &}, ${2:vector})",
            "trigger": "scale\tvoid scale( matrix &; vector )"
        },
        {
            "contents": "select(${1:int}, ${2:matrix2}, ${3:matrix2})",
            "trigger": "select\tmatrix2 select( int; matrix2; matrix2 )"
        },
        {
            "contents": "select(${1:int}, ${2:matrix3}, ${3:matrix3})",
            "trigger": "select\tmatrix3 select( int; matrix3; matrix3 )"
        },
        {
            "contents": "select(${1:int}, ${2:matrix}, ${3:matrix})",
            "trigger": "select\tmatrix select( int; matrix; matrix )"
        },
        {
            "contents": "select(${1:int}, ${2:bsdf}, ${3:bsdf})",
            "trigger": "select\tbsdf select( int; bsdf; bsdf )"
        },
        {
            "contents": "select(${1:int}, ${2:float}, ${3:float})",
            "trigger": "select\tfloat select( int; float; float )"
        },
        {
            "contents": "select(${1:int}, ${2:int}, ${3:int})",
            "trigger": "select\tint select( int; int; int )"
        },
        {
            "contents": "select(${1:int}, ${2:vector4}, ${3:vector4})",
            "trigger": "select\tvector4 select( int; vector4; vector4 )"
        },
        {
            "contents": "select(${1:int}, ${2:string}, ${3:string})",
            "trigger": "select\tstring select( int; string; string )"
        },
        {
            "contents": "select(${1:int}, ${2:vector2}, ${3:vector2})",
            "trigger": "select\tvector2 select( int; vector2; vector2 )"
        },
        {
            "contents": "select(${1:int}, ${2:vector}, ${3:vector})",
            "trigger": "select\tvector select( int; vector; vector )"
        },
        {
            "contents": "select(${1:int}, ${2:matrix2[]}, ${3:matrix2[]})",
            "trigger": "select\tmatrix2[] select( int; matrix2[]; matrix2[] )"
        },
        {
            "contents": "select(${1:int}, ${2:matrix3[]}, ${3:matrix3[]})",
            "trigger": "select\tmatrix3[] select( int; matrix3[]; matrix3[] )"
        },
        {
            "contents": "select(${1:int}, ${2:matrix[]}, ${3:matrix[]})",
            "trigger": "select\tmatrix[] select( int; matrix[]; matrix[] )"
        },
        {
            "contents": "select(${1:int}, ${2:bsdf[]}, ${3:bsdf[]})",
            "trigger": "select\tbsdf[] select( int; bsdf[]; bsdf[] )"
        },
        {
            "contents": "select(${1:int}, ${2:float[]}, ${3:float[]})",
            "trigger": "select\tfloat[] select( int; float[]; float[] )"
        },
        {
            "contents": "select(${1:int}, ${2:int[]}, ${3:int[]})",
            "trigger": "select\tint[] select( int; int[]; int[] )"
        },
        {
            "contents": "select(${1:int}, ${2:vector4[]}, ${3:vector4[]})",
            "trigger": "select\tvector4[] select( int; vector4[]; vector4[] )"
        },
        {
            "contents": "select(${1:int}, ${2:string[]}, ${3:string[]})",
            "trigger": "select\tstring[] select( int; string[]; string[] )"
        },
        {
            "contents": "select(${1:int}, ${2:vector2[]}, ${3:vector2[]})",
            "trigger": "select\tvector2[] select( int; vector2[]; vector2[] )"
        },
        {
            "contents": "select(${1:int}, ${2:vector[]}, ${3:vector[]})",
            "trigger": "select\tvector[] select( int; vector[]; vector[] )"
        },
        {
            "contents": "sensor_panorama_create(${1:float}, ${2:vector}, ${3:int}, ${4:float}, ${5:float}, ${6:string}, ${7:string}, ${8:string}, ${9:int})",
            "trigger": "sensor_panorama_create\tint sensor_panorama_create( float; vector; int; float; float; string; string; string; int )"
        },
        {
            "contents": "sensor_panorama_getcolor(${1:int}, ${2:vector})",
            "trigger": "sensor_panorama_getcolor\tvector sensor_panorama_getcolor( int; vector )"
        },
        {
            "contents": "sensor_panorama_getcone(${1:int}, ${2:vector}, ${3:float}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:float &}, ${9:vector &}, ${10:vector &}, ${11:float &})",
            "trigger": "sensor_panorama_getcone\tvoid sensor_panorama_getcone( int; vector; float; vector; vector; float; float; float &; vector &; vector &; float & )"
        },
        {
            "contents": "sensor_panorama_getdepth(${1:int}, ${2:vector})",
            "trigger": "sensor_panorama_getdepth\tfloat sensor_panorama_getdepth( int; vector )"
        },
        {
            "contents": "sensor_save(${1:int}, ${2:string}, ${3:string})",
            "trigger": "sensor_save\tint sensor_save( int; string; string )"
        },
        {
            "contents": "serialize(${1:matrix2[]})",
            "trigger": "serialize\tfloat[] serialize( matrix2[] )"
        },
        {
            "contents": "serialize(${1:matrix3[]})",
            "trigger": "serialize\tfloat[] serialize( matrix3[] )"
        },
        {
            "contents": "serialize(${1:matrix[]})",
            "trigger": "serialize\tfloat[] serialize( matrix[] )"
        },
        {
            "contents": "serialize(${1:vector4[]})",
            "trigger": "serialize\tfloat[] serialize( vector4[] )"
        },
        {
            "contents": "serialize(${1:vector2[]})",
            "trigger": "serialize\tfloat[] serialize( vector2[] )"
        },
        {
            "contents": "serialize(${1:vector[]})",
            "trigger": "serialize\tfloat[] serialize( vector[] )"
        },
        {
            "contents": "set(${1:matrix2})",
            "trigger": "set\tmatrix2 set( matrix2 )"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tmatrix2 set( matrix3 )"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tmatrix2 set( matrix )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tmatrix2 set( float )"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "set\tmatrix2 set( float; float; float; float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tmatrix2 set( int )"
        },
        {
            "contents": "set(${1:vector2}, ${2:vector2})",
            "trigger": "set\tmatrix2 set( vector2; vector2 )"
        },
        {
            "contents": "set(${1:matrix2})",
            "trigger": "set\tmatrix3 set( matrix2 )"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tmatrix3 set( matrix3 )"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tmatrix3 set( matrix )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tmatrix3 set( float )"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float})",
            "trigger": "set\tmatrix3 set( float; float; float; float; float; float; float; float; float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tmatrix3 set( int )"
        },
        {
            "contents": "set(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "set\tmatrix3 set( vector; vector; vector )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix3 set( float[] )"
        },
        {
            "contents": "set(${1:vector[]})",
            "trigger": "set\tmatrix3 set( vector[] )"
        },
        {
            "contents": "set(${1:matrix2})",
            "trigger": "set\tmatrix set( matrix2 )"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tmatrix set( matrix3 )"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tmatrix set( matrix )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tmatrix set( float )"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:float}, ${11:float}, ${12:float}, ${13:float}, ${14:float}, ${15:float}, ${16:float})",
            "trigger": "set\tmatrix set( float; float; float; float; float; float; float; float; float; float; float; float; float; float; float; float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tmatrix set( int )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix set( float[] )"
        },
        {
            "contents": "set(${1:vector4[]})",
            "trigger": "set\tmatrix set( vector4[] )"
        },
        {
            "contents": "set(${1:bsdf})",
            "trigger": "set\tbsdf set( bsdf )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tfloat set( float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tfloat set( int )"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tfloat set( vector4 )"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tfloat set( vector )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tfloat set( float[] )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tint set( float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tint set( int )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tvector4 set( float )"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "set\tvector4 set( float; float; float; float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tvector4 set( int )"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tvector4 set( vector4 )"
        },
        {
            "contents": "set(${1:vector2})",
            "trigger": "set\tvector4 set( vector2 )"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tvector4 set( vector )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector4 set( float[] )"
        },
        {
            "contents": "set(${1:string})",
            "trigger": "set\tstring set( string )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tvector2 set( float )"
        },
        {
            "contents": "set(${1:float}, ${2:float})",
            "trigger": "set\tvector2 set( float; float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tvector2 set( int )"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tvector2 set( vector4 )"
        },
        {
            "contents": "set(${1:vector2})",
            "trigger": "set\tvector2 set( vector2 )"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tvector2 set( vector )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tvector set( float )"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float})",
            "trigger": "set\tvector set( float; float; float )"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tvector set( int )"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tvector set( vector4 )"
        },
        {
            "contents": "set(${1:vector2})",
            "trigger": "set\tvector set( vector2 )"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tvector set( vector )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector set( float[] )"
        },
        {
            "contents": "set(${1:matrix2[]})",
            "trigger": "set\tmatrix2[] set( matrix2[] )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix2[] set( float[] )"
        },
        {
            "contents": "set(${1:matrix3[]})",
            "trigger": "set\tmatrix3[] set( matrix3[] )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix3[] set( float[] )"
        },
        {
            "contents": "set(${1:matrix[]})",
            "trigger": "set\tmatrix[] set( matrix[] )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix[] set( float[] )"
        },
        {
            "contents": "set(${1:bsdf[]})",
            "trigger": "set\tbsdf[] set( bsdf[] )"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tfloat[] set( matrix3 )"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tfloat[] set( matrix )"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tfloat[] set( float )"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tfloat[] set( vector4 )"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tfloat[] set( vector )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tfloat[] set( float[] )"
        },
        {
            "contents": "set(${1:int[]})",
            "trigger": "set\tfloat[] set( int[] )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tint[] set( float[] )"
        },
        {
            "contents": "set(${1:int[]})",
            "trigger": "set\tint[] set( int[] )"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tvector4[] set( matrix )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector4[] set( float[] )"
        },
        {
            "contents": "set(${1:vector4[]})",
            "trigger": "set\tvector4[] set( vector4[] )"
        },
        {
            "contents": "set(${1:string[]})",
            "trigger": "set\tstring[] set( string[] )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector2[] set( float[] )"
        },
        {
            "contents": "set(${1:vector2[]})",
            "trigger": "set\tvector2[] set( vector2[] )"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tvector[] set( matrix3 )"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector[] set( float[] )"
        },
        {
            "contents": "set(${1:vector[]})",
            "trigger": "set\tvector[] set( vector[] )"
        },
        {
            "contents": "setagentclipnames(${1:int}, ${2:int}, ${3:string[]})",
            "trigger": "setagentclipnames\tvoid setagentclipnames( int; int; string[] )"
        },
        {
            "contents": "setagentcliptimes(${1:int}, ${2:int}, ${3:float[]})",
            "trigger": "setagentcliptimes\tvoid setagentcliptimes( int; int; float[] )"
        },
        {
            "contents": "setagentclipweights(${1:int}, ${2:int}, ${3:float[]})",
            "trigger": "setagentclipweights\tvoid setagentclipweights( int; int; float[] )"
        },
        {
            "contents": "setagentcollisionlayer(${1:int}, ${2:int}, ${3:string})",
            "trigger": "setagentcollisionlayer\tvoid setagentcollisionlayer( int; int; string )"
        },
        {
            "contents": "setagentcurrentlayer(${1:int}, ${2:int}, ${3:string})",
            "trigger": "setagentcurrentlayer\tvoid setagentcurrentlayer( int; int; string )"
        },
        {
            "contents": "setagentlocaltransform(${1:int}, ${2:int}, ${3:matrix}, ${4:int})",
            "trigger": "setagentlocaltransform\tint setagentlocaltransform( int; int; matrix; int )"
        },
        {
            "contents": "setagentlocaltransforms(${1:int}, ${2:int}, ${3:matrix[]})",
            "trigger": "setagentlocaltransforms\tvoid setagentlocaltransforms( int; int; matrix[] )"
        },
        {
            "contents": "setagentworldtransform(${1:int}, ${2:int}, ${3:matrix}, ${4:int})",
            "trigger": "setagentworldtransform\tint setagentworldtransform( int; int; matrix; int )"
        },
        {
            "contents": "setagentworldtransforms(${1:int}, ${2:int}, ${3:matrix[]})",
            "trigger": "setagentworldtransforms\tvoid setagentworldtransforms( int; int; matrix[] )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix2}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; matrix2; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix3}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; matrix3; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; matrix; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:float}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; float; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; int; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector4}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; vector4; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:string}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; string; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector2}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; vector2; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; vector; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix2[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; matrix2[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix3[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; matrix3[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; matrix[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:float[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; float[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; int[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector4[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; vector4[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:string[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; string[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector2[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; vector2[]; string )"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector[]}, ${7:string})",
            "trigger": "setattrib\tint setattrib( int; string; string; int; int; vector[]; string )"
        },
        {
            "contents": "setattribtypeinfo(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "setattribtypeinfo\tint setattribtypeinfo( int; string; string; string )"
        },
        {
            "contents": "setcomp(${1:matrix2 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tvoid setcomp( matrix2 &; float; int; int )"
        },
        {
            "contents": "setcomp(${1:matrix2[] &}, ${2:matrix2}, ${3:int})",
            "trigger": "setcomp\tmatrix2 setcomp( matrix2[] &; matrix2; int )"
        },
        {
            "contents": "setcomp(${1:matrix3 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tvoid setcomp( matrix3 &; float; int; int )"
        },
        {
            "contents": "setcomp(${1:matrix3[] &}, ${2:matrix3}, ${3:int})",
            "trigger": "setcomp\tmatrix3 setcomp( matrix3[] &; matrix3; int )"
        },
        {
            "contents": "setcomp(${1:matrix &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tvoid setcomp( matrix &; float; int; int )"
        },
        {
            "contents": "setcomp(${1:matrix[] &}, ${2:matrix}, ${3:int})",
            "trigger": "setcomp\tmatrix setcomp( matrix[] &; matrix; int )"
        },
        {
            "contents": "setcomp(${1:bsdf[] &}, ${2:bsdf}, ${3:int})",
            "trigger": "setcomp\tbsdf setcomp( bsdf[] &; bsdf; int )"
        },
        {
            "contents": "setcomp(${1:matrix2 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tfloat setcomp( matrix2 &; float; int; int )"
        },
        {
            "contents": "setcomp(${1:matrix3 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tfloat setcomp( matrix3 &; float; int; int )"
        },
        {
            "contents": "setcomp(${1:matrix &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tfloat setcomp( matrix &; float; int; int )"
        },
        {
            "contents": "setcomp(${1:vector4 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat setcomp( vector4 &; float; int )"
        },
        {
            "contents": "setcomp(${1:vector2 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat setcomp( vector2 &; float; int )"
        },
        {
            "contents": "setcomp(${1:vector &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat setcomp( vector &; float; int )"
        },
        {
            "contents": "setcomp(${1:float[] &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat setcomp( float[] &; float; int )"
        },
        {
            "contents": "setcomp(${1:int[] &}, ${2:int}, ${3:int})",
            "trigger": "setcomp\tint setcomp( int[] &; int; int )"
        },
        {
            "contents": "setcomp(${1:vector4 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tvoid setcomp( vector4 &; float; int )"
        },
        {
            "contents": "setcomp(${1:vector4[] &}, ${2:vector4}, ${3:int})",
            "trigger": "setcomp\tvector4 setcomp( vector4[] &; vector4; int )"
        },
        {
            "contents": "setcomp(${1:string[] &}, ${2:string}, ${3:int})",
            "trigger": "setcomp\tstring setcomp( string[] &; string; int )"
        },
        {
            "contents": "setcomp(${1:vector2 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tvoid setcomp( vector2 &; float; int )"
        },
        {
            "contents": "setcomp(${1:vector2[] &}, ${2:vector2}, ${3:int})",
            "trigger": "setcomp\tvector2 setcomp( vector2[] &; vector2; int )"
        },
        {
            "contents": "setcomp(${1:vector &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tvoid setcomp( vector &; float; int )"
        },
        {
            "contents": "setcomp(${1:vector[] &}, ${2:vector}, ${3:int})",
            "trigger": "setcomp\tvector setcomp( vector[] &; vector; int )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix2 )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix2; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix3 )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix3; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; float )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; float; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; int )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; int; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector4 )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector4; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; string; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector2 )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector2; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix2[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix2[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix3[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix3[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; matrix[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; float[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; float[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; int[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; int[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector4[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector4[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; string[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; string[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector2[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector2[]; string )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector[]})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector[] )"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector[]}, ${4:string})",
            "trigger": "setdetailattrib\tint setdetailattrib( int; string; vector[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix2 )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix2; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix3 )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix3; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; float )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; float; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; int )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; int; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector4 )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector4; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; string; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector2 )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector2; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix2[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix2[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix3[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix3[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; matrix[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; float[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; float[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; int[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; int[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector4[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector4[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; string[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; string[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector2[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector2[]; string )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector[] )"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]}, ${5:string})",
            "trigger": "setpointattrib\tint setpointattrib( int; string; int; vector[]; string )"
        },
        {
            "contents": "setpointgroup(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setpointgroup\tint setpointgroup( int; string; int; int )"
        },
        {
            "contents": "setpointgroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setpointgroup\tint setpointgroup( int; string; int; int; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix2 )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix2; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix3 )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix3; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; float )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; float; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; int )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; int; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector4 )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector4; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; string; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector2 )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector2; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix2[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix2[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix3[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix3[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; matrix[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; float[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; float[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; int[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; int[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector4[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector4[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; string[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; string[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector2[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector2[]; string )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector[] )"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]}, ${5:string})",
            "trigger": "setprimattrib\tint setprimattrib( int; string; int; vector[]; string )"
        },
        {
            "contents": "setprimgroup(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setprimgroup\tint setprimgroup( int; string; int; int )"
        },
        {
            "contents": "setprimgroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setprimgroup\tint setprimgroup( int; string; int; int; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix2 )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix2; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix3 )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix3; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; float )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; float; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; int )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; int; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector4 )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector4; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; string; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector2 )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector2; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix2[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix2[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix3[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix3[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; matrix[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; float[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; float[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; int[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; int[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector4[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector4[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; string[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; string[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector2[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector2[]; string )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector[]})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector[] )"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint setprimintrinsic( int; string; int; vector[]; string )"
        },
        {
            "contents": "setprimvertex(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "setprimvertex\tint setprimvertex( int; int; int; int )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix2 )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix2; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix3 )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix3; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; float )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; float; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; int )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; int; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector4 )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector4; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; string; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector2 )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector2; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix2[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix2[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix3[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix3[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; matrix[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; float[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; float[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; int[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; int[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector4[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector4[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; string[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; string[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector2[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector2[]; string )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector[]})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector[] )"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector[]}, ${6:string})",
            "trigger": "setvertexattrib\tint setvertexattrib( int; string; int; int; vector[]; string )"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "shadowmap\tfloat shadowmap( string; vector; float; float; float; ... )"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "shadowmap\tvector shadowmap( string; vector; float; float; float; ... )"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:float}, ${9:...})",
            "trigger": "shadowmap\tvector shadowmap( string; vector; vector; vector; vector; float; float; float; ... )"
        },
        {
            "contents": "shl(${1:int}, ${2:int})",
            "trigger": "shl\tint shl( int; int )"
        },
        {
            "contents": "shr(${1:int}, ${2:int})",
            "trigger": "shr\tint shr( int; int )"
        },
        {
            "contents": "shrz(${1:int}, ${2:int})",
            "trigger": "shrz\tint shrz( int; int )"
        },
        {
            "contents": "sign(${1:float})",
            "trigger": "sign\tfloat sign( float )"
        },
        {
            "contents": "sign(${1:int})",
            "trigger": "sign\tint sign( int )"
        },
        {
            "contents": "sign(${1:vector4})",
            "trigger": "sign\tvector4 sign( vector4 )"
        },
        {
            "contents": "sign(${1:vector2})",
            "trigger": "sign\tvector2 sign( vector2 )"
        },
        {
            "contents": "sign(${1:vector})",
            "trigger": "sign\tvector sign( vector )"
        },
        {
            "contents": "sin(${1:float})",
            "trigger": "sin\tfloat sin( float )"
        },
        {
            "contents": "sin(${1:vector4})",
            "trigger": "sin\tvector4 sin( vector4 )"
        },
        {
            "contents": "sin(${1:vector2})",
            "trigger": "sin\tvector2 sin( vector2 )"
        },
        {
            "contents": "sin(${1:vector})",
            "trigger": "sin\tvector sin( vector )"
        },
        {
            "contents": "sinh(${1:float})",
            "trigger": "sinh\tfloat sinh( float )"
        },
        {
            "contents": "sinh(${1:vector4})",
            "trigger": "sinh\tvector4 sinh( vector4 )"
        },
        {
            "contents": "sinh(${1:vector2})",
            "trigger": "sinh\tvector2 sinh( vector2 )"
        },
        {
            "contents": "sinh(${1:vector})",
            "trigger": "sinh\tvector sinh( vector )"
        },
        {
            "contents": "sleep(${1:int})",
            "trigger": "sleep\tvoid sleep( int )"
        },
        {
            "contents": "slerp(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "slerp\tvector4 slerp( vector4; vector4; float )"
        },
        {
            "contents": "slice(${1:string}, ${2:int}, ${3:int})",
            "trigger": "slice\tstring slice( string; int; int )"
        },
        {
            "contents": "slice(${1:string}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tstring slice( string; int; int; int )"
        },
        {
            "contents": "slice(${1:string}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tstring slice( string; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:matrix2[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tmatrix2[] slice( matrix2[]; int; int )"
        },
        {
            "contents": "slice(${1:matrix2[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tmatrix2[] slice( matrix2[]; int; int; int )"
        },
        {
            "contents": "slice(${1:matrix2[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tmatrix2[] slice( matrix2[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:matrix3[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tmatrix3[] slice( matrix3[]; int; int )"
        },
        {
            "contents": "slice(${1:matrix3[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tmatrix3[] slice( matrix3[]; int; int; int )"
        },
        {
            "contents": "slice(${1:matrix3[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tmatrix3[] slice( matrix3[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:matrix[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tmatrix[] slice( matrix[]; int; int )"
        },
        {
            "contents": "slice(${1:matrix[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tmatrix[] slice( matrix[]; int; int; int )"
        },
        {
            "contents": "slice(${1:matrix[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tmatrix[] slice( matrix[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:float[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tfloat[] slice( float[]; int; int )"
        },
        {
            "contents": "slice(${1:float[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tfloat[] slice( float[]; int; int; int )"
        },
        {
            "contents": "slice(${1:float[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tfloat[] slice( float[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:int[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tint[] slice( int[]; int; int )"
        },
        {
            "contents": "slice(${1:int[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tint[] slice( int[]; int; int; int )"
        },
        {
            "contents": "slice(${1:int[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tint[] slice( int[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:vector4[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tvector4[] slice( vector4[]; int; int )"
        },
        {
            "contents": "slice(${1:vector4[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tvector4[] slice( vector4[]; int; int; int )"
        },
        {
            "contents": "slice(${1:vector4[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tvector4[] slice( vector4[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:string[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tstring[] slice( string[]; int; int )"
        },
        {
            "contents": "slice(${1:string[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tstring[] slice( string[]; int; int; int )"
        },
        {
            "contents": "slice(${1:string[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tstring[] slice( string[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:vector2[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tvector2[] slice( vector2[]; int; int )"
        },
        {
            "contents": "slice(${1:vector2[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tvector2[] slice( vector2[]; int; int; int )"
        },
        {
            "contents": "slice(${1:vector2[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tvector2[] slice( vector2[]; int; int; int; int; int; int )"
        },
        {
            "contents": "slice(${1:vector[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tvector[] slice( vector[]; int; int )"
        },
        {
            "contents": "slice(${1:vector[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tvector[] slice( vector[]; int; int; int )"
        },
        {
            "contents": "slice(${1:vector[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tvector[] slice( vector[]; int; int; int; int; int; int )"
        },
        {
            "contents": "smooth(${1:float}, ${2:float}, ${3:float})",
            "trigger": "smooth\tfloat smooth( float; float; float )"
        },
        {
            "contents": "smooth(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "smooth\tfloat smooth( float; float; float; float )"
        },
        {
            "contents": "snoise(${1:vector})",
            "trigger": "snoise\tfloat snoise( vector )"
        },
        {
            "contents": "snoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "snoise\tfloat snoise( vector; int; float; float )"
        },
        {
            "contents": "snoise(${1:vector})",
            "trigger": "snoise\tvector snoise( vector )"
        },
        {
            "contents": "snoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "snoise\tvector snoise( vector; int; float; float )"
        },
        {
            "contents": "solvecubic(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float &}, ${6:float &}, ${7:float &})",
            "trigger": "solvecubic\tint solvecubic( float; float; float; float; float &; float &; float & )"
        },
        {
            "contents": "solvecubic(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:vector2 &}, ${6:vector2 &}, ${7:vector2 &})",
            "trigger": "solvecubic\tint solvecubic( float; float; float; float; vector2 &; vector2 &; vector2 & )"
        },
        {
            "contents": "solvepoly(${1:float[]}, ${2:float[] &})",
            "trigger": "solvepoly\tint solvepoly( float[]; float[] & )"
        },
        {
            "contents": "solvepoly(${1:float[]}, ${2:float[] &}, ${3:int})",
            "trigger": "solvepoly\tint solvepoly( float[]; float[] &; int )"
        },
        {
            "contents": "solvequadratic(${1:float}, ${2:float}, ${3:float}, ${4:float &}, ${5:float &})",
            "trigger": "solvequadratic\tint solvequadratic( float; float; float; float &; float & )"
        },
        {
            "contents": "solvequadratic(${1:float}, ${2:float}, ${3:float}, ${4:vector2 &}, ${5:vector2 &})",
            "trigger": "solvequadratic\tint solvequadratic( float; float; float; vector2 &; vector2 & )"
        },
        {
            "contents": "sort(${1:float[]})",
            "trigger": "sort\tfloat[] sort( float[] )"
        },
        {
            "contents": "sort(${1:int[]})",
            "trigger": "sort\tint[] sort( int[] )"
        },
        {
            "contents": "sort(${1:string[]})",
            "trigger": "sort\tstring[] sort( string[] )"
        },
        {
            "contents": "specular(${1:vector}, ${2:...})",
            "trigger": "specular\tbsdf specular( vector; ... )"
        },
        {
            "contents": "specularBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "specularBRDF\tfloat specularBRDF( vector; vector; vector; float )"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "spline\tfloat spline( string; float; float; ... )"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:float[]}, ${4:...})",
            "trigger": "spline\tfloat spline( string; float; float[]; ... )"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:float[]}, ${4:...})",
            "trigger": "spline\tfloat spline( string[]; float; float[]; ... )"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:float[]}, ${4:float[]}, ${5:...})",
            "trigger": "spline\tfloat spline( string[]; float; float[]; float[]; ... )"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector4}, ${4:...})",
            "trigger": "spline\tvector4 spline( string; float; vector4; ... )"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector4[]}, ${4:...})",
            "trigger": "spline\tvector4 spline( string; float; vector4[]; ... )"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector4[]}, ${4:...})",
            "trigger": "spline\tvector4 spline( string[]; float; vector4[]; ... )"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector4[]}, ${4:float[]}, ${5:...})",
            "trigger": "spline\tvector4 spline( string[]; float; vector4[]; float[]; ... )"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector}, ${4:...})",
            "trigger": "spline\tvector spline( string; float; vector; ... )"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector[]}, ${4:...})",
            "trigger": "spline\tvector spline( string; float; vector[]; ... )"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector[]}, ${4:...})",
            "trigger": "spline\tvector spline( string[]; float; vector[]; ... )"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector[]}, ${4:float[]}, ${5:...})",
            "trigger": "spline\tvector spline( string[]; float; vector[]; float[]; ... )"
        },
        {
            "contents": "split(${1:bsdf})",
            "trigger": "split\tbsdf[] split( bsdf )"
        },
        {
            "contents": "split(${1:string})",
            "trigger": "split\tstring[] split( string )"
        },
        {
            "contents": "split(${1:string}, ${2:string})",
            "trigger": "split\tstring[] split( string; string )"
        },
        {
            "contents": "split(${1:string}, ${2:string}, ${3:int})",
            "trigger": "split\tstring[] split( string; string; int )"
        },
        {
            "contents": "sprintf(${1:string}, ${2:...})",
            "trigger": "sprintf\tstring sprintf( string; ... )"
        },
        {
            "contents": "sqrt(${1:float})",
            "trigger": "sqrt\tfloat sqrt( float )"
        },
        {
            "contents": "sqrt(${1:vector4})",
            "trigger": "sqrt\tvector4 sqrt( vector4 )"
        },
        {
            "contents": "sqrt(${1:vector2})",
            "trigger": "sqrt\tvector2 sqrt( vector2 )"
        },
        {
            "contents": "sqrt(${1:vector})",
            "trigger": "sqrt\tvector sqrt( vector )"
        },
        {
            "contents": "startswith(${1:string}, ${2:string})",
            "trigger": "startswith\tint startswith( string; string )"
        },
        {
            "contents": "strip(${1:string})",
            "trigger": "strip\tstring strip( string )"
        },
        {
            "contents": "strip(${1:string}, ${2:string})",
            "trigger": "strip\tstring strip( string; string )"
        },
        {
            "contents": "strlen(${1:string})",
            "trigger": "strlen\tint strlen( string )"
        },
        {
            "contents": "switch(${1:bsdf}, ${2:bsdf})",
            "trigger": "switch\tbsdf switch( bsdf; bsdf )"
        },
        {
            "contents": "swizzle(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "swizzle\tvector4 swizzle( vector4; int; int; int; int )"
        },
        {
            "contents": "swizzle(${1:vector2}, ${2:int}, ${3:int})",
            "trigger": "swizzle\tvector2 swizzle( vector2; int; int )"
        },
        {
            "contents": "swizzle(${1:vector}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "swizzle\tvector swizzle( vector; int; int; int )"
        },
        {
            "contents": "tan(${1:float})",
            "trigger": "tan\tfloat tan( float )"
        },
        {
            "contents": "tan(${1:vector4})",
            "trigger": "tan\tvector4 tan( vector4 )"
        },
        {
            "contents": "tan(${1:vector2})",
            "trigger": "tan\tvector2 tan( vector2 )"
        },
        {
            "contents": "tan(${1:vector})",
            "trigger": "tan\tvector tan( vector )"
        },
        {
            "contents": "tanh(${1:float})",
            "trigger": "tanh\tfloat tanh( float )"
        },
        {
            "contents": "tanh(${1:vector4})",
            "trigger": "tanh\tvector4 tanh( vector4 )"
        },
        {
            "contents": "tanh(${1:vector2})",
            "trigger": "tanh\tvector2 tanh( vector2 )"
        },
        {
            "contents": "tanh(${1:vector})",
            "trigger": "tanh\tvector tanh( vector )"
        },
        {
            "contents": "tet_adjacent(${1:int}, ${2:int}, ${3:int})",
            "trigger": "tet_adjacent\tint tet_adjacent( int; int; int )"
        },
        {
            "contents": "tet_adjacent(${1:string}, ${2:int}, ${3:int})",
            "trigger": "tet_adjacent\tint tet_adjacent( string; int; int )"
        },
        {
            "contents": "tet_faceindex(${1:int}, ${2:int})",
            "trigger": "tet_faceindex\tint tet_faceindex( int; int )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:matrix3 &})",
            "trigger": "teximport\tint teximport( string; string; matrix3 & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:matrix &})",
            "trigger": "teximport\tint teximport( string; string; matrix & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:float &})",
            "trigger": "teximport\tint teximport( string; string; float & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:int &})",
            "trigger": "teximport\tint teximport( string; string; int & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:vector4 &})",
            "trigger": "teximport\tint teximport( string; string; vector4 & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:string &})",
            "trigger": "teximport\tint teximport( string; string; string & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:vector &})",
            "trigger": "teximport\tint teximport( string; string; vector & )"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:string[] &})",
            "trigger": "teximport\tint teximport( string; string; string[] & )"
        },
        {
            "contents": "texprintf(${1:float}, ${2:float}, ${3:string}, ${4:...})",
            "trigger": "texprintf\tstring texprintf( float; float; string; ... )"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "texture\tvector4 texture( string; float; float; ... )"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:...})",
            "trigger": "texture\tvector4 texture( string; float; float; float; float; float; float; float; float; ... )"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "texture\tvector texture( string; float; float; ... )"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:...})",
            "trigger": "texture\tvector texture( string; float; float; float; float; float; float; float; float; ... )"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tmatrix3 texture3d( string; string; vector; ... )"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tmatrix texture3d( string; string; vector; ... )"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tfloat texture3d( string; string; vector; ... )"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tvector4 texture3d( string; string; vector; ... )"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tvector texture3d( string; string; vector; ... )"
        },
        {
            "contents": "texture3dBox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &}, ${5:...})",
            "trigger": "texture3dBox\tvoid texture3dBox( string; string; vector &; vector &; ... )"
        },
        {
            "contents": "titlecase(${1:string})",
            "trigger": "titlecase\tstring titlecase( string )"
        },
        {
            "contents": "toNDC(${1:string}, ${2:vector})",
            "trigger": "toNDC\tvector toNDC( string; vector )"
        },
        {
            "contents": "toNDC(${1:vector})",
            "trigger": "toNDC\tvector toNDC( vector )"
        },
        {
            "contents": "tolower(${1:string})",
            "trigger": "tolower\tstring tolower( string )"
        },
        {
            "contents": "toupper(${1:string})",
            "trigger": "toupper\tstring toupper( string )"
        },
        {
            "contents": "translate(${1:matrix &}, ${2:vector4})",
            "trigger": "translate\tvoid translate( matrix &; vector4 )"
        },
        {
            "contents": "translate(${1:matrix &}, ${2:vector})",
            "trigger": "translate\tvoid translate( matrix &; vector )"
        },
        {
            "contents": "translucent(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "translucent\tbsdf translucent( vector; vector; ... )"
        },
        {
            "contents": "transpose(${1:matrix2 &})",
            "trigger": "transpose\tvoid transpose( matrix2 & )"
        },
        {
            "contents": "transpose(${1:matrix2})",
            "trigger": "transpose\tmatrix2 transpose( matrix2 )"
        },
        {
            "contents": "transpose(${1:matrix3 &})",
            "trigger": "transpose\tvoid transpose( matrix3 & )"
        },
        {
            "contents": "transpose(${1:matrix3})",
            "trigger": "transpose\tmatrix3 transpose( matrix3 )"
        },
        {
            "contents": "transpose(${1:matrix &})",
            "trigger": "transpose\tvoid transpose( matrix & )"
        },
        {
            "contents": "transpose(${1:matrix})",
            "trigger": "transpose\tmatrix transpose( matrix )"
        },
        {
            "contents": "trunc(${1:float})",
            "trigger": "trunc\tfloat trunc( float )"
        },
        {
            "contents": "trunc(${1:vector4})",
            "trigger": "trunc\tvector4 trunc( vector4 )"
        },
        {
            "contents": "trunc(${1:vector2})",
            "trigger": "trunc\tvector2 trunc( vector2 )"
        },
        {
            "contents": "trunc(${1:vector})",
            "trigger": "trunc\tvector trunc( vector )"
        },
        {
            "contents": "tw_nspace(${1:vector})",
            "trigger": "tw_nspace\tvector tw_nspace( vector )"
        },
        {
            "contents": "tw_space()",
            "trigger": "tw_space\tmatrix tw_space( void )"
        },
        {
            "contents": "tw_space(${1:vector4})",
            "trigger": "tw_space\tvector4 tw_space( vector4 )"
        },
        {
            "contents": "tw_space(${1:vector})",
            "trigger": "tw_space\tvector tw_space( vector )"
        },
        {
            "contents": "tw_vspace(${1:vector})",
            "trigger": "tw_vspace\tvector tw_vspace( vector )"
        },
        {
            "contents": "uniqueval(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tint uniqueval( int; string; string; int )"
        },
        {
            "contents": "uniqueval(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tint uniqueval( string; string; string; int )"
        },
        {
            "contents": "uniqueval(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tstring uniqueval( int; string; string; int )"
        },
        {
            "contents": "uniqueval(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tstring uniqueval( string; string; string; int )"
        },
        {
            "contents": "unpack_intfromsafefloat(${1:float})",
            "trigger": "unpack_intfromsafefloat\tint unpack_intfromsafefloat( float )"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tmatrix2[] unserialize( float[] )"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tmatrix3[] unserialize( float[] )"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tmatrix[] unserialize( float[] )"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tvector4[] unserialize( float[] )"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tvector2[] unserialize( float[] )"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tvector[] unserialize( float[] )"
        },
        {
            "contents": "upush(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "upush\tvoid upush( matrix2[] &; matrix2 )"
        },
        {
            "contents": "upush(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "upush\tvoid upush( matrix3[] &; matrix3 )"
        },
        {
            "contents": "upush(${1:matrix[] &}, ${2:matrix})",
            "trigger": "upush\tvoid upush( matrix[] &; matrix )"
        },
        {
            "contents": "upush(${1:bsdf[] &}, ${2:bsdf})",
            "trigger": "upush\tvoid upush( bsdf[] &; bsdf )"
        },
        {
            "contents": "upush(${1:float[] &}, ${2:float})",
            "trigger": "upush\tvoid upush( float[] &; float )"
        },
        {
            "contents": "upush(${1:int[] &}, ${2:int})",
            "trigger": "upush\tvoid upush( int[] &; int )"
        },
        {
            "contents": "upush(${1:vector4[] &}, ${2:vector4})",
            "trigger": "upush\tvoid upush( vector4[] &; vector4 )"
        },
        {
            "contents": "upush(${1:string[] &}, ${2:string})",
            "trigger": "upush\tvoid upush( string[] &; string )"
        },
        {
            "contents": "upush(${1:vector2[] &}, ${2:vector2})",
            "trigger": "upush\tvoid upush( vector2[] &; vector2 )"
        },
        {
            "contents": "upush(${1:vector[] &}, ${2:vector})",
            "trigger": "upush\tvoid upush( vector[] &; vector )"
        },
        {
            "contents": "variance(${1:float}, ${2:float &}, ${3:int &})",
            "trigger": "variance\tfloat variance( float; float &; int & )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2 vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2 vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2 vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2 vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3 vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3 vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3 vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3 vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4 vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4 vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4 vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4 vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2 vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2 vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2 vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2 vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector vertex( string; string; int; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2[] vertex( string; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector[] vertex( int; string; int )"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector[] vertex( int; string; int; int )"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector[] vertex( string; string; int )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2 vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2 vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3 vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3 vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4 vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4 vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2 vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2 vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector[] vertexattrib( int; string; int; int & )"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector[] vertexattrib( string; string; int; int & )"
        },
        {
            "contents": "vertexattribsize(${1:int}, ${2:string})",
            "trigger": "vertexattribsize\tint vertexattribsize( int; string )"
        },
        {
            "contents": "vertexattribsize(${1:string}, ${2:string})",
            "trigger": "vertexattribsize\tint vertexattribsize( string; string )"
        },
        {
            "contents": "vertexattribtype(${1:int}, ${2:string})",
            "trigger": "vertexattribtype\tint vertexattribtype( int; string )"
        },
        {
            "contents": "vertexattribtype(${1:string}, ${2:string})",
            "trigger": "vertexattribtype\tint vertexattribtype( string; string )"
        },
        {
            "contents": "vertexattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "vertexattribtypeinfo\tstring vertexattribtypeinfo( int; string )"
        },
        {
            "contents": "vertexattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "vertexattribtypeinfo\tstring vertexattribtypeinfo( string; string )"
        },
        {
            "contents": "vertexhedge(${1:int}, ${2:int})",
            "trigger": "vertexhedge\tint vertexhedge( int; int )"
        },
        {
            "contents": "vertexhedge(${1:string}, ${2:int})",
            "trigger": "vertexhedge\tint vertexhedge( string; int )"
        },
        {
            "contents": "vertexindex(${1:int}, ${2:int}, ${3:int})",
            "trigger": "vertexindex\tint vertexindex( int; int; int )"
        },
        {
            "contents": "vertexindex(${1:string}, ${2:int}, ${3:int})",
            "trigger": "vertexindex\tint vertexindex( string; int; int )"
        },
        {
            "contents": "vertexnext(${1:int}, ${2:int})",
            "trigger": "vertexnext\tint vertexnext( int; int )"
        },
        {
            "contents": "vertexnext(${1:string}, ${2:int})",
            "trigger": "vertexnext\tint vertexnext( string; int )"
        },
        {
            "contents": "vertexpoint(${1:int}, ${2:int})",
            "trigger": "vertexpoint\tint vertexpoint( int; int )"
        },
        {
            "contents": "vertexpoint(${1:string}, ${2:int})",
            "trigger": "vertexpoint\tint vertexpoint( string; int )"
        },
        {
            "contents": "vertexprev(${1:int}, ${2:int})",
            "trigger": "vertexprev\tint vertexprev( int; int )"
        },
        {
            "contents": "vertexprev(${1:string}, ${2:int})",
            "trigger": "vertexprev\tint vertexprev( string; int )"
        },
        {
            "contents": "vertexprim(${1:int}, ${2:int})",
            "trigger": "vertexprim\tint vertexprim( int; int )"
        },
        {
            "contents": "vertexprim(${1:string}, ${2:int})",
            "trigger": "vertexprim\tint vertexprim( string; int )"
        },
        {
            "contents": "vertexprimindex(${1:int}, ${2:int})",
            "trigger": "vertexprimindex\tint vertexprimindex( int; int )"
        },
        {
            "contents": "vertexprimindex(${1:string}, ${2:int})",
            "trigger": "vertexprimindex\tint vertexprimindex( string; int )"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:float &}, ${11:float &})",
            "trigger": "vnoise\tvoid vnoise( float; float; float; float; int &; float &; float &; float &; float &; float &; float & )"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:float &}, ${11:float &}, ${12:int}, ${13:int})",
            "trigger": "vnoise\tvoid vnoise( float; float; float; float; int &; float &; float &; float &; float &; float &; float &; int; int )"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &})",
            "trigger": "vnoise\tvoid vnoise( float; float; int &; float &; float &; float &; float & )"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:int})",
            "trigger": "vnoise\tvoid vnoise( float; float; int &; float &; float &; float &; float &; int )"
        },
        {
            "contents": "vnoise(${1:vector4}, ${2:vector4}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector4 &}, ${7:vector4 &})",
            "trigger": "vnoise\tvoid vnoise( vector4; vector4; int &; float &; float &; vector4 &; vector4 & )"
        },
        {
            "contents": "vnoise(${1:vector4}, ${2:vector4}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector4 &}, ${7:vector4 &}, ${8:int}, ${9:int}, ${10:int}, ${11:int})",
            "trigger": "vnoise\tvoid vnoise( vector4; vector4; int &; float &; float &; vector4 &; vector4 &; int; int; int; int )"
        },
        {
            "contents": "vnoise(${1:vector4}, ${2:vector4}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector4 &}, ${7:vector4 &}, ${8:vector4})",
            "trigger": "vnoise\tvoid vnoise( vector4; vector4; int &; float &; float &; vector4 &; vector4 &; vector4 )"
        },
        {
            "contents": "vnoise(${1:vector}, ${2:vector}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &})",
            "trigger": "vnoise\tvoid vnoise( vector; vector; int &; float &; float &; vector &; vector & )"
        },
        {
            "contents": "vnoise(${1:vector}, ${2:vector}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &}, ${8:int}, ${9:int}, ${10:int})",
            "trigger": "vnoise\tvoid vnoise( vector; vector; int &; float &; float &; vector &; vector &; int; int; int )"
        },
        {
            "contents": "vnoise(${1:vector}, ${2:vector}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &}, ${8:vector})",
            "trigger": "vnoise\tvoid vnoise( vector; vector; int &; float &; float &; vector &; vector &; vector )"
        },
        {
            "contents": "volume(${1:vector}, ${2:...})",
            "trigger": "volume\tfloat volume( vector; ... )"
        },
        {
            "contents": "volumegradient(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumegradient\tvector volumegradient( int; int; vector )"
        },
        {
            "contents": "volumegradient(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumegradient\tvector volumegradient( int; string; vector )"
        },
        {
            "contents": "volumegradient(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumegradient\tvector volumegradient( string; int; vector )"
        },
        {
            "contents": "volumegradient(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumegradient\tvector volumegradient( string; string; vector )"
        },
        {
            "contents": "volumeindex(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumeindex\tfloat volumeindex( int; int; vector )"
        },
        {
            "contents": "volumeindex(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumeindex\tfloat volumeindex( int; string; vector )"
        },
        {
            "contents": "volumeindex(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumeindex\tfloat volumeindex( string; int; vector )"
        },
        {
            "contents": "volumeindex(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumeindex\tfloat volumeindex( string; string; vector )"
        },
        {
            "contents": "volumeindexorigin(${1:int}, ${2:int})",
            "trigger": "volumeindexorigin\tvector volumeindexorigin( int; int )"
        },
        {
            "contents": "volumeindexorigin(${1:int}, ${2:string})",
            "trigger": "volumeindexorigin\tvector volumeindexorigin( int; string )"
        },
        {
            "contents": "volumeindexorigin(${1:string}, ${2:int})",
            "trigger": "volumeindexorigin\tvector volumeindexorigin( string; int )"
        },
        {
            "contents": "volumeindexorigin(${1:string}, ${2:string})",
            "trigger": "volumeindexorigin\tvector volumeindexorigin( string; string )"
        },
        {
            "contents": "volumeindextopos(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumeindextopos\tvector volumeindextopos( int; int; vector )"
        },
        {
            "contents": "volumeindextopos(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumeindextopos\tvector volumeindextopos( int; string; vector )"
        },
        {
            "contents": "volumeindextopos(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumeindextopos\tvector volumeindextopos( string; int; vector )"
        },
        {
            "contents": "volumeindextopos(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumeindextopos\tvector volumeindextopos( string; string; vector )"
        },
        {
            "contents": "volumeindexv(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumeindexv\tvector volumeindexv( int; int; vector )"
        },
        {
            "contents": "volumeindexv(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumeindexv\tvector volumeindexv( int; string; vector )"
        },
        {
            "contents": "volumeindexv(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumeindexv\tvector volumeindexv( string; int; vector )"
        },
        {
            "contents": "volumeindexv(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumeindexv\tvector volumeindexv( string; string; vector )"
        },
        {
            "contents": "volumepostoindex(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumepostoindex\tvector volumepostoindex( int; int; vector )"
        },
        {
            "contents": "volumepostoindex(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumepostoindex\tvector volumepostoindex( int; string; vector )"
        },
        {
            "contents": "volumepostoindex(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumepostoindex\tvector volumepostoindex( string; int; vector )"
        },
        {
            "contents": "volumepostoindex(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumepostoindex\tvector volumepostoindex( string; string; vector )"
        },
        {
            "contents": "volumeres(${1:int}, ${2:int})",
            "trigger": "volumeres\tvector volumeres( int; int )"
        },
        {
            "contents": "volumeres(${1:int}, ${2:string})",
            "trigger": "volumeres\tvector volumeres( int; string )"
        },
        {
            "contents": "volumeres(${1:string}, ${2:int})",
            "trigger": "volumeres\tvector volumeres( string; int )"
        },
        {
            "contents": "volumeres(${1:string}, ${2:string})",
            "trigger": "volumeres\tvector volumeres( string; string )"
        },
        {
            "contents": "volumesample(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumesample\tfloat volumesample( int; int; vector )"
        },
        {
            "contents": "volumesample(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumesample\tfloat volumesample( int; string; vector )"
        },
        {
            "contents": "volumesample(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumesample\tfloat volumesample( string; int; vector )"
        },
        {
            "contents": "volumesample(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumesample\tfloat volumesample( string; string; vector )"
        },
        {
            "contents": "volumesamplev(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumesamplev\tvector volumesamplev( int; int; vector )"
        },
        {
            "contents": "volumesamplev(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumesamplev\tvector volumesamplev( int; string; vector )"
        },
        {
            "contents": "volumesamplev(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumesamplev\tvector volumesamplev( string; int; vector )"
        },
        {
            "contents": "volumesamplev(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumesamplev\tvector volumesamplev( string; string; vector )"
        },
        {
            "contents": "vtransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "vtransform\tvector vtransform( string; string; vector )"
        },
        {
            "contents": "vtransform(${1:string}, ${2:vector})",
            "trigger": "vtransform\tvector vtransform( string; vector )"
        },
        {
            "contents": "vtransform(${1:vector}, ${2:matrix})",
            "trigger": "vtransform\tvector vtransform( vector; matrix )"
        },
        {
            "contents": "wireblinn(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "wireblinn\tbsdf wireblinn( vector; float; ... )"
        },
        {
            "contents": "wirediffuse(${1:vector}, ${2:...})",
            "trigger": "wirediffuse\tbsdf wirediffuse( vector; ... )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &})",
            "trigger": "wnoise\tvoid wnoise( float; float; int &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &})",
            "trigger": "wnoise\tvoid wnoise( float; float; int &; float &; float &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:int}, ${9:int})",
            "trigger": "wnoise\tvoid wnoise( float; float; int &; float &; float &; float &; float &; int; int )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:int}, ${7:int})",
            "trigger": "wnoise\tvoid wnoise( float; float; int &; float &; float &; int; int )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &})",
            "trigger": "wnoise\tvoid wnoise( float; int &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "wnoise\tvoid wnoise( float; int &; float &; float &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:int})",
            "trigger": "wnoise\tvoid wnoise( float; int &; float &; float &; float &; float &; int )"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:int})",
            "trigger": "wnoise\tvoid wnoise( float; int &; float &; float &; int )"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &})",
            "trigger": "wnoise\tvoid wnoise( vector4; int &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "wnoise\tvoid wnoise( vector4; int &; float &; float &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:int}, ${8:int}, ${9:int}, ${10:int})",
            "trigger": "wnoise\tvoid wnoise( vector4; int &; float &; float &; float &; float &; int; int; int; int )"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:int}, ${6:int}, ${7:int}, ${8:int})",
            "trigger": "wnoise\tvoid wnoise( vector4; int &; float &; float &; int; int; int; int )"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &})",
            "trigger": "wnoise\tvoid wnoise( vector; int &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "wnoise\tvoid wnoise( vector; int &; float &; float &; float &; float & )"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:int}, ${8:int}, ${9:int})",
            "trigger": "wnoise\tvoid wnoise( vector; int &; float &; float &; float &; float &; int; int; int )"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "wnoise\tvoid wnoise( vector; int &; float &; float &; int; int; int )"
        },
        {
            "contents": "wo_nspace(${1:vector})",
            "trigger": "wo_nspace\tvector wo_nspace( vector )"
        },
        {
            "contents": "wo_space()",
            "trigger": "wo_space\tmatrix wo_space( void )"
        },
        {
            "contents": "wo_space(${1:vector4})",
            "trigger": "wo_space\tvector4 wo_space( vector4 )"
        },
        {
            "contents": "wo_space(${1:vector})",
            "trigger": "wo_space\tvector wo_space( vector )"
        },
        {
            "contents": "wo_vspace(${1:vector})",
            "trigger": "wo_vspace\tvector wo_vspace( vector )"
        },
        {
            "contents": "wt_nspace(${1:vector})",
            "trigger": "wt_nspace\tvector wt_nspace( vector )"
        },
        {
            "contents": "wt_space()",
            "trigger": "wt_space\tmatrix wt_space( void )"
        },
        {
            "contents": "wt_space(${1:vector4})",
            "trigger": "wt_space\tvector4 wt_space( vector4 )"
        },
        {
            "contents": "wt_space(${1:vector})",
            "trigger": "wt_space\tvector wt_space( vector )"
        },
        {
            "contents": "wt_vspace(${1:vector})",
            "trigger": "wt_vspace\tvector wt_vspace( vector )"
        },
        {
            "contents": "xnoise(${1:float})",
            "trigger": "xnoise\tfloat xnoise( float )"
        },
        {
            "contents": "xnoise(${1:float}, ${2:float})",
            "trigger": "xnoise\tfloat xnoise( float; float )"
        },
        {
            "contents": "xnoise(${1:vector4})",
            "trigger": "xnoise\tfloat xnoise( vector4 )"
        },
        {
            "contents": "xnoise(${1:vector})",
            "trigger": "xnoise\tfloat xnoise( vector )"
        },
        {
            "contents": "xnoise(${1:float})",
            "trigger": "xnoise\tvector xnoise( float )"
        },
        {
            "contents": "xnoise(${1:float}, ${2:float})",
            "trigger": "xnoise\tvector xnoise( float; float )"
        },
        {
            "contents": "xnoise(${1:vector4})",
            "trigger": "xnoise\tvector xnoise( vector4 )"
        },
        {
            "contents": "xnoise(${1:vector})",
            "trigger": "xnoise\tvector xnoise( vector )"
        },
        {
            "contents": "xnoised(${1:float}, ${2:float &}, ${3:float &})",
            "trigger": "xnoised\tvoid xnoised( float; float &; float & )"
        },
        {
            "contents": "xnoised(${1:float}, ${2:float}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "xnoised\tvoid xnoised( float; float; float &; float &; float & )"
        },
        {
            "contents": "xnoised(${1:float}, ${2:float}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "xnoised\tvoid xnoised( float; float; vector &; vector &; vector & )"
        },
        {
            "contents": "xnoised(${1:float}, ${2:vector &}, ${3:vector &})",
            "trigger": "xnoised\tvoid xnoised( float; vector &; vector & )"
        },
        {
            "contents": "xnoised(${1:vector4}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "xnoised\tvoid xnoised( vector4; float &; float &; float &; float &; float & )"
        },
        {
            "contents": "xnoised(${1:vector4}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &}, ${6:vector &})",
            "trigger": "xnoised\tvoid xnoised( vector4; vector &; vector &; vector &; vector &; vector & )"
        },
        {
            "contents": "xnoised(${1:vector}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "xnoised\tvoid xnoised( vector; float &; float &; float &; float & )"
        },
        {
            "contents": "xnoised(${1:vector}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "xnoised\tvoid xnoised( vector; vector &; vector &; vector &; vector & )"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "xyzdist\tfloat xyzdist( int; string; vector )"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &})",
            "trigger": "xyzdist\tfloat xyzdist( int; string; vector; int &; vector & )"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:float})",
            "trigger": "xyzdist\tfloat xyzdist( int; string; vector; int &; vector &; float )"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:vector})",
            "trigger": "xyzdist\tfloat xyzdist( int; vector )"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:vector}, ${3:int &}, ${4:vector &})",
            "trigger": "xyzdist\tfloat xyzdist( int; vector; int &; vector & )"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:vector}, ${3:int &}, ${4:vector &}, ${5:float})",
            "trigger": "xyzdist\tfloat xyzdist( int; vector; int &; vector &; float )"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "xyzdist\tfloat xyzdist( string; string; vector )"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &})",
            "trigger": "xyzdist\tfloat xyzdist( string; string; vector; int &; vector & )"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:float})",
            "trigger": "xyzdist\tfloat xyzdist( string; string; vector; int &; vector &; float )"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:vector})",
            "trigger": "xyzdist\tfloat xyzdist( string; vector )"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:vector}, ${3:int &}, ${4:vector &})",
            "trigger": "xyzdist\tfloat xyzdist( string; vector; int &; vector & )"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:vector}, ${3:int &}, ${4:vector &}, ${5:float})",
            "trigger": "xyzdist\tfloat xyzdist( string; vector; int &; vector &; float )"
        },
        {
            "contents": "xyztorgb(${1:vector})",
            "trigger": "xyztorgb\tvector xyztorgb( vector )"
        },
        {
            "contents": "accessframe(${1:int})",
            "trigger": "accessframe\tvoid accessframe( int )"
        },
        {
            "contents": "alphaname()",
            "trigger": "alphaname\tstring alphaname( void )"
        },
        {
            "contents": "binput(${1:int}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "binput\tfloat binput( int; float; float; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:...})",
            "trigger": "binput\tfloat binput( int; int; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "binput\tfloat binput( int; int; int; float; float; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "binput\tfloat binput( int; int; int; int; float; float; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:...})",
            "trigger": "binput\tfloat binput( int; int; int; int; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "binput\tfloat binput( int; int; int; int; int; int; int; ... )"
        },
        {
            "contents": "binput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "binput\tvector4 binput( float; float; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "binput\tvector4 binput( int; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "binput\tvector4 binput( int; int; float; float; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector4 binput( int; int; int; float; float; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "binput\tvector4 binput( int; int; int; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector4 binput( int; int; int; int; int; int; ... )"
        },
        {
            "contents": "binput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "binput\tvector binput( float; float; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "binput\tvector binput( int; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "binput\tvector binput( int; int; float; float; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector binput( int; int; int; float; float; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "binput\tvector binput( int; int; int; int; ... )"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector binput( int; int; int; int; int; int; ... )"
        },
        {
            "contents": "bumpname()",
            "trigger": "bumpname\tstring bumpname( void )"
        },
        {
            "contents": "chname(${1:int}, ${2:int})",
            "trigger": "chname\tstring chname( int; int )"
        },
        {
            "contents": "cinput(${1:int}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "cinput\tfloat cinput( int; float; float; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:...})",
            "trigger": "cinput\tfloat cinput( int; int; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "cinput\tfloat cinput( int; int; int; float; float; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "cinput\tfloat cinput( int; int; int; int; float; float; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:...})",
            "trigger": "cinput\tfloat cinput( int; int; int; int; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "cinput\tfloat cinput( int; int; int; int; int; int; int; ... )"
        },
        {
            "contents": "cinput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "cinput\tvector4 cinput( float; float; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "cinput\tvector4 cinput( int; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "cinput\tvector4 cinput( int; int; float; float; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector4 cinput( int; int; int; float; float; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "cinput\tvector4 cinput( int; int; int; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector4 cinput( int; int; int; int; int; int; ... )"
        },
        {
            "contents": "cinput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "cinput\tvector cinput( float; float; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "cinput\tvector cinput( int; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "cinput\tvector cinput( int; int; float; float; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector cinput( int; int; int; float; float; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "cinput\tvector cinput( int; int; int; int; ... )"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector cinput( int; int; int; int; int; int; ... )"
        },
        {
            "contents": "colorname()",
            "trigger": "colorname\tstring colorname( void )"
        },
        {
            "contents": "depthname()",
            "trigger": "depthname\tstring depthname( void )"
        },
        {
            "contents": "finput(${1:int}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "finput\tfloat finput( int; float; float; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:...})",
            "trigger": "finput\tfloat finput( int; int; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "finput\tfloat finput( int; int; int; float; float; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "finput\tfloat finput( int; int; int; int; float; float; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:...})",
            "trigger": "finput\tfloat finput( int; int; int; int; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "finput\tfloat finput( int; int; int; int; int; int; int; ... )"
        },
        {
            "contents": "finput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "finput\tvector4 finput( float; float; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "finput\tvector4 finput( int; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "finput\tvector4 finput( int; int; float; float; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector4 finput( int; int; int; float; float; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "finput\tvector4 finput( int; int; int; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector4 finput( int; int; int; int; int; int; ... )"
        },
        {
            "contents": "finput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "finput\tvector finput( float; float; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "finput\tvector finput( int; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "finput\tvector finput( int; int; float; float; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector finput( int; int; int; float; float; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "finput\tvector finput( int; int; int; int; ... )"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector finput( int; int; int; int; int; int; ... )"
        },
        {
            "contents": "hasplane(${1:string})",
            "trigger": "hasplane\tint hasplane( string )"
        },
        {
            "contents": "iaspect(${1:int})",
            "trigger": "iaspect\tfloat iaspect( int )"
        },
        {
            "contents": "ichname(${1:int}, ${2:int}, ${3:int})",
            "trigger": "ichname\tstring ichname( int; int; int )"
        },
        {
            "contents": "iend(${1:int})",
            "trigger": "iend\tint iend( int )"
        },
        {
            "contents": "iendtime(${1:int})",
            "trigger": "iendtime\tfloat iendtime( int )"
        },
        {
            "contents": "ihasplane(${1:int}, ${2:string})",
            "trigger": "ihasplane\tint ihasplane( int; string )"
        },
        {
            "contents": "inumplanes(${1:int})",
            "trigger": "inumplanes\tint inumplanes( int )"
        },
        {
            "contents": "iplaneindex(${1:int}, ${2:string})",
            "trigger": "iplaneindex\tint iplaneindex( int; string )"
        },
        {
            "contents": "iplanename(${1:int}, ${2:int})",
            "trigger": "iplanename\tstring iplanename( int; int )"
        },
        {
            "contents": "iplanesize(${1:int}, ${2:int})",
            "trigger": "iplanesize\tint iplanesize( int; int )"
        },
        {
            "contents": "irate(${1:int})",
            "trigger": "irate\tfloat irate( int )"
        },
        {
            "contents": "istart(${1:int})",
            "trigger": "istart\tint istart( int )"
        },
        {
            "contents": "istarttime(${1:int})",
            "trigger": "istarttime\tfloat istarttime( int )"
        },
        {
            "contents": "ixres(${1:int})",
            "trigger": "ixres\tint ixres( int )"
        },
        {
            "contents": "iyres(${1:int})",
            "trigger": "iyres\tint iyres( int )"
        },
        {
            "contents": "lumname()",
            "trigger": "lumname\tstring lumname( void )"
        },
        {
            "contents": "maskname()",
            "trigger": "maskname\tstring maskname( void )"
        },
        {
            "contents": "ninput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "ninput\tmatrix3 ninput( int; int; int; int; float; float; int; ... )"
        },
        {
            "contents": "ninput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "ninput\tmatrix3 ninput( int; int; int; int; int; int; int; ... )"
        },
        {
            "contents": "normalname()",
            "trigger": "normalname\tstring normalname( void )"
        },
        {
            "contents": "planeindex(${1:string})",
            "trigger": "planeindex\tint planeindex( string )"
        },
        {
            "contents": "planename(${1:int})",
            "trigger": "planename\tstring planename( int )"
        },
        {
            "contents": "planesize(${1:int})",
            "trigger": "planesize\tint planesize( int )"
        },
        {
            "contents": "pointname()",
            "trigger": "pointname\tstring pointname( void )"
        },
        {
            "contents": "velocityname()",
            "trigger": "velocityname\tstring velocityname( void )"
        },
        {
            "contents": "ambient(${1:...})",
            "trigger": "ambient\tvector ambient( ... )"
        },
        {
            "contents": "ashikhmin(${1:float}, ${2:float}, ${3:vector}, ${4:vector}, ${5:...})",
            "trigger": "ashikhmin\tbsdf ashikhmin( float; float; vector; vector; ... )"
        },
        {
            "contents": "blinn(${1:float}, ${2:...})",
            "trigger": "blinn\tbsdf blinn( float; ... )"
        },
        {
            "contents": "blinn(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "blinn\tvector blinn( vector; vector; float; ... )"
        },
        {
            "contents": "cone(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "cone\tbsdf cone( vector; float; ... )"
        },
        {
            "contents": "diffuse(${1:float}, ${2:...})",
            "trigger": "diffuse\tbsdf diffuse( float; ... )"
        },
        {
            "contents": "diffuse(${1:...})",
            "trigger": "diffuse\tbsdf diffuse( ... )"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:...})",
            "trigger": "diffuse\tvector diffuse( vector; ... )"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "diffuse\tvector diffuse( vector; vector; float; ... )"
        },
        {
            "contents": "fastshadow(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "fastshadow\tfloat fastshadow( vector; vector; float; ... )"
        },
        {
            "contents": "filtershadow(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "filtershadow\tvector filtershadow( vector; vector; float; ... )"
        },
        {
            "contents": "frontface(${1:vector}, ${2:vector})",
            "trigger": "frontface\tvector frontface( vector; vector )"
        },
        {
            "contents": "getblurP(${1:float})",
            "trigger": "getblurP\tvector getblurP( float )"
        },
        {
            "contents": "getcomp(${1:light[]}, ${2:int})",
            "trigger": "getcomp\tlight getcomp( light[]; int )"
        },
        {
            "contents": "getcomp(${1:material[]}, ${2:int})",
            "trigger": "getcomp\tmaterial getcomp( material[]; int )"
        },
        {
            "contents": "getcomponents()",
            "trigger": "getcomponents\tstring[] getcomponents( void )"
        },
        {
            "contents": "getfogname()",
            "trigger": "getfogname\tstring getfogname( void )"
        },
        {
            "contents": "getglobalraylevel()",
            "trigger": "getglobalraylevel\tint getglobalraylevel( void )"
        },
        {
            "contents": "getlight(${1:int})",
            "trigger": "getlight\tlight getlight( int )"
        },
        {
            "contents": "getlightid(${1:string})",
            "trigger": "getlightid\tint getlightid( string )"
        },
        {
            "contents": "getlightname()",
            "trigger": "getlightname\tstring getlightname( void )"
        },
        {
            "contents": "getlightname(${1:int})",
            "trigger": "getlightname\tstring getlightname( int )"
        },
        {
            "contents": "getlights(${1:...})",
            "trigger": "getlights\tint[] getlights( ... )"
        },
        {
            "contents": "getlights(${1:material}, ${2:vector}, ${3:...})",
            "trigger": "getlights\tint[] getlights( material; vector; ... )"
        },
        {
            "contents": "getlights(${1:vector}, ${2:...})",
            "trigger": "getlights\tint[] getlights( vector; ... )"
        },
        {
            "contents": "getlightscope(${1:material}, ${2:string &}, ${3:string &})",
            "trigger": "getlightscope\tvoid getlightscope( material; string &; string & )"
        },
        {
            "contents": "getmaterial()",
            "trigger": "getmaterial\tmaterial getmaterial( void )"
        },
        {
            "contents": "getobjectname()",
            "trigger": "getobjectname\tstring getobjectname( void )"
        },
        {
            "contents": "getphotonlight()",
            "trigger": "getphotonlight\tint getphotonlight( void )"
        },
        {
            "contents": "getprimid()",
            "trigger": "getprimid\tint getprimid( void )"
        },
        {
            "contents": "getptextureid()",
            "trigger": "getptextureid\tint getptextureid( void )"
        },
        {
            "contents": "getraylevel()",
            "trigger": "getraylevel\tint getraylevel( void )"
        },
        {
            "contents": "getrayweight()",
            "trigger": "getrayweight\tfloat getrayweight( void )"
        },
        {
            "contents": "getscope(${1:material}, ${2:string}, ${3:string &}, ${4:string &})",
            "trigger": "getscope\tvoid getscope( material; string; string &; string & )"
        },
        {
            "contents": "gradient(${1:float}, ${2:...})",
            "trigger": "gradient\tvector gradient( float; ... )"
        },
        {
            "contents": "haslight(${1:material}, ${2:vector}, ${3:int}, ${4:...})",
            "trigger": "haslight\tint haslight( material; vector; int; ... )"
        },
        {
            "contents": "intersect_lights(${1:int[]}, ${2:vector}, ${3:vector}, ${4:float}, ${5:int &}, ${6:float &}, ${7:vector &}, ${8:float &}, ${9:...})",
            "trigger": "intersect_lights\tint intersect_lights( int[]; vector; vector; float; int &; float &; vector &; float &; ... )"
        },
        {
            "contents": "irradiance(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "irradiance\tvector irradiance( vector; vector; ... )"
        },
        {
            "contents": "israytracing()",
            "trigger": "israytracing\tint israytracing( void )"
        },
        {
            "contents": "isuvrendering()",
            "trigger": "isuvrendering\tint isuvrendering( void )"
        },
        {
            "contents": "isvarying(${1:light})",
            "trigger": "isvarying\tint isvarying( light )"
        },
        {
            "contents": "isvarying(${1:material})",
            "trigger": "isvarying\tint isvarying( material )"
        },
        {
            "contents": "isvarying(${1:light[]})",
            "trigger": "isvarying\tint isvarying( light[] )"
        },
        {
            "contents": "isvarying(${1:material[]})",
            "trigger": "isvarying\tint isvarying( material[] )"
        },
        {
            "contents": "len(${1:light[]})",
            "trigger": "len\tint len( light[] )"
        },
        {
            "contents": "len(${1:material[]})",
            "trigger": "len\tint len( material[] )"
        },
        {
            "contents": "lightid(${1:light})",
            "trigger": "lightid\tint lightid( light )"
        },
        {
            "contents": "limport(${1:string}, ${2:matrix2 &})",
            "trigger": "limport\tint limport( string; matrix2 & )"
        },
        {
            "contents": "limport(${1:string}, ${2:matrix3 &})",
            "trigger": "limport\tint limport( string; matrix3 & )"
        },
        {
            "contents": "limport(${1:string}, ${2:matrix &})",
            "trigger": "limport\tint limport( string; matrix & )"
        },
        {
            "contents": "limport(${1:string}, ${2:float &})",
            "trigger": "limport\tint limport( string; float & )"
        },
        {
            "contents": "limport(${1:string}, ${2:int &})",
            "trigger": "limport\tint limport( string; int & )"
        },
        {
            "contents": "limport(${1:string}, ${2:vector4 &})",
            "trigger": "limport\tint limport( string; vector4 & )"
        },
        {
            "contents": "limport(${1:string}, ${2:string &})",
            "trigger": "limport\tint limport( string; string & )"
        },
        {
            "contents": "limport(${1:string}, ${2:vector2 &})",
            "trigger": "limport\tint limport( string; vector2 & )"
        },
        {
            "contents": "limport(${1:string}, ${2:vector &})",
            "trigger": "limport\tint limport( string; vector & )"
        },
        {
            "contents": "matchvex_blinn(${1:float}, ${2:...})",
            "trigger": "matchvex_blinn\tbsdf matchvex_blinn( float; ... )"
        },
        {
            "contents": "matchvex_specular(${1:float}, ${2:...})",
            "trigger": "matchvex_specular\tbsdf matchvex_specular( float; ... )"
        },
        {
            "contents": "newsampler(${1:...})",
            "trigger": "newsampler\tint newsampler( ... )"
        },
        {
            "contents": "newsampler(${1:int}, ${2:...})",
            "trigger": "newsampler\tint newsampler( int; ... )"
        },
        {
            "contents": "nextsample(${1:int &}, ${2:float &}, ${3:float &}, ${4:...})",
            "trigger": "nextsample\tvoid nextsample( int &; float &; float &; ... )"
        },
        {
            "contents": "nextsample(${1:int &}, ${2:vector &}, ${3:...})",
            "trigger": "nextsample\tvoid nextsample( int &; vector &; ... )"
        },
        {
            "contents": "occlusion(${1:float &}, ${2:vector &}, ${3:vector}, ${4:vector}, ${5:...})",
            "trigger": "occlusion\tvoid occlusion( float &; vector &; vector; vector; ... )"
        },
        {
            "contents": "occlusion(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "occlusion\tvector occlusion( vector; vector; ... )"
        },
        {
            "contents": "opend(${1:int})",
            "trigger": "opend\tvoid opend( int )"
        },
        {
            "contents": "opstart(${1:string})",
            "trigger": "opstart\tint opstart( string )"
        },
        {
            "contents": "pathtrace(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "pathtrace\tvector pathtrace( vector; vector; ... )"
        },
        {
            "contents": "phong(${1:float}, ${2:...})",
            "trigger": "phong\tbsdf phong( float; ... )"
        },
        {
            "contents": "phong(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "phong\tbsdf phong( vector; float; ... )"
        },
        {
            "contents": "phong(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "phong\tvector phong( vector; vector; float; ... )"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:float}, ${3:float}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "phonglobe\tbsdf phonglobe( vector; float; float; vector; vector; ... )"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "phonglobe\tbsdf phonglobe( vector; float; ... )"
        },
        {
            "contents": "pop(${1:light[] &}, ${2:int})",
            "trigger": "pop\tlight pop( light[] &; int )"
        },
        {
            "contents": "pop(${1:material[] &}, ${2:int})",
            "trigger": "pop\tmaterial pop( material[] &; int )"
        },
        {
            "contents": "pop(${1:light[] &})",
            "trigger": "pop\tlight pop( light[] & )"
        },
        {
            "contents": "pop(${1:material[] &})",
            "trigger": "pop\tmaterial pop( material[] & )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tmatrix3 ptexture( string; int; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tmatrix ptexture( string; int; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tfloat ptexture( string; int; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tvector4 ptexture( string; int; ... )"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tvector ptexture( string; int; ... )"
        },
        {
            "contents": "push(${1:light[] &}, ${2:light})",
            "trigger": "push\tvoid push( light[] &; light )"
        },
        {
            "contents": "push(${1:material[] &}, ${2:material})",
            "trigger": "push\tvoid push( material[] &; material )"
        },
        {
            "contents": "push(${1:light[] &}, ${2:light[]})",
            "trigger": "push\tvoid push( light[] &; light[] )"
        },
        {
            "contents": "push(${1:material[] &}, ${2:material[]})",
            "trigger": "push\tvoid push( material[] &; material[] )"
        },
        {
            "contents": "rayhittest(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "rayhittest\tfloat rayhittest( vector; vector; float; ... )"
        },
        {
            "contents": "rayhittest(${1:vector}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float}, ${6:...})",
            "trigger": "rayhittest\tfloat rayhittest( vector; vector; vector &; vector &; float; ... )"
        },
        {
            "contents": "reflectlight(${1:float}, ${2:float}, ${3:...})",
            "trigger": "reflectlight\tvector reflectlight( float; float; ... )"
        },
        {
            "contents": "reflectlight(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "reflectlight\tvector reflectlight( vector; vector; float; float; ... )"
        },
        {
            "contents": "reflectlight(${1:vector}, ${2:vector}, ${3:vector}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "reflectlight\tvector reflectlight( vector; vector; vector; float; float; ... )"
        },
        {
            "contents": "refractlight(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "refractlight\tvoid refractlight( vector &; vector &; float &; vector; vector; float; float; ... )"
        },
        {
            "contents": "refractlight(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:vector}, ${7:float}, ${8:float}, ${9:float}, ${10:...})",
            "trigger": "refractlight\tvoid refractlight( vector &; vector &; float &; vector; vector; vector; float; float; float; ... )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:matrix3 &})",
            "trigger": "renderstate\tint renderstate( material; string; matrix3 & )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:matrix &})",
            "trigger": "renderstate\tint renderstate( material; string; matrix & )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:float &})",
            "trigger": "renderstate\tint renderstate( material; string; float & )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:int &})",
            "trigger": "renderstate\tint renderstate( material; string; int & )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:vector4 &})",
            "trigger": "renderstate\tint renderstate( material; string; vector4 & )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:string &})",
            "trigger": "renderstate\tint renderstate( material; string; string & )"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:vector &})",
            "trigger": "renderstate\tint renderstate( material; string; vector & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:matrix3 &})",
            "trigger": "renderstate\tint renderstate( string; matrix3 & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:matrix &})",
            "trigger": "renderstate\tint renderstate( string; matrix & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:float &})",
            "trigger": "renderstate\tint renderstate( string; float & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:int &})",
            "trigger": "renderstate\tint renderstate( string; int & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:vector4 &})",
            "trigger": "renderstate\tint renderstate( string; vector4 & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:string &})",
            "trigger": "renderstate\tint renderstate( string; string & )"
        },
        {
            "contents": "renderstate(${1:string}, ${2:vector &})",
            "trigger": "renderstate\tint renderstate( string; vector & )"
        },
        {
            "contents": "resize(${1:light[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( light[] &; int )"
        },
        {
            "contents": "resize(${1:material[] &}, ${2:int})",
            "trigger": "resize\tvoid resize( material[] &; int )"
        },
        {
            "contents": "resolvemissedray(${1:vector}, ${2:float}, ${3:int}, ${4:...})",
            "trigger": "resolvemissedray\tvector resolvemissedray( vector; float; int; ... )"
        },
        {
            "contents": "sample_geometry(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "sample_geometry\tint sample_geometry( vector; vector; float; ... )"
        },
        {
            "contents": "sample_light(${1:int}, ${2:vector}, ${3:vector}, ${4:float}, ${5:vector &}, ${6:vector &}, ${7:float &}, ${8:...})",
            "trigger": "sample_light\tint sample_light( int; vector; vector; float; vector &; vector &; float &; ... )"
        },
        {
            "contents": "sample_photon(${1:light}, ${2:vector &}, ${3:vector &}, ${4:float &}, ${5:float})",
            "trigger": "sample_photon\tint sample_photon( light; vector &; vector &; float &; float )"
        },
        {
            "contents": "select(${1:int}, ${2:light}, ${3:light})",
            "trigger": "select\tlight select( int; light; light )"
        },
        {
            "contents": "select(${1:int}, ${2:material}, ${3:material})",
            "trigger": "select\tmaterial select( int; material; material )"
        },
        {
            "contents": "select(${1:int}, ${2:light[]}, ${3:light[]})",
            "trigger": "select\tlight[] select( int; light[]; light[] )"
        },
        {
            "contents": "select(${1:int}, ${2:material[]}, ${3:material[]})",
            "trigger": "select\tmaterial[] select( int; material[]; material[] )"
        },
        {
            "contents": "set(${1:light})",
            "trigger": "set\tlight set( light )"
        },
        {
            "contents": "set(${1:material})",
            "trigger": "set\tmaterial set( material )"
        },
        {
            "contents": "set(${1:light[]})",
            "trigger": "set\tlight[] set( light[] )"
        },
        {
            "contents": "set(${1:material[]})",
            "trigger": "set\tmaterial[] set( material[] )"
        },
        {
            "contents": "setcomp(${1:light[] &}, ${2:light}, ${3:int})",
            "trigger": "setcomp\tlight setcomp( light[] &; light; int )"
        },
        {
            "contents": "setcomp(${1:material[] &}, ${2:material}, ${3:int})",
            "trigger": "setcomp\tmaterial setcomp( material[] &; material; int )"
        },
        {
            "contents": "setcurrentlight(${1:int})",
            "trigger": "setcurrentlight\tint setcurrentlight( int )"
        },
        {
            "contents": "shadow(${1:vector &})",
            "trigger": "shadow\tvoid shadow( vector & )"
        },
        {
            "contents": "shadow(${1:vector})",
            "trigger": "shadow\tvector shadow( vector )"
        },
        {
            "contents": "shadow(${1:vector &}, ${2:vector}, ${3:vector})",
            "trigger": "shadow\tvoid shadow( vector &; vector; vector )"
        },
        {
            "contents": "shadow(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "shadow\tvector shadow( vector; vector; vector )"
        },
        {
            "contents": "shadow_light(${1:int}, ${2:vector}, ${3:vector}, ${4:float}, ${5:...})",
            "trigger": "shadow_light\tvector shadow_light( int; vector; vector; float; ... )"
        },
        {
            "contents": "specular(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "specular\tvector specular( vector; vector; float; ... )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:float})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; float )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:int})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; int )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector4})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; vector4 )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; vector )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:float[]})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; float[] )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:int[]})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; int[] )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector4[]})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; vector4[] )"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector[]})",
            "trigger": "storelightexport\tvoid storelightexport( string; string; vector[] )"
        },
        {
            "contents": "texture(${1:string}, ${2:...})",
            "trigger": "texture\tvector4 texture( string; ... )"
        },
        {
            "contents": "texture(${1:string}, ${2:...})",
            "trigger": "texture\tvector texture( string; ... )"
        },
        {
            "contents": "trace(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "trace\tint trace( vector; vector; float; ... )"
        },
        {
            "contents": "trace(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "trace\tvoid trace( vector &; vector &; float &; vector; vector; float; float; ... )"
        },
        {
            "contents": "upush(${1:light[] &}, ${2:light})",
            "trigger": "upush\tvoid upush( light[] &; light )"
        },
        {
            "contents": "upush(${1:material[] &}, ${2:material})",
            "trigger": "upush\tvoid upush( material[] &; material )"
        },
        {
            "contents": "writepixel(${1:string}, ${2:float}, ${3:float}, ${4:vector})",
            "trigger": "writepixel\tvoid writepixel( string; float; float; vector )"
        },
        {
            "contents": "dimport(${1:string}, ${2:matrix2 &})",
            "trigger": "dimport\tint dimport( string; matrix2 & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:matrix3 &})",
            "trigger": "dimport\tint dimport( string; matrix3 & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:matrix &})",
            "trigger": "dimport\tint dimport( string; matrix & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:float &})",
            "trigger": "dimport\tint dimport( string; float & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:int &})",
            "trigger": "dimport\tint dimport( string; int & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:vector4 &})",
            "trigger": "dimport\tint dimport( string; vector4 & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:string &})",
            "trigger": "dimport\tint dimport( string; string & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:vector2 &})",
            "trigger": "dimport\tint dimport( string; vector2 & )"
        },
        {
            "contents": "dimport(${1:string}, ${2:vector &})",
            "trigger": "dimport\tint dimport( string; vector & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:matrix2 &})",
            "trigger": "rayimport\tint rayimport( string; matrix2 & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:matrix3 &})",
            "trigger": "rayimport\tint rayimport( string; matrix3 & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:matrix &})",
            "trigger": "rayimport\tint rayimport( string; matrix & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:float &})",
            "trigger": "rayimport\tint rayimport( string; float & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:int &})",
            "trigger": "rayimport\tint rayimport( string; int & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:vector4 &})",
            "trigger": "rayimport\tint rayimport( string; vector4 & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:string &})",
            "trigger": "rayimport\tint rayimport( string; string & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:vector2 &})",
            "trigger": "rayimport\tint rayimport( string; vector2 & )"
        },
        {
            "contents": "rayimport(${1:string}, ${2:vector &})",
            "trigger": "rayimport\tint rayimport( string; vector & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:matrix2 &})",
            "trigger": "shimport\tint shimport( string; matrix2 & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:matrix3 &})",
            "trigger": "shimport\tint shimport( string; matrix3 & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:matrix &})",
            "trigger": "shimport\tint shimport( string; matrix & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:float &})",
            "trigger": "shimport\tint shimport( string; float & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:int &})",
            "trigger": "shimport\tint shimport( string; int & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:vector4 &})",
            "trigger": "shimport\tint shimport( string; vector4 & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:string &})",
            "trigger": "shimport\tint shimport( string; string & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:vector2 &})",
            "trigger": "shimport\tint shimport( string; vector2 & )"
        },
        {
            "contents": "shimport(${1:string}, ${2:vector &})",
            "trigger": "shimport\tint shimport( string; vector & )"
        },
        {
            "contents": "simport(${1:string}, ${2:matrix2 &})",
            "trigger": "simport\tint simport( string; matrix2 & )"
        },
        {
            "contents": "simport(${1:string}, ${2:matrix3 &})",
            "trigger": "simport\tint simport( string; matrix3 & )"
        },
        {
            "contents": "simport(${1:string}, ${2:matrix &})",
            "trigger": "simport\tint simport( string; matrix & )"
        },
        {
            "contents": "simport(${1:string}, ${2:float &})",
            "trigger": "simport\tint simport( string; float & )"
        },
        {
            "contents": "simport(${1:string}, ${2:int &})",
            "trigger": "simport\tint simport( string; int & )"
        },
        {
            "contents": "simport(${1:string}, ${2:vector4 &})",
            "trigger": "simport\tint simport( string; vector4 & )"
        },
        {
            "contents": "simport(${1:string}, ${2:string &})",
            "trigger": "simport\tint simport( string; string & )"
        },
        {
            "contents": "simport(${1:string}, ${2:vector2 &})",
            "trigger": "simport\tint simport( string; vector2 & )"
        },
        {
            "contents": "simport(${1:string}, ${2:vector &})",
            "trigger": "simport\tint simport( string; vector & )"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tmatrix3 mattrib( string; vector )"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tmatrix mattrib( string; vector )"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tfloat mattrib( string; vector )"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tvector4 mattrib( string; vector )"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tvector mattrib( string; vector )"
        },
        {
            "contents": "mdensity(${1:vector})",
            "trigger": "mdensity\tfloat mdensity( vector )"
        },
        {
            "contents": "mspace(${1:vector})",
            "trigger": "mspace\tvector mspace( vector )"
        },
        {
            "contents": "isfogray()",
            "trigger": "isfogray\tint isfogray( void )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:matrix3}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; matrix3; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:matrix}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; matrix; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:float}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; float; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:int}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; int; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:vector4}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; vector4; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:string}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; string; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "addattribute\tvoid addattribute( string; vector; ... )"
        },
        {
            "contents": "addattribute(${1:string}, ${2:float[]}, ${3:int}, ${4:...})",
            "trigger": "addattribute\tvoid addattribute( string; float[]; int; ... )"
        },
        {
            "contents": "addgroup(${1:string}, ${2:int})",
            "trigger": "addgroup\tvoid addgroup( string; int )"
        },
        {
            "contents": "addvariablename(${1:string}, ${2:string})",
            "trigger": "addvariablename\tvoid addvariablename( string; string )"
        },
        {
            "contents": "computenormal(${1:int})",
            "trigger": "computenormal\tvoid computenormal( int )"
        },
        {
            "contents": "import(${1:string}, ${2:matrix3 &}, ${3:int})",
            "trigger": "import\tint import( string; matrix3 &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:matrix3 &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; matrix3 &; int; int )"
        },
        {
            "contents": "import(${1:string}, ${2:matrix &}, ${3:int})",
            "trigger": "import\tint import( string; matrix &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:matrix &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; matrix &; int; int )"
        },
        {
            "contents": "import(${1:string}, ${2:float &}, ${3:int})",
            "trigger": "import\tint import( string; float &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:float &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; float &; int; int )"
        },
        {
            "contents": "import(${1:string}, ${2:int &}, ${3:int})",
            "trigger": "import\tint import( string; int &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:int &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; int &; int; int )"
        },
        {
            "contents": "import(${1:string}, ${2:vector4 &}, ${3:int})",
            "trigger": "import\tint import( string; vector4 &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:vector4 &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; vector4 &; int; int )"
        },
        {
            "contents": "import(${1:string}, ${2:vector &}, ${3:int})",
            "trigger": "import\tint import( string; vector &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:vector &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; vector &; int; int )"
        },
        {
            "contents": "import(${1:string}, ${2:float[] &}, ${3:int})",
            "trigger": "import\tint import( string; float[] &; int )"
        },
        {
            "contents": "import(${1:string}, ${2:float[] &}, ${3:int}, ${4:int})",
            "trigger": "import\tint import( string; float[] &; int; int )"
        },
        {
            "contents": "ingroup(${1:string}, ${2:int})",
            "trigger": "ingroup\tint ingroup( string; int )"
        },
        {
            "contents": "newgroup(${1:string})",
            "trigger": "newgroup\tvoid newgroup( string )"
        },
        {
            "contents": "removegroup(${1:string}, ${2:int})",
            "trigger": "removegroup\tvoid removegroup( string; int )"
        },
        {
            "contents": "isshadowray()",
            "trigger": "isshadowray\tint isshadowray( void )"
        }
    ],
    "scope": "source.vex"
}